// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config3_1_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_val,
        data_1_val,
        data_2_val,
        data_3_val,
        idx2,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] data_0_val;
input  [15:0] data_1_val;
input  [15:0] data_2_val;
input  [15:0] data_3_val;
input  [3:0] idx2;
output  [32:0] ap_return_0;
output  [32:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [3:0] query_weight3_address0;
reg    query_weight3_ce0;
wire  signed [10:0] query_weight3_q0;
wire   [3:0] query_weight3_address1;
reg    query_weight3_ce1;
wire  signed [10:0] query_weight3_q1;
wire   [3:0] query_weight3_address2;
reg    query_weight3_ce2;
wire  signed [10:0] query_weight3_q2;
wire   [3:0] query_weight3_address3;
reg    query_weight3_ce3;
wire  signed [10:0] query_weight3_q3;
wire   [3:0] query_weight3_address4;
reg    query_weight3_ce4;
wire  signed [10:0] query_weight3_q4;
wire   [3:0] query_weight3_address5;
reg    query_weight3_ce5;
wire  signed [10:0] query_weight3_q5;
wire   [3:0] query_weight3_address6;
reg    query_weight3_ce6;
wire  signed [10:0] query_weight3_q6;
wire   [3:0] query_weight3_address7;
reg    query_weight3_ce7;
wire  signed [10:0] query_weight3_q7;
reg   [15:0] data_3_val_read_reg_728;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] data_2_val_read_reg_733;
reg   [15:0] data_1_val_read_reg_738;
reg   [15:0] data_0_val_read_reg_743;
wire   [63:0] zext_ln13_fu_434_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln42_fu_445_p1;
wire   [63:0] zext_ln42_7_fu_456_p1;
wire   [63:0] zext_ln42_8_fu_467_p1;
wire   [63:0] zext_ln42_9_fu_478_p1;
wire   [63:0] zext_ln42_10_fu_489_p1;
wire   [63:0] zext_ln42_11_fu_500_p1;
wire   [63:0] zext_ln42_12_fu_511_p1;
wire  signed [15:0] mul_ln42_22_fu_185_p0;
wire  signed [25:0] sext_ln73_972_fu_556_p1;
wire  signed [15:0] mul_ln42_26_fu_186_p0;
wire  signed [25:0] sext_ln73_978_fu_626_p1;
wire  signed [15:0] mul_ln42_24_fu_187_p0;
wire  signed [25:0] sext_ln73_975_fu_591_p1;
wire  signed [15:0] mul_ln42_25_fu_188_p0;
wire  signed [15:0] mul_ln42_20_fu_189_p0;
wire  signed [25:0] sext_ln73_969_fu_521_p1;
wire  signed [15:0] mul_ln42_23_fu_190_p0;
wire  signed [15:0] mul_ln42_21_fu_191_p0;
wire  signed [15:0] mul_ln42_fu_192_p0;
wire   [3:0] add_ln42_fu_439_p2;
wire   [3:0] add_ln42_7_fu_450_p2;
wire   [3:0] add_ln42_8_fu_461_p2;
wire   [3:0] add_ln42_9_fu_472_p2;
wire   [3:0] add_ln42_10_fu_483_p2;
wire   [3:0] add_ln42_11_fu_494_p2;
wire   [3:0] add_ln42_12_fu_505_p2;
wire   [25:0] mul_ln42_fu_192_p2;
wire   [25:0] mul_ln42_20_fu_189_p2;
wire   [25:0] mul_ln42_21_fu_191_p2;
wire   [25:0] mul_ln42_22_fu_185_p2;
wire   [25:0] mul_ln42_23_fu_190_p2;
wire   [25:0] mul_ln42_24_fu_187_p2;
wire   [25:0] mul_ln42_25_fu_188_p2;
wire   [25:0] mul_ln42_26_fu_186_p2;
wire   [15:0] trunc_ln42_21_fu_561_p4;
wire   [15:0] trunc_ln_fu_526_p4;
wire   [15:0] trunc_ln42_23_fu_596_p4;
wire   [15:0] trunc_ln42_25_fu_631_p4;
wire   [15:0] add_ln58_17_fu_662_p2;
wire   [15:0] add_ln58_fu_656_p2;
wire   [15:0] trunc_ln42_22_fu_576_p4;
wire   [15:0] trunc_ln42_s_fu_541_p4;
wire   [15:0] trunc_ln42_24_fu_611_p4;
wire   [15:0] trunc_ln42_26_fu_646_p4;
wire   [15:0] add_ln58_20_fu_680_p2;
wire   [15:0] add_ln58_19_fu_674_p2;
wire   [15:0] x_fu_668_p2;
wire   [25:0] shl_ln_fu_692_p3;
wire   [15:0] x_5_fu_686_p2;
wire   [25:0] shl_ln111_5_fu_704_p3;
wire  signed [32:0] sext_ln110_fu_700_p1;
wire  signed [32:0] sext_ln68_fu_712_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config3_1_1_query_weigcud #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
query_weight3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(query_weight3_address0),
    .ce0(query_weight3_ce0),
    .q0(query_weight3_q0),
    .address1(query_weight3_address1),
    .ce1(query_weight3_ce1),
    .q1(query_weight3_q1),
    .address2(query_weight3_address2),
    .ce2(query_weight3_ce2),
    .q2(query_weight3_q2),
    .address3(query_weight3_address3),
    .ce3(query_weight3_ce3),
    .q3(query_weight3_q3),
    .address4(query_weight3_address4),
    .ce4(query_weight3_ce4),
    .q4(query_weight3_q4),
    .address5(query_weight3_address5),
    .ce5(query_weight3_ce5),
    .q5(query_weight3_q5),
    .address6(query_weight3_address6),
    .ce6(query_weight3_ce6),
    .q6(query_weight3_q6),
    .address7(query_weight3_address7),
    .ce7(query_weight3_ce7),
    .q7(query_weight3_q7)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U40(
    .din0(mul_ln42_22_fu_185_p0),
    .din1(query_weight3_q4),
    .dout(mul_ln42_22_fu_185_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U41(
    .din0(mul_ln42_26_fu_186_p0),
    .din1(query_weight3_q0),
    .dout(mul_ln42_26_fu_186_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U42(
    .din0(mul_ln42_24_fu_187_p0),
    .din1(query_weight3_q2),
    .dout(mul_ln42_24_fu_187_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U43(
    .din0(mul_ln42_25_fu_188_p0),
    .din1(query_weight3_q1),
    .dout(mul_ln42_25_fu_188_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U44(
    .din0(mul_ln42_20_fu_189_p0),
    .din1(query_weight3_q6),
    .dout(mul_ln42_20_fu_189_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U45(
    .din0(mul_ln42_23_fu_190_p0),
    .din1(query_weight3_q3),
    .dout(mul_ln42_23_fu_190_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U46(
    .din0(mul_ln42_21_fu_191_p0),
    .din1(query_weight3_q5),
    .dout(mul_ln42_21_fu_191_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U47(
    .din0(mul_ln42_fu_192_p0),
    .din1(query_weight3_q7),
    .dout(mul_ln42_fu_192_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_0_val_read_reg_743 <= data_0_val;
        data_1_val_read_reg_738 <= data_1_val;
        data_2_val_read_reg_733 <= data_2_val;
        data_3_val_read_reg_728 <= data_3_val;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        query_weight3_ce0 = 1'b1;
    end else begin
        query_weight3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        query_weight3_ce1 = 1'b1;
    end else begin
        query_weight3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        query_weight3_ce2 = 1'b1;
    end else begin
        query_weight3_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        query_weight3_ce3 = 1'b1;
    end else begin
        query_weight3_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        query_weight3_ce4 = 1'b1;
    end else begin
        query_weight3_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        query_weight3_ce5 = 1'b1;
    end else begin
        query_weight3_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        query_weight3_ce6 = 1'b1;
    end else begin
        query_weight3_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        query_weight3_ce7 = 1'b1;
    end else begin
        query_weight3_ce7 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_10_fu_483_p2 = (idx2 + 4'd5);

assign add_ln42_11_fu_494_p2 = (idx2 + 4'd6);

assign add_ln42_12_fu_505_p2 = (idx2 + 4'd7);

assign add_ln42_7_fu_450_p2 = (idx2 + 4'd2);

assign add_ln42_8_fu_461_p2 = (idx2 + 4'd3);

assign add_ln42_9_fu_472_p2 = (idx2 + 4'd4);

assign add_ln42_fu_439_p2 = (idx2 + 4'd1);

assign add_ln58_17_fu_662_p2 = (trunc_ln42_23_fu_596_p4 + trunc_ln42_25_fu_631_p4);

assign add_ln58_19_fu_674_p2 = (trunc_ln42_22_fu_576_p4 + trunc_ln42_s_fu_541_p4);

assign add_ln58_20_fu_680_p2 = (trunc_ln42_24_fu_611_p4 + trunc_ln42_26_fu_646_p4);

assign add_ln58_fu_656_p2 = (trunc_ln42_21_fu_561_p4 + trunc_ln_fu_526_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = sext_ln110_fu_700_p1;

assign ap_return_1 = sext_ln68_fu_712_p1;

assign mul_ln42_20_fu_189_p0 = sext_ln73_969_fu_521_p1;

assign mul_ln42_21_fu_191_p0 = sext_ln73_972_fu_556_p1;

assign mul_ln42_22_fu_185_p0 = sext_ln73_972_fu_556_p1;

assign mul_ln42_23_fu_190_p0 = sext_ln73_975_fu_591_p1;

assign mul_ln42_24_fu_187_p0 = sext_ln73_975_fu_591_p1;

assign mul_ln42_25_fu_188_p0 = sext_ln73_978_fu_626_p1;

assign mul_ln42_26_fu_186_p0 = sext_ln73_978_fu_626_p1;

assign mul_ln42_fu_192_p0 = sext_ln73_969_fu_521_p1;

assign query_weight3_address0 = zext_ln42_12_fu_511_p1;

assign query_weight3_address1 = zext_ln42_11_fu_500_p1;

assign query_weight3_address2 = zext_ln42_10_fu_489_p1;

assign query_weight3_address3 = zext_ln42_9_fu_478_p1;

assign query_weight3_address4 = zext_ln42_8_fu_467_p1;

assign query_weight3_address5 = zext_ln42_7_fu_456_p1;

assign query_weight3_address6 = zext_ln42_fu_445_p1;

assign query_weight3_address7 = zext_ln13_fu_434_p1;

assign sext_ln110_fu_700_p1 = $signed(shl_ln_fu_692_p3);

assign sext_ln68_fu_712_p1 = $signed(shl_ln111_5_fu_704_p3);

assign sext_ln73_969_fu_521_p1 = $signed(data_0_val_read_reg_743);

assign sext_ln73_972_fu_556_p1 = $signed(data_1_val_read_reg_738);

assign sext_ln73_975_fu_591_p1 = $signed(data_2_val_read_reg_733);

assign sext_ln73_978_fu_626_p1 = $signed(data_3_val_read_reg_728);

assign shl_ln111_5_fu_704_p3 = {{x_5_fu_686_p2}, {10'd0}};

assign shl_ln_fu_692_p3 = {{x_fu_668_p2}, {10'd0}};

assign trunc_ln42_21_fu_561_p4 = {{mul_ln42_21_fu_191_p2[25:10]}};

assign trunc_ln42_22_fu_576_p4 = {{mul_ln42_22_fu_185_p2[25:10]}};

assign trunc_ln42_23_fu_596_p4 = {{mul_ln42_23_fu_190_p2[25:10]}};

assign trunc_ln42_24_fu_611_p4 = {{mul_ln42_24_fu_187_p2[25:10]}};

assign trunc_ln42_25_fu_631_p4 = {{mul_ln42_25_fu_188_p2[25:10]}};

assign trunc_ln42_26_fu_646_p4 = {{mul_ln42_26_fu_186_p2[25:10]}};

assign trunc_ln42_s_fu_541_p4 = {{mul_ln42_20_fu_189_p2[25:10]}};

assign trunc_ln_fu_526_p4 = {{mul_ln42_fu_192_p2[25:10]}};

assign x_5_fu_686_p2 = (add_ln58_20_fu_680_p2 + add_ln58_19_fu_674_p2);

assign x_fu_668_p2 = (add_ln58_17_fu_662_p2 + add_ln58_fu_656_p2);

assign zext_ln13_fu_434_p1 = idx2;

assign zext_ln42_10_fu_489_p1 = add_ln42_10_fu_483_p2;

assign zext_ln42_11_fu_500_p1 = add_ln42_11_fu_494_p2;

assign zext_ln42_12_fu_511_p1 = add_ln42_12_fu_505_p2;

assign zext_ln42_7_fu_456_p1 = add_ln42_7_fu_450_p2;

assign zext_ln42_8_fu_467_p1 = add_ln42_8_fu_461_p2;

assign zext_ln42_9_fu_478_p1 = add_ln42_9_fu_472_p2;

assign zext_ln42_fu_445_p1 = add_ln42_fu_439_p2;

endmodule //myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config3_1_1
