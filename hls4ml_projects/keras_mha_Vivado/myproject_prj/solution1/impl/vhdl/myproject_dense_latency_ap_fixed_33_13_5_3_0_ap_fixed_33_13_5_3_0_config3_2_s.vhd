-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_fixed_33_13_5_3_0_ap_fixed_33_13_5_3_0_config3_2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (32 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (32 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (32 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (32 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of myproject_dense_latency_ap_fixed_33_13_5_3_0_ap_fixed_33_13_5_3_0_config3_2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv36_FFFFFFF73 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111101110011";
    constant ap_const_lv36_23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100011";
    constant ap_const_lv36_FFFFFFF0A : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111100001010";
    constant ap_const_lv36_FFFFFFEE4 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111011100100";
    constant ap_const_lv36_FFFFFFD43 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111110101000011";
    constant ap_const_lv36_FFFFFFD48 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111110101001000";
    constant ap_const_lv36_1F9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000111111001";
    constant ap_const_lv36_FFFFFFE85 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111010000101";
    constant ap_const_lv36_FFFFFFDB4 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111110110110100";
    constant ap_const_lv36_1DB : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000111011011";
    constant ap_const_lv36_226 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000100110";
    constant ap_const_lv36_FFFFFFEE8 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111011101000";
    constant ap_const_lv36_F3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000011110011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

attribute shreg_extract : string;
    signal sext_ln42_fu_920_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln42_reg_1297 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln42_5_reg_1304 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_6_reg_1309 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_7_reg_1314 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_fu_1142_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_reg_1319 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_4_fu_1148_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_4_reg_1324 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_7_fu_1154_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_7_reg_1329 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_10_fu_1160_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_10_reg_1334 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln42_12_fu_100_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln42_2_fu_1065_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_12_fu_100_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln42_2_fu_101_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_2_fu_101_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln42_7_fu_102_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln42_1_fu_1000_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_7_fu_102_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln42_4_fu_103_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln70_fu_935_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_4_fu_103_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln42_6_fu_104_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_6_fu_104_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln42_5_fu_105_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_5_fu_105_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln42_3_fu_106_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_3_fu_106_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln42_9_fu_108_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_9_fu_108_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln42_fu_109_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln42_1_fu_110_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_1_fu_110_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln42_8_fu_113_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_8_fu_113_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln42_10_fu_114_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_10_fu_114_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln42_11_fu_115_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_11_fu_115_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln42_fu_109_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln70_fu_935_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_4_fu_103_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln73_fu_952_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln73_fu_952_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_shl1_fu_956_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln73_1_fu_964_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_5_fu_105_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_6_fu_104_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln42_1_fu_1000_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln73_1_fu_1007_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln73_1_fu_1007_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln_fu_1011_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln73_fu_1019_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_7_fu_102_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_8_fu_113_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_9_fu_108_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln42_2_fu_1065_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln73_2_fu_1072_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln73_2_fu_1072_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_shl_fu_1076_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln73_2_fu_1084_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_10_fu_114_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_11_fu_115_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_12_fu_100_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln42_4_fu_942_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_925_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_8_fu_1025_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_11_fu_1090_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_1_fu_1136_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_fu_1130_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_9_fu_1035_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_12_fu_1100_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_s_fu_1045_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_13_fu_1110_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_10_fu_1055_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_14_fu_1120_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln42_1_fu_110_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_2_fu_101_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_3_fu_106_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln42_1_fu_1166_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_3_fu_1196_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_2_fu_1176_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_6_fu_1206_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_3_fu_1186_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_9_fu_1216_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1_fu_1226_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal x_1_fu_1201_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln111_1_fu_1237_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal x_2_fu_1211_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln111_2_fu_1249_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal x_3_fu_1221_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln111_3_fu_1261_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln110_fu_1233_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln110_1_fu_1245_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln110_2_fu_1257_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln68_fu_1269_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return_0_int_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_return_1_int_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_return_2_int_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_return_3_int_reg : STD_LOGIC_VECTOR (32 downto 0);

    component myproject_mul_33s_9s_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_33s_7ns_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_33s_10s_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_33s_11s_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_33s_10ns_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_33s_11ns_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_33s_9ns_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    mul_33s_9s_36_1_0_U4182 : component myproject_mul_33s_9s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 9,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_12_fu_100_p0,
        din1 => mul_ln42_12_fu_100_p1,
        dout => mul_ln42_12_fu_100_p2);

    mul_33s_7ns_36_1_0_U4183 : component myproject_mul_33s_7ns_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 7,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_2_fu_101_p0,
        din1 => mul_ln42_2_fu_101_p1,
        dout => mul_ln42_2_fu_101_p2);

    mul_33s_9s_36_1_0_U4184 : component myproject_mul_33s_9s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 9,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_7_fu_102_p0,
        din1 => mul_ln42_7_fu_102_p1,
        dout => mul_ln42_7_fu_102_p2);

    mul_33s_10s_36_1_0_U4185 : component myproject_mul_33s_10s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 10,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_4_fu_103_p0,
        din1 => mul_ln42_4_fu_103_p1,
        dout => mul_ln42_4_fu_103_p2);

    mul_33s_11s_36_1_0_U4186 : component myproject_mul_33s_11s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 11,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_6_fu_104_p0,
        din1 => mul_ln42_6_fu_104_p1,
        dout => mul_ln42_6_fu_104_p2);

    mul_33s_11s_36_1_0_U4187 : component myproject_mul_33s_11s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 11,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_5_fu_105_p0,
        din1 => mul_ln42_5_fu_105_p1,
        dout => mul_ln42_5_fu_105_p2);

    mul_33s_10ns_36_1_0_U4188 : component myproject_mul_33s_10ns_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 10,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_3_fu_106_p0,
        din1 => mul_ln42_3_fu_106_p1,
        dout => mul_ln42_3_fu_106_p2);

    mul_33s_10s_36_1_0_U4189 : component myproject_mul_33s_10s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 10,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_9_fu_108_p0,
        din1 => mul_ln42_9_fu_108_p1,
        dout => mul_ln42_9_fu_108_p2);

    mul_33s_11s_36_1_0_U4190 : component myproject_mul_33s_11s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 11,
        dout_WIDTH => 36)
    port map (
        din0 => data_0_val,
        din1 => mul_ln42_fu_109_p1,
        dout => mul_ln42_fu_109_p2);

    mul_33s_10ns_36_1_0_U4191 : component myproject_mul_33s_10ns_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 10,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_1_fu_110_p0,
        din1 => mul_ln42_1_fu_110_p1,
        dout => mul_ln42_1_fu_110_p2);

    mul_33s_11ns_36_1_0_U4192 : component myproject_mul_33s_11ns_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 11,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_8_fu_113_p0,
        din1 => mul_ln42_8_fu_113_p1,
        dout => mul_ln42_8_fu_113_p2);

    mul_33s_10s_36_1_0_U4193 : component myproject_mul_33s_10s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 10,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_10_fu_114_p0,
        din1 => mul_ln42_10_fu_114_p1,
        dout => mul_ln42_10_fu_114_p2);

    mul_33s_9ns_36_1_0_U4194 : component myproject_mul_33s_9ns_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 9,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_11_fu_115_p0,
        din1 => mul_ln42_11_fu_115_p1,
        dout => mul_ln42_11_fu_115_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln58_10_reg_1334 <= add_ln58_10_fu_1160_p2;
                add_ln58_4_reg_1324 <= add_ln58_4_fu_1148_p2;
                add_ln58_7_reg_1329 <= add_ln58_7_fu_1154_p2;
                sext_ln42_reg_1297 <= sext_ln42_fu_920_p1;
                trunc_ln42_5_reg_1304 <= sub_ln73_1_fu_964_p2(35 downto 20);
                trunc_ln42_6_reg_1309 <= mul_ln42_5_fu_105_p2(35 downto 20);
                trunc_ln42_7_reg_1314 <= mul_ln42_6_fu_104_p2(35 downto 20);
                x_reg_1319 <= x_fu_1142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                    ap_return_0_int_reg(32 downto 10) <= sext_ln110_fu_1233_p1(32 downto 10);
                    ap_return_1_int_reg(32 downto 10) <= sext_ln110_1_fu_1245_p1(32 downto 10);
                    ap_return_2_int_reg(32 downto 10) <= sext_ln110_2_fu_1257_p1(32 downto 10);
                    ap_return_3_int_reg(32 downto 10) <= sext_ln68_fu_1269_p1(32 downto 10);
            end if;
        end if;
    end process;
    ap_return_0_int_reg(9 downto 0) <= "0000000000";
    ap_return_1_int_reg(9 downto 0) <= "0000000000";
    ap_return_2_int_reg(9 downto 0) <= "0000000000";
    ap_return_3_int_reg(9 downto 0) <= "0000000000";
    add_ln58_10_fu_1160_p2 <= std_logic_vector(unsigned(trunc_ln42_10_fu_1055_p4) + unsigned(trunc_ln42_14_fu_1120_p4));
    add_ln58_1_fu_1136_p2 <= std_logic_vector(unsigned(trunc_ln42_8_fu_1025_p4) + unsigned(trunc_ln42_11_fu_1090_p4));
    add_ln58_3_fu_1196_p2 <= std_logic_vector(unsigned(trunc_ln42_5_reg_1304) + unsigned(trunc_ln42_1_fu_1166_p4));
    add_ln58_4_fu_1148_p2 <= std_logic_vector(unsigned(trunc_ln42_9_fu_1035_p4) + unsigned(trunc_ln42_12_fu_1100_p4));
    add_ln58_6_fu_1206_p2 <= std_logic_vector(unsigned(trunc_ln42_6_reg_1309) + unsigned(trunc_ln42_2_fu_1176_p4));
    add_ln58_7_fu_1154_p2 <= std_logic_vector(unsigned(trunc_ln42_s_fu_1045_p4) + unsigned(trunc_ln42_13_fu_1110_p4));
    add_ln58_9_fu_1216_p2 <= std_logic_vector(unsigned(trunc_ln42_7_reg_1314) + unsigned(trunc_ln42_3_fu_1186_p4));
    add_ln58_fu_1130_p2 <= std_logic_vector(unsigned(trunc_ln42_4_fu_942_p4) + unsigned(trunc_ln_fu_925_p4));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_0_assign_proc : process(sext_ln110_fu_1233_p1, ap_ce_reg, ap_return_0_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_0 <= ap_return_0_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_0 <= sext_ln110_fu_1233_p1;
        else 
            ap_return_0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_1_assign_proc : process(sext_ln110_1_fu_1245_p1, ap_ce_reg, ap_return_1_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_1 <= ap_return_1_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_1 <= sext_ln110_1_fu_1245_p1;
        else 
            ap_return_1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_2_assign_proc : process(sext_ln110_2_fu_1257_p1, ap_ce_reg, ap_return_2_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_2 <= ap_return_2_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_2 <= sext_ln110_2_fu_1257_p1;
        else 
            ap_return_2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_3_assign_proc : process(sext_ln68_fu_1269_p1, ap_ce_reg, ap_return_3_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_3 <= ap_return_3_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_3 <= sext_ln68_fu_1269_p1;
        else 
            ap_return_3 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mul_ln42_10_fu_114_p0 <= sext_ln42_2_fu_1065_p1(33 - 1 downto 0);
    mul_ln42_10_fu_114_p1 <= ap_const_lv36_FFFFFFEE8(10 - 1 downto 0);
    mul_ln42_11_fu_115_p0 <= sext_ln42_2_fu_1065_p1(33 - 1 downto 0);
    mul_ln42_11_fu_115_p1 <= ap_const_lv36_F3(9 - 1 downto 0);
    mul_ln42_12_fu_100_p0 <= sext_ln42_2_fu_1065_p1(33 - 1 downto 0);
    mul_ln42_12_fu_100_p1 <= ap_const_lv36_FFFFFFF73(9 - 1 downto 0);
    mul_ln42_1_fu_110_p0 <= sext_ln42_reg_1297(33 - 1 downto 0);
    mul_ln42_1_fu_110_p1 <= ap_const_lv36_1DB(10 - 1 downto 0);
    mul_ln42_2_fu_101_p0 <= sext_ln42_reg_1297(33 - 1 downto 0);
    mul_ln42_2_fu_101_p1 <= ap_const_lv36_23(7 - 1 downto 0);
    mul_ln42_3_fu_106_p0 <= sext_ln42_reg_1297(33 - 1 downto 0);
    mul_ln42_3_fu_106_p1 <= ap_const_lv36_1F9(10 - 1 downto 0);
    mul_ln42_4_fu_103_p0 <= sext_ln70_fu_935_p1(33 - 1 downto 0);
    mul_ln42_4_fu_103_p1 <= ap_const_lv36_FFFFFFEE4(10 - 1 downto 0);
    mul_ln42_5_fu_105_p0 <= sext_ln70_fu_935_p1(33 - 1 downto 0);
    mul_ln42_5_fu_105_p1 <= ap_const_lv36_FFFFFFD48(11 - 1 downto 0);
    mul_ln42_6_fu_104_p0 <= sext_ln70_fu_935_p1(33 - 1 downto 0);
    mul_ln42_6_fu_104_p1 <= ap_const_lv36_FFFFFFD43(11 - 1 downto 0);
    mul_ln42_7_fu_102_p0 <= sext_ln42_1_fu_1000_p1(33 - 1 downto 0);
    mul_ln42_7_fu_102_p1 <= ap_const_lv36_FFFFFFF0A(9 - 1 downto 0);
    mul_ln42_8_fu_113_p0 <= sext_ln42_1_fu_1000_p1(33 - 1 downto 0);
    mul_ln42_8_fu_113_p1 <= ap_const_lv36_226(11 - 1 downto 0);
    mul_ln42_9_fu_108_p0 <= sext_ln42_1_fu_1000_p1(33 - 1 downto 0);
    mul_ln42_9_fu_108_p1 <= ap_const_lv36_FFFFFFE85(10 - 1 downto 0);
    mul_ln42_fu_109_p1 <= ap_const_lv36_FFFFFFDB4(11 - 1 downto 0);
    p_shl1_fu_956_p3 <= (trunc_ln73_fu_952_p1 & ap_const_lv8_0);
    p_shl_fu_1076_p3 <= (trunc_ln73_2_fu_1072_p1 & ap_const_lv6_0);
        sext_ln110_1_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln111_1_fu_1237_p3),33));

        sext_ln110_2_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln111_2_fu_1249_p3),33));

        sext_ln110_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_1226_p3),33));

    sext_ln42_1_fu_1000_p0 <= data_2_val;
        sext_ln42_1_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln42_1_fu_1000_p0),36));

    sext_ln42_2_fu_1065_p0 <= data_3_val;
        sext_ln42_2_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln42_2_fu_1065_p0),36));

        sext_ln42_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_0_val),36));

        sext_ln68_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln111_3_fu_1261_p3),33));

    sext_ln70_fu_935_p0 <= data_1_val;
        sext_ln70_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_fu_935_p0),36));

    shl_ln111_1_fu_1237_p3 <= (x_1_fu_1201_p2 & ap_const_lv10_0);
    shl_ln111_2_fu_1249_p3 <= (x_2_fu_1211_p2 & ap_const_lv10_0);
    shl_ln111_3_fu_1261_p3 <= (x_3_fu_1221_p2 & ap_const_lv10_0);
    shl_ln1_fu_1226_p3 <= (x_reg_1319 & ap_const_lv10_0);
    shl_ln_fu_1011_p3 <= (trunc_ln73_1_fu_1007_p1 & ap_const_lv7_0);
    sub_ln73_1_fu_964_p2 <= std_logic_vector(signed(sext_ln70_fu_935_p1) - signed(p_shl1_fu_956_p3));
    sub_ln73_2_fu_1084_p2 <= std_logic_vector(signed(sext_ln42_2_fu_1065_p1) - signed(p_shl_fu_1076_p3));
    sub_ln73_fu_1019_p2 <= std_logic_vector(unsigned(ap_const_lv36_0) - unsigned(shl_ln_fu_1011_p3));
    trunc_ln42_10_fu_1055_p4 <= mul_ln42_9_fu_108_p2(35 downto 20);
    trunc_ln42_11_fu_1090_p4 <= sub_ln73_2_fu_1084_p2(35 downto 20);
    trunc_ln42_12_fu_1100_p4 <= mul_ln42_10_fu_114_p2(35 downto 20);
    trunc_ln42_13_fu_1110_p4 <= mul_ln42_11_fu_115_p2(35 downto 20);
    trunc_ln42_14_fu_1120_p4 <= mul_ln42_12_fu_100_p2(35 downto 20);
    trunc_ln42_1_fu_1166_p4 <= mul_ln42_1_fu_110_p2(35 downto 20);
    trunc_ln42_2_fu_1176_p4 <= mul_ln42_2_fu_101_p2(35 downto 20);
    trunc_ln42_3_fu_1186_p4 <= mul_ln42_3_fu_106_p2(35 downto 20);
    trunc_ln42_4_fu_942_p4 <= mul_ln42_4_fu_103_p2(35 downto 20);
    trunc_ln42_8_fu_1025_p4 <= sub_ln73_fu_1019_p2(35 downto 20);
    trunc_ln42_9_fu_1035_p4 <= mul_ln42_7_fu_102_p2(35 downto 20);
    trunc_ln42_s_fu_1045_p4 <= mul_ln42_8_fu_113_p2(35 downto 20);
    trunc_ln73_1_fu_1007_p0 <= data_2_val;
    trunc_ln73_1_fu_1007_p1 <= trunc_ln73_1_fu_1007_p0(29 - 1 downto 0);
    trunc_ln73_2_fu_1072_p0 <= data_3_val;
    trunc_ln73_2_fu_1072_p1 <= trunc_ln73_2_fu_1072_p0(30 - 1 downto 0);
    trunc_ln73_fu_952_p0 <= data_1_val;
    trunc_ln73_fu_952_p1 <= trunc_ln73_fu_952_p0(28 - 1 downto 0);
    trunc_ln_fu_925_p4 <= mul_ln42_fu_109_p2(35 downto 20);
    x_1_fu_1201_p2 <= std_logic_vector(unsigned(add_ln58_4_reg_1324) + unsigned(add_ln58_3_fu_1196_p2));
    x_2_fu_1211_p2 <= std_logic_vector(unsigned(add_ln58_7_reg_1329) + unsigned(add_ln58_6_fu_1206_p2));
    x_3_fu_1221_p2 <= std_logic_vector(unsigned(add_ln58_10_reg_1334) + unsigned(add_ln58_9_fu_1216_p2));
    x_fu_1142_p2 <= std_logic_vector(unsigned(add_ln58_1_fu_1136_p2) + unsigned(add_ln58_fu_1130_p2));
end behav;
