-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_9_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv29_13C3A4C0 : STD_LOGIC_VECTOR (28 downto 0) := "10011110000111010010011000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv29_FFFB1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000011111111111110110001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv30_333 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001100110011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv24_B : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001011";
    constant ap_const_lv24_10009C : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000010011100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal index_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal index_table_ce0 : STD_LOGIC;
    signal index_table_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal invert_sqr_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_sqr_table_ce0 : STD_LOGIC;
    signal invert_sqr_table_q0 : STD_LOGIC_VECTOR (28 downto 0);
    signal sum_cache_fu_239_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sum_cache_reg_1106 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln_fu_247_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln_reg_1111 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_1_fu_255_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_1_reg_1116 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_2_fu_263_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_2_reg_1121 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_3_fu_271_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_3_reg_1126 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_4_fu_279_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_4_reg_1131 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_5_fu_287_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_5_reg_1136 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_6_fu_295_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_6_reg_1141 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_7_fu_303_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_7_reg_1146 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_8_fu_311_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_8_reg_1151 : STD_LOGIC_VECTOR (18 downto 0);
    signal mean_reg_1156 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln114_fu_396_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_reg_1161 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln114_1_fu_421_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_1_reg_1166 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_2_fu_446_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_2_reg_1171 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_3_fu_471_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_3_reg_1176 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_4_fu_496_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_4_reg_1181 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_5_fu_521_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_5_reg_1186 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_6_fu_546_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_6_reg_1191 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_7_fu_571_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_7_reg_1196 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_8_fu_596_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_8_reg_1201 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_9_fu_621_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_9_reg_1206 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_1_fu_646_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_1_reg_1211 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_3_fu_658_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_3_reg_1216 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_8_fu_682_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_8_reg_1221 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_i21_i_fu_747_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv_i21_i_reg_1246 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mid_fu_825_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mid_reg_1257 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal deno_inver_1_reg_184 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln52_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_fu_833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln63_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal low_fu_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal low_4_fu_843_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal high_fu_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal high_3_fu_849_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln122_fu_199_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln122_fu_892_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal mul_ln122_1_fu_203_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln122_2_fu_207_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln122_3_fu_211_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln122_4_fu_215_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln122_5_fu_219_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln122_6_fu_223_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln122_7_fu_227_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln122_8_fu_231_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln122_9_fu_235_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln109_2_fu_325_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_3_fu_331_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_1_fu_319_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_6_fu_349_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_7_fu_355_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_5_fu_343_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_8_fu_361_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_4_fu_337_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_fu_367_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln73_fu_377_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln73_fu_377_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln111_fu_393_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_fu_405_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_fu_405_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_1_fu_430_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_1_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_1_fu_430_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_1_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_2_fu_455_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_2_fu_451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_2_fu_455_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_2_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_3_fu_480_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_3_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_3_fu_480_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_3_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_4_fu_505_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_4_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_4_fu_505_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_4_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_5_fu_530_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_5_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_5_fu_530_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_5_fu_530_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_6_fu_555_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_6_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_6_fu_555_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_6_fu_555_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_7_fu_580_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_7_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_7_fu_580_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_7_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_8_fu_605_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_8_fu_601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_8_fu_605_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_8_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_9_fu_630_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_9_fu_626_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_9_fu_630_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_9_fu_630_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal diff_10_fu_411_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_fu_436_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_3_fu_486_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_4_fu_511_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_2_fu_652_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_2_fu_461_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_5_fu_536_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_6_fu_561_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_8_fu_611_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_9_fu_636_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_6_fu_670_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_7_fu_586_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_7_fu_676_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_5_fu_664_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_4_fu_688_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_fu_692_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln73_1_fu_701_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln73_1_fu_701_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln1_fu_707_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_717_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_737_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln64_fu_771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln64_fu_785_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln64_1_fu_791_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln64_fu_801_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln64_2_fu_811_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_777_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln64_1_fu_805_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln64_1_fu_821_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln65_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln63_fu_855_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_861_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_fu_199_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln122_1_fu_203_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln122_2_fu_207_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln122_3_fu_211_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln122_4_fu_215_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln122_5_fu_219_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln122_6_fu_223_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln122_7_fu_227_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln122_8_fu_231_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln122_9_fu_235_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_29ns_19s_39_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component myproject_mul_19s_11ns_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component myproject_mul_19s_19s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_index_table_RObkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_invert_sqr_tabcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;



begin
    index_table_U : component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_index_table_RObkb
    generic map (
        DataWidth => 21,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => index_table_address0,
        ce0 => index_table_ce0,
        q0 => index_table_q0);

    invert_sqr_table_U : component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_invert_sqr_tabcud
    generic map (
        DataWidth => 29,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_sqr_table_address0,
        ce0 => invert_sqr_table_ce0,
        q0 => invert_sqr_table_q0);

    mul_29ns_19s_39_1_1_U102 : component myproject_mul_29ns_19s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 29,
        din1_WIDTH => 19,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln122_fu_199_p0,
        din1 => sub_ln114_reg_1161,
        dout => mul_ln122_fu_199_p2);

    mul_29ns_19s_39_1_1_U103 : component myproject_mul_29ns_19s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 29,
        din1_WIDTH => 19,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln122_1_fu_203_p0,
        din1 => sub_ln114_1_reg_1166,
        dout => mul_ln122_1_fu_203_p2);

    mul_29ns_19s_39_1_1_U104 : component myproject_mul_29ns_19s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 29,
        din1_WIDTH => 19,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln122_2_fu_207_p0,
        din1 => sub_ln114_2_reg_1171,
        dout => mul_ln122_2_fu_207_p2);

    mul_29ns_19s_39_1_1_U105 : component myproject_mul_29ns_19s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 29,
        din1_WIDTH => 19,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln122_3_fu_211_p0,
        din1 => sub_ln114_3_reg_1176,
        dout => mul_ln122_3_fu_211_p2);

    mul_29ns_19s_39_1_1_U106 : component myproject_mul_29ns_19s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 29,
        din1_WIDTH => 19,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln122_4_fu_215_p0,
        din1 => sub_ln114_4_reg_1181,
        dout => mul_ln122_4_fu_215_p2);

    mul_29ns_19s_39_1_1_U107 : component myproject_mul_29ns_19s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 29,
        din1_WIDTH => 19,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln122_5_fu_219_p0,
        din1 => sub_ln114_5_reg_1186,
        dout => mul_ln122_5_fu_219_p2);

    mul_29ns_19s_39_1_1_U108 : component myproject_mul_29ns_19s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 29,
        din1_WIDTH => 19,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln122_6_fu_223_p0,
        din1 => sub_ln114_6_reg_1191,
        dout => mul_ln122_6_fu_223_p2);

    mul_29ns_19s_39_1_1_U109 : component myproject_mul_29ns_19s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 29,
        din1_WIDTH => 19,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln122_7_fu_227_p0,
        din1 => sub_ln114_7_reg_1196,
        dout => mul_ln122_7_fu_227_p2);

    mul_29ns_19s_39_1_1_U110 : component myproject_mul_29ns_19s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 29,
        din1_WIDTH => 19,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln122_8_fu_231_p0,
        din1 => sub_ln114_8_reg_1201,
        dout => mul_ln122_8_fu_231_p2);

    mul_29ns_19s_39_1_1_U111 : component myproject_mul_29ns_19s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 29,
        din1_WIDTH => 19,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln122_9_fu_235_p0,
        din1 => sub_ln114_9_reg_1206,
        dout => mul_ln122_9_fu_235_p2);

    mul_19s_11ns_30_1_1_U112 : component myproject_mul_19s_11ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 11,
        dout_WIDTH => 30)
    port map (
        din0 => add_ln109_fu_367_p2,
        din1 => mul_ln73_fu_377_p1,
        dout => mul_ln73_fu_377_p2);

    mul_19s_19s_32_1_1_U113 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_fu_405_p0,
        din1 => mul_ln115_fu_405_p1,
        dout => mul_ln115_fu_405_p2);

    mul_19s_19s_32_1_1_U114 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_1_fu_430_p0,
        din1 => mul_ln115_1_fu_430_p1,
        dout => mul_ln115_1_fu_430_p2);

    mul_19s_19s_32_1_1_U115 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_2_fu_455_p0,
        din1 => mul_ln115_2_fu_455_p1,
        dout => mul_ln115_2_fu_455_p2);

    mul_19s_19s_32_1_1_U116 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_3_fu_480_p0,
        din1 => mul_ln115_3_fu_480_p1,
        dout => mul_ln115_3_fu_480_p2);

    mul_19s_19s_32_1_1_U117 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_4_fu_505_p0,
        din1 => mul_ln115_4_fu_505_p1,
        dout => mul_ln115_4_fu_505_p2);

    mul_19s_19s_32_1_1_U118 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_5_fu_530_p0,
        din1 => mul_ln115_5_fu_530_p1,
        dout => mul_ln115_5_fu_530_p2);

    mul_19s_19s_32_1_1_U119 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_6_fu_555_p0,
        din1 => mul_ln115_6_fu_555_p1,
        dout => mul_ln115_6_fu_555_p2);

    mul_19s_19s_32_1_1_U120 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_7_fu_580_p0,
        din1 => mul_ln115_7_fu_580_p1,
        dout => mul_ln115_7_fu_580_p2);

    mul_19s_19s_32_1_1_U121 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_8_fu_605_p0,
        din1 => mul_ln115_8_fu_605_p1,
        dout => mul_ln115_8_fu_605_p2);

    mul_19s_19s_32_1_1_U122 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_9_fu_630_p0,
        din1 => mul_ln115_9_fu_630_p1,
        dout => mul_ln115_9_fu_630_p2);

    mul_19s_11ns_30_1_1_U123 : component myproject_mul_19s_11ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 11,
        dout_WIDTH => 30)
    port map (
        din0 => add_ln116_fu_692_p2,
        din1 => mul_ln73_1_fu_701_p1,
        dout => mul_ln73_1_fu_701_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_0_preg <= mul_ln122_fu_199_p2(38 downto 23);
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_1_preg <= mul_ln122_1_fu_203_p2(38 downto 23);
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_2_preg <= mul_ln122_2_fu_207_p2(38 downto 23);
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_3_preg <= mul_ln122_3_fu_211_p2(38 downto 23);
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_4_preg <= mul_ln122_4_fu_215_p2(38 downto 23);
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_5_preg <= mul_ln122_5_fu_219_p2(38 downto 23);
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_6_preg <= mul_ln122_6_fu_223_p2(38 downto 23);
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_7_preg <= mul_ln122_7_fu_227_p2(38 downto 23);
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_8_preg <= mul_ln122_8_fu_231_p2(38 downto 23);
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_9_preg <= mul_ln122_9_fu_235_p2(38 downto 23);
                end if; 
            end if;
        end if;
    end process;


    deno_inver_1_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln55_fu_731_p2 = ap_const_lv1_1) and (icmp_ln52_fu_725_p2 = ap_const_lv1_0))) then 
                deno_inver_1_reg_184 <= ap_const_lv29_FFFB1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_725_p2 = ap_const_lv1_1))) then 
                deno_inver_1_reg_184 <= ap_const_lv29_13C3A4C0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                deno_inver_1_reg_184 <= invert_sqr_table_q0;
            end if; 
        end if;
    end process;

    high_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln55_fu_731_p2 = ap_const_lv1_0) and (icmp_ln52_fu_725_p2 = ap_const_lv1_0))) then 
                high_fu_94 <= ap_const_lv32_3FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                high_fu_94 <= high_3_fu_849_p3;
            end if; 
        end if;
    end process;

    low_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln55_fu_731_p2 = ap_const_lv1_0) and (icmp_ln52_fu_725_p2 = ap_const_lv1_0))) then 
                low_fu_90 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                low_fu_90 <= low_4_fu_843_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln116_1_reg_1211 <= add_ln116_1_fu_646_p2;
                add_ln116_3_reg_1216 <= add_ln116_3_fu_658_p2;
                add_ln116_8_reg_1221 <= add_ln116_8_fu_682_p2;
                sub_ln114_1_reg_1166 <= sub_ln114_1_fu_421_p2;
                sub_ln114_2_reg_1171 <= sub_ln114_2_fu_446_p2;
                sub_ln114_3_reg_1176 <= sub_ln114_3_fu_471_p2;
                sub_ln114_4_reg_1181 <= sub_ln114_4_fu_496_p2;
                sub_ln114_5_reg_1186 <= sub_ln114_5_fu_521_p2;
                sub_ln114_6_reg_1191 <= sub_ln114_6_fu_546_p2;
                sub_ln114_7_reg_1196 <= sub_ln114_7_fu_571_p2;
                sub_ln114_8_reg_1201 <= sub_ln114_8_fu_596_p2;
                sub_ln114_9_reg_1206 <= sub_ln114_9_fu_621_p2;
                sub_ln114_reg_1161 <= sub_ln114_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    conv_i21_i_reg_1246(20 downto 7) <= conv_i21_i_fu_747_p3(20 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                mean_reg_1156 <= mul_ln73_fu_377_p2(29 downto 13);
                    shl_ln109_1_reg_1116(18 downto 3) <= shl_ln109_1_fu_255_p3(18 downto 3);
                    shl_ln109_2_reg_1121(18 downto 3) <= shl_ln109_2_fu_263_p3(18 downto 3);
                    shl_ln109_3_reg_1126(18 downto 3) <= shl_ln109_3_fu_271_p3(18 downto 3);
                    shl_ln109_4_reg_1131(18 downto 3) <= shl_ln109_4_fu_279_p3(18 downto 3);
                    shl_ln109_5_reg_1136(18 downto 3) <= shl_ln109_5_fu_287_p3(18 downto 3);
                    shl_ln109_6_reg_1141(18 downto 3) <= shl_ln109_6_fu_295_p3(18 downto 3);
                    shl_ln109_7_reg_1146(18 downto 3) <= shl_ln109_7_fu_303_p3(18 downto 3);
                    shl_ln109_8_reg_1151(18 downto 3) <= shl_ln109_8_fu_311_p3(18 downto 3);
                    shl_ln_reg_1111(18 downto 3) <= shl_ln_fu_247_p3(18 downto 3);
                    sum_cache_reg_1106(18 downto 3) <= sum_cache_fu_239_p3(18 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mid_reg_1257 <= mid_fu_825_p3;
            end if;
        end if;
    end process;
    sum_cache_reg_1106(2 downto 0) <= "000";
    shl_ln_reg_1111(2 downto 0) <= "000";
    shl_ln109_1_reg_1116(2 downto 0) <= "000";
    shl_ln109_2_reg_1121(2 downto 0) <= "000";
    shl_ln109_3_reg_1126(2 downto 0) <= "000";
    shl_ln109_4_reg_1131(2 downto 0) <= "000";
    shl_ln109_5_reg_1136(2 downto 0) <= "000";
    shl_ln109_6_reg_1141(2 downto 0) <= "000";
    shl_ln109_7_reg_1146(2 downto 0) <= "000";
    shl_ln109_8_reg_1151(2 downto 0) <= "000";
    conv_i21_i_reg_1246(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln52_fu_725_p2, icmp_ln55_fu_731_p2, icmp_ln63_fu_871_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln55_fu_731_p2 = ap_const_lv1_0) and (icmp_ln52_fu_725_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln63_fu_871_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln109_1_fu_319_p2 <= std_logic_vector(unsigned(shl_ln_fu_247_p3) + unsigned(sum_cache_fu_239_p3));
    add_ln109_2_fu_325_p2 <= std_logic_vector(unsigned(shl_ln109_2_fu_263_p3) + unsigned(shl_ln109_3_fu_271_p3));
    add_ln109_3_fu_331_p2 <= std_logic_vector(unsigned(add_ln109_2_fu_325_p2) + unsigned(shl_ln109_1_fu_255_p3));
    add_ln109_4_fu_337_p2 <= std_logic_vector(unsigned(add_ln109_3_fu_331_p2) + unsigned(add_ln109_1_fu_319_p2));
    add_ln109_5_fu_343_p2 <= std_logic_vector(unsigned(shl_ln109_4_fu_279_p3) + unsigned(shl_ln109_5_fu_287_p3));
    add_ln109_6_fu_349_p2 <= std_logic_vector(unsigned(shl_ln109_7_fu_303_p3) + unsigned(shl_ln109_8_fu_311_p3));
    add_ln109_7_fu_355_p2 <= std_logic_vector(unsigned(add_ln109_6_fu_349_p2) + unsigned(shl_ln109_6_fu_295_p3));
    add_ln109_8_fu_361_p2 <= std_logic_vector(unsigned(add_ln109_7_fu_355_p2) + unsigned(add_ln109_5_fu_343_p2));
    add_ln109_fu_367_p2 <= std_logic_vector(unsigned(add_ln109_8_fu_361_p2) + unsigned(add_ln109_4_fu_337_p2));
    add_ln116_1_fu_646_p2 <= std_logic_vector(unsigned(diff_10_fu_411_p4) + unsigned(diff_fu_436_p4));
    add_ln116_2_fu_652_p2 <= std_logic_vector(unsigned(diff_3_fu_486_p4) + unsigned(diff_4_fu_511_p4));
    add_ln116_3_fu_658_p2 <= std_logic_vector(unsigned(add_ln116_2_fu_652_p2) + unsigned(diff_2_fu_461_p4));
    add_ln116_4_fu_688_p2 <= std_logic_vector(unsigned(add_ln116_3_reg_1216) + unsigned(add_ln116_1_reg_1211));
    add_ln116_5_fu_664_p2 <= std_logic_vector(unsigned(diff_5_fu_536_p4) + unsigned(diff_6_fu_561_p4));
    add_ln116_6_fu_670_p2 <= std_logic_vector(unsigned(diff_8_fu_611_p4) + unsigned(diff_9_fu_636_p4));
    add_ln116_7_fu_676_p2 <= std_logic_vector(unsigned(add_ln116_6_fu_670_p2) + unsigned(diff_7_fu_586_p4));
    add_ln116_8_fu_682_p2 <= std_logic_vector(unsigned(add_ln116_7_fu_676_p2) + unsigned(add_ln116_5_fu_664_p2));
    add_ln116_fu_692_p2 <= std_logic_vector(unsigned(add_ln116_8_reg_1221) + unsigned(add_ln116_4_fu_688_p2));
    add_ln64_fu_771_p2 <= std_logic_vector(unsigned(low_fu_90) + unsigned(high_fu_94));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state7, mul_ln122_fu_199_p2, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_0 <= mul_ln122_fu_199_p2(38 downto 23);
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state7, mul_ln122_1_fu_203_p2, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_1 <= mul_ln122_1_fu_203_p2(38 downto 23);
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state7, mul_ln122_2_fu_207_p2, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_2 <= mul_ln122_2_fu_207_p2(38 downto 23);
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state7, mul_ln122_3_fu_211_p2, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_3 <= mul_ln122_3_fu_211_p2(38 downto 23);
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state7, mul_ln122_4_fu_215_p2, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_4 <= mul_ln122_4_fu_215_p2(38 downto 23);
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state7, mul_ln122_5_fu_219_p2, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_5 <= mul_ln122_5_fu_219_p2(38 downto 23);
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_CS_fsm_state7, mul_ln122_6_fu_223_p2, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_6 <= mul_ln122_6_fu_223_p2(38 downto 23);
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_state7, mul_ln122_7_fu_227_p2, ap_return_7_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_7 <= mul_ln122_7_fu_227_p2(38 downto 23);
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ap_CS_fsm_state7, mul_ln122_8_fu_231_p2, ap_return_8_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_8 <= mul_ln122_8_fu_231_p2(38 downto 23);
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(ap_CS_fsm_state7, mul_ln122_9_fu_235_p2, ap_return_9_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_9 <= mul_ln122_9_fu_235_p2(38 downto 23);
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    conv_i21_i_fu_747_p3 <= (tmp_1_fu_737_p4 & ap_const_lv7_0);
    diff_10_fu_411_p4 <= mul_ln115_fu_405_p2(31 downto 13);
    diff_2_fu_461_p4 <= mul_ln115_2_fu_455_p2(31 downto 13);
    diff_3_fu_486_p4 <= mul_ln115_3_fu_480_p2(31 downto 13);
    diff_4_fu_511_p4 <= mul_ln115_4_fu_505_p2(31 downto 13);
    diff_5_fu_536_p4 <= mul_ln115_5_fu_530_p2(31 downto 13);
    diff_6_fu_561_p4 <= mul_ln115_6_fu_555_p2(31 downto 13);
    diff_7_fu_586_p4 <= mul_ln115_7_fu_580_p2(31 downto 13);
    diff_8_fu_611_p4 <= mul_ln115_8_fu_605_p2(31 downto 13);
    diff_9_fu_636_p4 <= mul_ln115_9_fu_630_p2(31 downto 13);
    diff_fu_436_p4 <= mul_ln115_1_fu_430_p2(31 downto 13);
    high_3_fu_849_p3 <= 
        high_fu_94 when (icmp_ln65_fu_838_p2(0) = '1') else 
        mid_reg_1257;
    icmp_ln52_fu_725_p2 <= "1" when (signed(tmp_fu_717_p3) < signed(ap_const_lv24_B)) else "0";
    icmp_ln55_fu_731_p2 <= "1" when (signed(tmp_fu_717_p3) > signed(ap_const_lv24_10009C)) else "0";
    icmp_ln63_fu_871_p2 <= "1" when (signed(tmp_3_fu_861_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln65_fu_838_p2 <= "1" when (unsigned(conv_i21_i_reg_1246) > unsigned(index_table_q0)) else "0";
    index_table_address0 <= zext_ln65_fu_833_p1(10 - 1 downto 0);

    index_table_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            index_table_ce0 <= ap_const_logic_1;
        else 
            index_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    invert_sqr_table_address0 <= zext_ln72_fu_887_p1(10 - 1 downto 0);

    invert_sqr_table_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            invert_sqr_table_ce0 <= ap_const_logic_1;
        else 
            invert_sqr_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    low_4_fu_843_p3 <= 
        mid_reg_1257 when (icmp_ln65_fu_838_p2(0) = '1') else 
        low_fu_90;
    lshr_ln64_1_fu_791_p4 <= sub_ln64_fu_785_p2(31 downto 1);
    lshr_ln64_2_fu_811_p4 <= add_ln64_fu_771_p2(31 downto 1);
    mid_fu_825_p3 <= 
        sub_ln64_1_fu_805_p2 when (tmp_2_fu_777_p3(0) = '1') else 
        zext_ln64_1_fu_821_p1;
    mul_ln115_1_fu_430_p0 <= sext_ln115_1_fu_426_p1(19 - 1 downto 0);
    mul_ln115_1_fu_430_p1 <= sext_ln115_1_fu_426_p1(19 - 1 downto 0);
    mul_ln115_2_fu_455_p0 <= sext_ln115_2_fu_451_p1(19 - 1 downto 0);
    mul_ln115_2_fu_455_p1 <= sext_ln115_2_fu_451_p1(19 - 1 downto 0);
    mul_ln115_3_fu_480_p0 <= sext_ln115_3_fu_476_p1(19 - 1 downto 0);
    mul_ln115_3_fu_480_p1 <= sext_ln115_3_fu_476_p1(19 - 1 downto 0);
    mul_ln115_4_fu_505_p0 <= sext_ln115_4_fu_501_p1(19 - 1 downto 0);
    mul_ln115_4_fu_505_p1 <= sext_ln115_4_fu_501_p1(19 - 1 downto 0);
    mul_ln115_5_fu_530_p0 <= sext_ln115_5_fu_526_p1(19 - 1 downto 0);
    mul_ln115_5_fu_530_p1 <= sext_ln115_5_fu_526_p1(19 - 1 downto 0);
    mul_ln115_6_fu_555_p0 <= sext_ln115_6_fu_551_p1(19 - 1 downto 0);
    mul_ln115_6_fu_555_p1 <= sext_ln115_6_fu_551_p1(19 - 1 downto 0);
    mul_ln115_7_fu_580_p0 <= sext_ln115_7_fu_576_p1(19 - 1 downto 0);
    mul_ln115_7_fu_580_p1 <= sext_ln115_7_fu_576_p1(19 - 1 downto 0);
    mul_ln115_8_fu_605_p0 <= sext_ln115_8_fu_601_p1(19 - 1 downto 0);
    mul_ln115_8_fu_605_p1 <= sext_ln115_8_fu_601_p1(19 - 1 downto 0);
    mul_ln115_9_fu_630_p0 <= sext_ln115_9_fu_626_p1(19 - 1 downto 0);
    mul_ln115_9_fu_630_p1 <= sext_ln115_9_fu_626_p1(19 - 1 downto 0);
    mul_ln115_fu_405_p0 <= sext_ln115_fu_401_p1(19 - 1 downto 0);
    mul_ln115_fu_405_p1 <= sext_ln115_fu_401_p1(19 - 1 downto 0);
    mul_ln122_1_fu_203_p0 <= zext_ln122_fu_892_p1(29 - 1 downto 0);
    mul_ln122_2_fu_207_p0 <= zext_ln122_fu_892_p1(29 - 1 downto 0);
    mul_ln122_3_fu_211_p0 <= zext_ln122_fu_892_p1(29 - 1 downto 0);
    mul_ln122_4_fu_215_p0 <= zext_ln122_fu_892_p1(29 - 1 downto 0);
    mul_ln122_5_fu_219_p0 <= zext_ln122_fu_892_p1(29 - 1 downto 0);
    mul_ln122_6_fu_223_p0 <= zext_ln122_fu_892_p1(29 - 1 downto 0);
    mul_ln122_7_fu_227_p0 <= zext_ln122_fu_892_p1(29 - 1 downto 0);
    mul_ln122_8_fu_231_p0 <= zext_ln122_fu_892_p1(29 - 1 downto 0);
    mul_ln122_9_fu_235_p0 <= zext_ln122_fu_892_p1(29 - 1 downto 0);
    mul_ln122_fu_199_p0 <= zext_ln122_fu_892_p1(29 - 1 downto 0);
    mul_ln73_1_fu_701_p1 <= ap_const_lv30_333(11 - 1 downto 0);
    mul_ln73_fu_377_p1 <= ap_const_lv30_333(11 - 1 downto 0);
        sext_ln111_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mean_reg_1156),19));

        sext_ln115_1_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_1_fu_421_p2),32));

        sext_ln115_2_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_2_fu_446_p2),32));

        sext_ln115_3_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_3_fu_471_p2),32));

        sext_ln115_4_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_4_fu_496_p2),32));

        sext_ln115_5_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_5_fu_521_p2),32));

        sext_ln115_6_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_6_fu_546_p2),32));

        sext_ln115_7_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_7_fu_571_p2),32));

        sext_ln115_8_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_8_fu_596_p2),32));

        sext_ln115_9_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_9_fu_621_p2),32));

        sext_ln115_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_fu_396_p2),32));

    shl_ln109_1_fu_255_p3 <= (data_2_val & ap_const_lv3_0);
    shl_ln109_2_fu_263_p3 <= (data_3_val & ap_const_lv3_0);
    shl_ln109_3_fu_271_p3 <= (data_4_val & ap_const_lv3_0);
    shl_ln109_4_fu_279_p3 <= (data_5_val & ap_const_lv3_0);
    shl_ln109_5_fu_287_p3 <= (data_6_val & ap_const_lv3_0);
    shl_ln109_6_fu_295_p3 <= (data_7_val & ap_const_lv3_0);
    shl_ln109_7_fu_303_p3 <= (data_8_val & ap_const_lv3_0);
    shl_ln109_8_fu_311_p3 <= (data_9_val & ap_const_lv3_0);
    shl_ln_fu_247_p3 <= (data_1_val & ap_const_lv3_0);
    sub_ln114_1_fu_421_p2 <= std_logic_vector(unsigned(shl_ln_reg_1111) - unsigned(sext_ln111_fu_393_p1));
    sub_ln114_2_fu_446_p2 <= std_logic_vector(unsigned(shl_ln109_1_reg_1116) - unsigned(sext_ln111_fu_393_p1));
    sub_ln114_3_fu_471_p2 <= std_logic_vector(unsigned(shl_ln109_2_reg_1121) - unsigned(sext_ln111_fu_393_p1));
    sub_ln114_4_fu_496_p2 <= std_logic_vector(unsigned(shl_ln109_3_reg_1126) - unsigned(sext_ln111_fu_393_p1));
    sub_ln114_5_fu_521_p2 <= std_logic_vector(unsigned(shl_ln109_4_reg_1131) - unsigned(sext_ln111_fu_393_p1));
    sub_ln114_6_fu_546_p2 <= std_logic_vector(unsigned(shl_ln109_5_reg_1136) - unsigned(sext_ln111_fu_393_p1));
    sub_ln114_7_fu_571_p2 <= std_logic_vector(unsigned(shl_ln109_6_reg_1141) - unsigned(sext_ln111_fu_393_p1));
    sub_ln114_8_fu_596_p2 <= std_logic_vector(unsigned(shl_ln109_7_reg_1146) - unsigned(sext_ln111_fu_393_p1));
    sub_ln114_9_fu_621_p2 <= std_logic_vector(unsigned(shl_ln109_8_reg_1151) - unsigned(sext_ln111_fu_393_p1));
    sub_ln114_fu_396_p2 <= std_logic_vector(unsigned(sum_cache_reg_1106) - unsigned(sext_ln111_fu_393_p1));
    sub_ln63_fu_855_p2 <= std_logic_vector(unsigned(high_3_fu_849_p3) - unsigned(low_4_fu_843_p3));
    sub_ln64_1_fu_805_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln64_fu_801_p1));
    sub_ln64_fu_785_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(add_ln64_fu_771_p2));
    sum_cache_fu_239_p3 <= (data_0_val & ap_const_lv3_0);
    tmp_1_fu_737_p4 <= mul_ln73_1_fu_701_p2(26 downto 13);
    tmp_2_fu_777_p3 <= add_ln64_fu_771_p2(31 downto 31);
    tmp_3_fu_861_p4 <= sub_ln63_fu_855_p2(31 downto 1);
    tmp_fu_717_p3 <= (trunc_ln1_fu_707_p4 & ap_const_lv7_0);
    trunc_ln1_fu_707_p4 <= mul_ln73_1_fu_701_p2(29 downto 13);
    zext_ln122_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deno_inver_1_reg_184),39));
    zext_ln64_1_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln64_2_fu_811_p4),32));
    zext_ln64_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln64_1_fu_791_p4),32));
    zext_ln65_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mid_fu_825_p3),64));
    zext_ln72_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(low_4_fu_843_p3),64));
end behav;
