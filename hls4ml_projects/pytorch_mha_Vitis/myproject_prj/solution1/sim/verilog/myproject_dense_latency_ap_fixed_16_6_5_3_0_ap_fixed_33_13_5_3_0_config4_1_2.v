// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config4_1_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_val,
        data_1_val,
        data_2_val,
        data_3_val,
        idx2,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] data_0_val;
input  [15:0] data_1_val;
input  [15:0] data_2_val;
input  [15:0] data_3_val;
input  [3:0] idx2;
output  [32:0] ap_return_0;
output  [32:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [3:0] value_weight4_address0;
reg    value_weight4_ce0;
wire  signed [10:0] value_weight4_q0;
wire   [3:0] value_weight4_address1;
reg    value_weight4_ce1;
wire  signed [10:0] value_weight4_q1;
wire   [3:0] value_weight4_address2;
reg    value_weight4_ce2;
wire  signed [10:0] value_weight4_q2;
wire   [3:0] value_weight4_address3;
reg    value_weight4_ce3;
wire  signed [10:0] value_weight4_q3;
wire   [3:0] value_weight4_address4;
reg    value_weight4_ce4;
wire  signed [10:0] value_weight4_q4;
wire   [3:0] value_weight4_address5;
reg    value_weight4_ce5;
wire  signed [10:0] value_weight4_q5;
wire   [3:0] value_weight4_address6;
reg    value_weight4_ce6;
wire  signed [10:0] value_weight4_q6;
wire   [3:0] value_weight4_address7;
reg    value_weight4_ce7;
wire  signed [10:0] value_weight4_q7;
reg   [3:0] idx2_read_reg_674;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] data_3_val_read_reg_682;
reg   [15:0] data_2_val_read_reg_687;
reg   [15:0] data_1_val_read_reg_692;
reg   [15:0] data_1_val_read_reg_692_pp0_iter1_reg;
reg   [15:0] data_0_val_read_reg_697;
reg   [15:0] data_0_val_read_reg_697_pp0_iter1_reg;
wire   [15:0] add_ln58_12_fu_534_p2;
reg   [15:0] add_ln58_12_reg_742;
wire   [15:0] add_ln58_15_fu_540_p2;
reg   [15:0] add_ln58_15_reg_747;
wire   [63:0] zext_ln42_3_fu_392_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln42_4_fu_403_p1;
wire   [63:0] zext_ln42_5_fu_414_p1;
wire   [63:0] zext_ln42_6_fu_425_p1;
wire   [63:0] zext_ln13_fu_430_p1;
wire   [63:0] zext_ln42_fu_439_p1;
wire   [63:0] zext_ln42_1_fu_449_p1;
wire   [63:0] zext_ln42_2_fu_459_p1;
wire  signed [15:0] mul_ln42_15_fu_185_p0;
wire  signed [25:0] sext_ln73_962_fu_586_p1;
wire  signed [15:0] mul_ln42_17_fu_186_p0;
wire  signed [25:0] sext_ln73_965_fu_469_p1;
wire  signed [15:0] mul_ln42_fu_187_p0;
wire  signed [25:0] sext_ln73_959_fu_551_p1;
wire  signed [15:0] mul_ln42_16_fu_188_p0;
wire  signed [15:0] mul_ln42_20_fu_189_p0;
wire  signed [25:0] sext_ln73_968_fu_504_p1;
wire  signed [15:0] mul_ln42_14_fu_190_p0;
wire  signed [15:0] mul_ln42_19_fu_191_p0;
wire  signed [15:0] mul_ln42_18_fu_192_p0;
wire   [3:0] add_ln42_3_fu_386_p2;
wire   [3:0] add_ln42_4_fu_397_p2;
wire   [3:0] add_ln42_5_fu_408_p2;
wire   [3:0] add_ln42_6_fu_419_p2;
wire   [3:0] add_ln42_fu_434_p2;
wire   [3:0] add_ln42_1_fu_444_p2;
wire   [3:0] add_ln42_2_fu_454_p2;
wire   [25:0] mul_ln42_17_fu_186_p2;
wire   [25:0] mul_ln42_18_fu_192_p2;
wire   [25:0] mul_ln42_19_fu_191_p2;
wire   [25:0] mul_ln42_20_fu_189_p2;
wire   [15:0] trunc_ln42_17_fu_474_p4;
wire   [15:0] trunc_ln42_19_fu_509_p4;
wire   [15:0] trunc_ln42_18_fu_489_p4;
wire   [15:0] trunc_ln42_20_fu_524_p4;
wire   [25:0] mul_ln42_fu_187_p2;
wire   [25:0] mul_ln42_14_fu_190_p2;
wire   [25:0] mul_ln42_15_fu_185_p2;
wire   [25:0] mul_ln42_16_fu_188_p2;
wire   [15:0] trunc_ln42_15_fu_591_p4;
wire   [15:0] trunc_ln_fu_556_p4;
wire   [15:0] add_ln58_fu_616_p2;
wire   [15:0] trunc_ln42_16_fu_606_p4;
wire   [15:0] trunc_ln42_s_fu_571_p4;
wire   [15:0] add_ln58_14_fu_627_p2;
wire   [15:0] x_fu_622_p2;
wire   [25:0] shl_ln_fu_638_p3;
wire   [15:0] x_4_fu_633_p2;
wire   [25:0] shl_ln111_4_fu_650_p3;
wire  signed [32:0] sext_ln110_fu_646_p1;
wire  signed [32:0] sext_ln68_fu_658_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config4_1_2_value_weigdEe #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
value_weight4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(value_weight4_address0),
    .ce0(value_weight4_ce0),
    .q0(value_weight4_q0),
    .address1(value_weight4_address1),
    .ce1(value_weight4_ce1),
    .q1(value_weight4_q1),
    .address2(value_weight4_address2),
    .ce2(value_weight4_ce2),
    .q2(value_weight4_q2),
    .address3(value_weight4_address3),
    .ce3(value_weight4_ce3),
    .q3(value_weight4_q3),
    .address4(value_weight4_address4),
    .ce4(value_weight4_ce4),
    .q4(value_weight4_q4),
    .address5(value_weight4_address5),
    .ce5(value_weight4_ce5),
    .q5(value_weight4_q5),
    .address6(value_weight4_address6),
    .ce6(value_weight4_ce6),
    .q6(value_weight4_q6),
    .address7(value_weight4_address7),
    .ce7(value_weight4_ce7),
    .q7(value_weight4_q7)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U54(
    .din0(mul_ln42_15_fu_185_p0),
    .din1(value_weight4_q1),
    .dout(mul_ln42_15_fu_185_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U55(
    .din0(mul_ln42_17_fu_186_p0),
    .din1(value_weight4_q7),
    .dout(mul_ln42_17_fu_186_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U56(
    .din0(mul_ln42_fu_187_p0),
    .din1(value_weight4_q3),
    .dout(mul_ln42_fu_187_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U57(
    .din0(mul_ln42_16_fu_188_p0),
    .din1(value_weight4_q0),
    .dout(mul_ln42_16_fu_188_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U58(
    .din0(mul_ln42_20_fu_189_p0),
    .din1(value_weight4_q4),
    .dout(mul_ln42_20_fu_189_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U59(
    .din0(mul_ln42_14_fu_190_p0),
    .din1(value_weight4_q2),
    .dout(mul_ln42_14_fu_190_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U60(
    .din0(mul_ln42_19_fu_191_p0),
    .din1(value_weight4_q5),
    .dout(mul_ln42_19_fu_191_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U61(
    .din0(mul_ln42_18_fu_192_p0),
    .din1(value_weight4_q6),
    .dout(mul_ln42_18_fu_192_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln58_12_reg_742 <= add_ln58_12_fu_534_p2;
        add_ln58_15_reg_747 <= add_ln58_15_fu_540_p2;
        data_0_val_read_reg_697 <= data_0_val;
        data_0_val_read_reg_697_pp0_iter1_reg <= data_0_val_read_reg_697;
        data_1_val_read_reg_692 <= data_1_val;
        data_1_val_read_reg_692_pp0_iter1_reg <= data_1_val_read_reg_692;
        data_2_val_read_reg_687 <= data_2_val;
        data_3_val_read_reg_682 <= data_3_val;
        idx2_read_reg_674 <= idx2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight4_ce0 = 1'b1;
    end else begin
        value_weight4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight4_ce1 = 1'b1;
    end else begin
        value_weight4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight4_ce2 = 1'b1;
    end else begin
        value_weight4_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight4_ce3 = 1'b1;
    end else begin
        value_weight4_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight4_ce4 = 1'b1;
    end else begin
        value_weight4_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight4_ce5 = 1'b1;
    end else begin
        value_weight4_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight4_ce6 = 1'b1;
    end else begin
        value_weight4_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight4_ce7 = 1'b1;
    end else begin
        value_weight4_ce7 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_1_fu_444_p2 = (idx2_read_reg_674 + 4'd2);

assign add_ln42_2_fu_454_p2 = (idx2_read_reg_674 + 4'd3);

assign add_ln42_3_fu_386_p2 = (idx2 + 4'd4);

assign add_ln42_4_fu_397_p2 = (idx2 + 4'd5);

assign add_ln42_5_fu_408_p2 = (idx2 + 4'd6);

assign add_ln42_6_fu_419_p2 = (idx2 + 4'd7);

assign add_ln42_fu_434_p2 = (idx2_read_reg_674 + 4'd1);

assign add_ln58_12_fu_534_p2 = (trunc_ln42_17_fu_474_p4 + trunc_ln42_19_fu_509_p4);

assign add_ln58_14_fu_627_p2 = (trunc_ln42_16_fu_606_p4 + trunc_ln42_s_fu_571_p4);

assign add_ln58_15_fu_540_p2 = (trunc_ln42_18_fu_489_p4 + trunc_ln42_20_fu_524_p4);

assign add_ln58_fu_616_p2 = (trunc_ln42_15_fu_591_p4 + trunc_ln_fu_556_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = sext_ln110_fu_646_p1;

assign ap_return_1 = sext_ln68_fu_658_p1;

assign mul_ln42_14_fu_190_p0 = sext_ln73_959_fu_551_p1;

assign mul_ln42_15_fu_185_p0 = sext_ln73_962_fu_586_p1;

assign mul_ln42_16_fu_188_p0 = sext_ln73_962_fu_586_p1;

assign mul_ln42_17_fu_186_p0 = sext_ln73_965_fu_469_p1;

assign mul_ln42_18_fu_192_p0 = sext_ln73_965_fu_469_p1;

assign mul_ln42_19_fu_191_p0 = sext_ln73_968_fu_504_p1;

assign mul_ln42_20_fu_189_p0 = sext_ln73_968_fu_504_p1;

assign mul_ln42_fu_187_p0 = sext_ln73_959_fu_551_p1;

assign sext_ln110_fu_646_p1 = $signed(shl_ln_fu_638_p3);

assign sext_ln68_fu_658_p1 = $signed(shl_ln111_4_fu_650_p3);

assign sext_ln73_959_fu_551_p1 = $signed(data_0_val_read_reg_697_pp0_iter1_reg);

assign sext_ln73_962_fu_586_p1 = $signed(data_1_val_read_reg_692_pp0_iter1_reg);

assign sext_ln73_965_fu_469_p1 = $signed(data_2_val_read_reg_687);

assign sext_ln73_968_fu_504_p1 = $signed(data_3_val_read_reg_682);

assign shl_ln111_4_fu_650_p3 = {{x_4_fu_633_p2}, {10'd0}};

assign shl_ln_fu_638_p3 = {{x_fu_622_p2}, {10'd0}};

assign trunc_ln42_15_fu_591_p4 = {{mul_ln42_15_fu_185_p2[25:10]}};

assign trunc_ln42_16_fu_606_p4 = {{mul_ln42_16_fu_188_p2[25:10]}};

assign trunc_ln42_17_fu_474_p4 = {{mul_ln42_17_fu_186_p2[25:10]}};

assign trunc_ln42_18_fu_489_p4 = {{mul_ln42_18_fu_192_p2[25:10]}};

assign trunc_ln42_19_fu_509_p4 = {{mul_ln42_19_fu_191_p2[25:10]}};

assign trunc_ln42_20_fu_524_p4 = {{mul_ln42_20_fu_189_p2[25:10]}};

assign trunc_ln42_s_fu_571_p4 = {{mul_ln42_14_fu_190_p2[25:10]}};

assign trunc_ln_fu_556_p4 = {{mul_ln42_fu_187_p2[25:10]}};

assign value_weight4_address0 = zext_ln42_2_fu_459_p1;

assign value_weight4_address1 = zext_ln42_1_fu_449_p1;

assign value_weight4_address2 = zext_ln42_fu_439_p1;

assign value_weight4_address3 = zext_ln13_fu_430_p1;

assign value_weight4_address4 = zext_ln42_6_fu_425_p1;

assign value_weight4_address5 = zext_ln42_5_fu_414_p1;

assign value_weight4_address6 = zext_ln42_4_fu_403_p1;

assign value_weight4_address7 = zext_ln42_3_fu_392_p1;

assign x_4_fu_633_p2 = (add_ln58_15_reg_747 + add_ln58_14_fu_627_p2);

assign x_fu_622_p2 = (add_ln58_12_reg_742 + add_ln58_fu_616_p2);

assign zext_ln13_fu_430_p1 = idx2_read_reg_674;

assign zext_ln42_1_fu_449_p1 = add_ln42_1_fu_444_p2;

assign zext_ln42_2_fu_459_p1 = add_ln42_2_fu_454_p2;

assign zext_ln42_3_fu_392_p1 = add_ln42_3_fu_386_p2;

assign zext_ln42_4_fu_403_p1 = add_ln42_4_fu_397_p2;

assign zext_ln42_5_fu_414_p1 = add_ln42_5_fu_408_p2;

assign zext_ln42_6_fu_425_p1 = add_ln42_6_fu_419_p2;

assign zext_ln42_fu_439_p1 = add_ln42_fu_434_p2;

endmodule //myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config4_1_2
