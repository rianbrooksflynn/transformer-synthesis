-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_read_stream_array_ap_fixed_16_6_5_3_0_4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    d_query_1_0_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    d_query_1_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    d_query_1_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    d_query_1_0_empty_n : IN STD_LOGIC;
    d_query_1_0_read : OUT STD_LOGIC;
    d_query_1_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    d_query_1_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    d_query_1_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    d_query_1_1_empty_n : IN STD_LOGIC;
    d_query_1_1_read : OUT STD_LOGIC;
    d_query_1_2_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    d_query_1_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    d_query_1_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    d_query_1_2_empty_n : IN STD_LOGIC;
    d_query_1_2_read : OUT STD_LOGIC;
    d_query_1_3_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    d_query_1_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    d_query_1_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    d_query_1_3_empty_n : IN STD_LOGIC;
    d_query_1_3_read : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_query_1_0_blk_n : OUT STD_LOGIC;
    d_query_1_1_blk_n : OUT STD_LOGIC;
    d_query_1_2_blk_n : OUT STD_LOGIC;
    d_query_1_3_blk_n : OUT STD_LOGIC );
end;


architecture behav of myproject_read_stream_array_ap_fixed_16_6_5_3_0_4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_0_preg <= d_query_1_0_dout;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_1_preg <= d_query_1_1_dout;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_2_preg <= d_query_1_2_dout;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_3_preg <= d_query_1_3_dout;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, d_query_1_0_empty_n, d_query_1_1_empty_n, d_query_1_2_empty_n, d_query_1_3_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (d_query_1_3_empty_n = ap_const_logic_0) or (d_query_1_2_empty_n = ap_const_logic_0) or (d_query_1_1_empty_n = ap_const_logic_0) or (d_query_1_0_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state1, d_query_1_0_dout, ap_block_state1, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_0 <= d_query_1_0_dout;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state1, d_query_1_1_dout, ap_block_state1, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_1 <= d_query_1_1_dout;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state1, d_query_1_2_dout, ap_block_state1, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_2 <= d_query_1_2_dout;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state1, d_query_1_3_dout, ap_block_state1, ap_return_3_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_3 <= d_query_1_3_dout;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    d_query_1_0_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, d_query_1_0_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_query_1_0_blk_n <= d_query_1_0_empty_n;
        else 
            d_query_1_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_query_1_0_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_query_1_0_read <= ap_const_logic_1;
        else 
            d_query_1_0_read <= ap_const_logic_0;
        end if; 
    end process;


    d_query_1_1_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, d_query_1_1_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_query_1_1_blk_n <= d_query_1_1_empty_n;
        else 
            d_query_1_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_query_1_1_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_query_1_1_read <= ap_const_logic_1;
        else 
            d_query_1_1_read <= ap_const_logic_0;
        end if; 
    end process;


    d_query_1_2_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, d_query_1_2_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_query_1_2_blk_n <= d_query_1_2_empty_n;
        else 
            d_query_1_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_query_1_2_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_query_1_2_read <= ap_const_logic_1;
        else 
            d_query_1_2_read <= ap_const_logic_0;
        end if; 
    end process;


    d_query_1_3_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, d_query_1_3_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_query_1_3_blk_n <= d_query_1_3_empty_n;
        else 
            d_query_1_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_query_1_3_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_query_1_3_read <= ap_const_logic_1;
        else 
            d_query_1_3_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
