-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_fixed_33_13_5_3_0_ap_fixed_33_13_5_3_0_config3_2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (32 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (32 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (32 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (32 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of myproject_dense_latency_ap_fixed_33_13_5_3_0_ap_fixed_33_13_5_3_0_config3_2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv36_FFFFFFEF6 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111011110110";
    constant ap_const_lv36_FFFFFFF3A : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111100111010";
    constant ap_const_lv36_1BD : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000110111101";
    constant ap_const_lv36_4B : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001001011";
    constant ap_const_lv36_3D : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000111101";
    constant ap_const_lv36_FFFFFFFE5 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111111100101";
    constant ap_const_lv36_1BC : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000110111100";
    constant ap_const_lv36_9E : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010011110";
    constant ap_const_lv36_FFFFFFF5F : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111101011111";
    constant ap_const_lv36_124 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100100100";
    constant ap_const_lv36_FFFFFFDBB : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111110110111011";
    constant ap_const_lv36_57 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001010111";
    constant ap_const_lv36_FFFFFFE45 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111001000101";
    constant ap_const_lv36_FFFFFFDC8 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111110111001000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

attribute shreg_extract : string;
    signal trunc_ln_reg_1481 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln42_1_reg_1486 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_2_reg_1491 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_3_reg_1496 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_4_reg_1501 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_5_reg_1506 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_6_reg_1511 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_7_reg_1516 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_8_reg_1521 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_9_reg_1526 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_s_reg_1531 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_10_reg_1536 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_11_reg_1541 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_12_reg_1546 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_13_reg_1551 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_14_reg_1556 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln42_10_fu_102_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln42_2_fu_1305_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_10_fu_102_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln42_4_fu_103_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln42_1_fu_1161_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_4_fu_103_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln42_1_fu_104_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln42_fu_1113_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_1_fu_104_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln42_13_fu_105_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_13_fu_105_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_2_fu_106_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_2_fu_106_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln42_5_fu_107_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_5_fu_107_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln42_12_fu_108_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_12_fu_108_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln42_8_fu_109_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln70_fu_1234_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_8_fu_109_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln42_3_fu_110_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_3_fu_110_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln42_fu_112_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_fu_112_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln42_11_fu_113_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_11_fu_113_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln42_9_fu_114_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_9_fu_114_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_6_fu_116_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_6_fu_116_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln42_7_fu_117_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_7_fu_117_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln42_fu_112_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_1_fu_104_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_2_fu_106_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_3_fu_110_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln42_1_fu_1161_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln73_fu_1168_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln73_fu_1168_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln73_1_fu_1180_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln_fu_1172_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln73_1_fu_1180_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln73_fu_1188_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_4_fu_103_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_5_fu_107_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_6_fu_116_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln70_fu_1234_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_7_fu_117_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_8_fu_109_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_9_fu_114_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln73_1_fu_1271_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln73_1_fu_1271_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln73_2_fu_1275_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln73_1_fu_1283_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln73_2_fu_1289_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_10_fu_102_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_11_fu_113_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_12_fu_108_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln42_13_fu_105_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln58_1_fu_1357_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_fu_1353_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_4_fu_1371_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_3_fu_1367_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_7_fu_1385_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_6_fu_1381_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_10_fu_1399_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_9_fu_1395_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_fu_1361_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln2_fu_1409_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal x_1_fu_1375_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln111_1_fu_1421_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal x_2_fu_1389_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln111_2_fu_1433_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal x_3_fu_1403_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln111_3_fu_1445_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln110_fu_1417_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln110_1_fu_1429_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln110_2_fu_1441_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln68_fu_1453_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return_0_int_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_return_1_int_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_return_2_int_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_return_3_int_reg : STD_LOGIC_VECTOR (32 downto 0);

    component myproject_mul_33s_10s_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_33s_9s_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_33s_10ns_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_33s_8ns_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_33s_7ns_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_33s_6s_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_33s_9ns_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_33s_11s_36_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    mul_33s_10s_36_1_0_U4925 : component myproject_mul_33s_10s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 10,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_10_fu_102_p0,
        din1 => mul_ln42_10_fu_102_p1,
        dout => mul_ln42_10_fu_102_p2);

    mul_33s_9s_36_1_0_U4926 : component myproject_mul_33s_9s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 9,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_4_fu_103_p0,
        din1 => mul_ln42_4_fu_103_p1,
        dout => mul_ln42_4_fu_103_p2);

    mul_33s_10ns_36_1_0_U4927 : component myproject_mul_33s_10ns_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 10,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_1_fu_104_p0,
        din1 => mul_ln42_1_fu_104_p1,
        dout => mul_ln42_1_fu_104_p2);

    mul_33s_8ns_36_1_0_U4928 : component myproject_mul_33s_8ns_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 8,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_13_fu_105_p0,
        din1 => mul_ln42_13_fu_105_p1,
        dout => mul_ln42_13_fu_105_p2);

    mul_33s_7ns_36_1_0_U4929 : component myproject_mul_33s_7ns_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 7,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_2_fu_106_p0,
        din1 => mul_ln42_2_fu_106_p1,
        dout => mul_ln42_2_fu_106_p2);

    mul_33s_6s_36_1_0_U4930 : component myproject_mul_33s_6s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 6,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_5_fu_107_p0,
        din1 => mul_ln42_5_fu_107_p1,
        dout => mul_ln42_5_fu_107_p2);

    mul_33s_10ns_36_1_0_U4931 : component myproject_mul_33s_10ns_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 10,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_12_fu_108_p0,
        din1 => mul_ln42_12_fu_108_p1,
        dout => mul_ln42_12_fu_108_p2);

    mul_33s_9ns_36_1_0_U4932 : component myproject_mul_33s_9ns_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 9,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_8_fu_109_p0,
        din1 => mul_ln42_8_fu_109_p1,
        dout => mul_ln42_8_fu_109_p2);

    mul_33s_9s_36_1_0_U4933 : component myproject_mul_33s_9s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 9,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_3_fu_110_p0,
        din1 => mul_ln42_3_fu_110_p1,
        dout => mul_ln42_3_fu_110_p2);

    mul_33s_10ns_36_1_0_U4934 : component myproject_mul_33s_10ns_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 10,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_fu_112_p0,
        din1 => mul_ln42_fu_112_p1,
        dout => mul_ln42_fu_112_p2);

    mul_33s_11s_36_1_0_U4935 : component myproject_mul_33s_11s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 11,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_11_fu_113_p0,
        din1 => mul_ln42_11_fu_113_p1,
        dout => mul_ln42_11_fu_113_p2);

    mul_33s_8ns_36_1_0_U4936 : component myproject_mul_33s_8ns_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 8,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_9_fu_114_p0,
        din1 => mul_ln42_9_fu_114_p1,
        dout => mul_ln42_9_fu_114_p2);

    mul_33s_10s_36_1_0_U4937 : component myproject_mul_33s_10s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 10,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_6_fu_116_p0,
        din1 => mul_ln42_6_fu_116_p1,
        dout => mul_ln42_6_fu_116_p2);

    mul_33s_11s_36_1_0_U4938 : component myproject_mul_33s_11s_36_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 11,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln42_7_fu_117_p0,
        din1 => mul_ln42_7_fu_117_p1,
        dout => mul_ln42_7_fu_117_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                    ap_return_0_int_reg(32 downto 10) <= sext_ln110_fu_1417_p1(32 downto 10);
                    ap_return_1_int_reg(32 downto 10) <= sext_ln110_1_fu_1429_p1(32 downto 10);
                    ap_return_2_int_reg(32 downto 10) <= sext_ln110_2_fu_1441_p1(32 downto 10);
                    ap_return_3_int_reg(32 downto 10) <= sext_ln68_fu_1453_p1(32 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln42_10_reg_1536 <= sub_ln73_2_fu_1289_p2(35 downto 20);
                trunc_ln42_11_reg_1541 <= mul_ln42_10_fu_102_p2(35 downto 20);
                trunc_ln42_12_reg_1546 <= mul_ln42_11_fu_113_p2(35 downto 20);
                trunc_ln42_13_reg_1551 <= mul_ln42_12_fu_108_p2(35 downto 20);
                trunc_ln42_14_reg_1556 <= mul_ln42_13_fu_105_p2(35 downto 20);
                trunc_ln42_1_reg_1486 <= mul_ln42_1_fu_104_p2(35 downto 20);
                trunc_ln42_2_reg_1491 <= mul_ln42_2_fu_106_p2(35 downto 20);
                trunc_ln42_3_reg_1496 <= mul_ln42_3_fu_110_p2(35 downto 20);
                trunc_ln42_4_reg_1501 <= sub_ln73_fu_1188_p2(35 downto 20);
                trunc_ln42_5_reg_1506 <= mul_ln42_4_fu_103_p2(35 downto 20);
                trunc_ln42_6_reg_1511 <= mul_ln42_5_fu_107_p2(35 downto 20);
                trunc_ln42_7_reg_1516 <= mul_ln42_6_fu_116_p2(35 downto 20);
                trunc_ln42_8_reg_1521 <= mul_ln42_7_fu_117_p2(35 downto 20);
                trunc_ln42_9_reg_1526 <= mul_ln42_8_fu_109_p2(35 downto 20);
                trunc_ln42_s_reg_1531 <= mul_ln42_9_fu_114_p2(35 downto 20);
                trunc_ln_reg_1481 <= mul_ln42_fu_112_p2(35 downto 20);
            end if;
        end if;
    end process;
    ap_return_0_int_reg(9 downto 0) <= "0000000000";
    ap_return_1_int_reg(9 downto 0) <= "0000000000";
    ap_return_2_int_reg(9 downto 0) <= "0000000000";
    ap_return_3_int_reg(9 downto 0) <= "0000000000";
    add_ln58_10_fu_1399_p2 <= std_logic_vector(unsigned(trunc_ln42_10_reg_1536) + unsigned(trunc_ln42_14_reg_1556));
    add_ln58_1_fu_1357_p2 <= std_logic_vector(unsigned(trunc_ln42_8_reg_1521) + unsigned(trunc_ln42_11_reg_1541));
    add_ln58_3_fu_1367_p2 <= std_logic_vector(unsigned(trunc_ln42_5_reg_1506) + unsigned(trunc_ln42_1_reg_1486));
    add_ln58_4_fu_1371_p2 <= std_logic_vector(unsigned(trunc_ln42_9_reg_1526) + unsigned(trunc_ln42_12_reg_1546));
    add_ln58_6_fu_1381_p2 <= std_logic_vector(unsigned(trunc_ln42_6_reg_1511) + unsigned(trunc_ln42_2_reg_1491));
    add_ln58_7_fu_1385_p2 <= std_logic_vector(unsigned(trunc_ln42_s_reg_1531) + unsigned(trunc_ln42_13_reg_1551));
    add_ln58_9_fu_1395_p2 <= std_logic_vector(unsigned(trunc_ln42_7_reg_1516) + unsigned(trunc_ln42_3_reg_1496));
    add_ln58_fu_1353_p2 <= std_logic_vector(unsigned(trunc_ln42_4_reg_1501) + unsigned(trunc_ln_reg_1481));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_0_assign_proc : process(sext_ln110_fu_1417_p1, ap_ce_reg, ap_return_0_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_0 <= ap_return_0_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_0 <= sext_ln110_fu_1417_p1;
        else 
            ap_return_0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_1_assign_proc : process(sext_ln110_1_fu_1429_p1, ap_ce_reg, ap_return_1_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_1 <= ap_return_1_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_1 <= sext_ln110_1_fu_1429_p1;
        else 
            ap_return_1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_2_assign_proc : process(sext_ln110_2_fu_1441_p1, ap_ce_reg, ap_return_2_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_2 <= ap_return_2_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_2 <= sext_ln110_2_fu_1441_p1;
        else 
            ap_return_2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_3_assign_proc : process(sext_ln68_fu_1453_p1, ap_ce_reg, ap_return_3_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_3 <= ap_return_3_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_3 <= sext_ln68_fu_1453_p1;
        else 
            ap_return_3 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mul_ln42_10_fu_102_p0 <= sext_ln42_2_fu_1305_p1(33 - 1 downto 0);
    mul_ln42_10_fu_102_p1 <= ap_const_lv36_FFFFFFEF6(10 - 1 downto 0);
    mul_ln42_11_fu_113_p0 <= sext_ln42_2_fu_1305_p1(33 - 1 downto 0);
    mul_ln42_11_fu_113_p1 <= ap_const_lv36_FFFFFFDBB(11 - 1 downto 0);
    mul_ln42_12_fu_108_p0 <= sext_ln42_2_fu_1305_p1(33 - 1 downto 0);
    mul_ln42_12_fu_108_p1 <= ap_const_lv36_1BC(10 - 1 downto 0);
    mul_ln42_13_fu_105_p0 <= sext_ln42_2_fu_1305_p1(33 - 1 downto 0);
    mul_ln42_13_fu_105_p1 <= ap_const_lv36_4B(8 - 1 downto 0);
    mul_ln42_1_fu_104_p0 <= sext_ln42_fu_1113_p1(33 - 1 downto 0);
    mul_ln42_1_fu_104_p1 <= ap_const_lv36_1BD(10 - 1 downto 0);
    mul_ln42_2_fu_106_p0 <= sext_ln42_fu_1113_p1(33 - 1 downto 0);
    mul_ln42_2_fu_106_p1 <= ap_const_lv36_3D(7 - 1 downto 0);
    mul_ln42_3_fu_110_p0 <= sext_ln42_fu_1113_p1(33 - 1 downto 0);
    mul_ln42_3_fu_110_p1 <= ap_const_lv36_FFFFFFF5F(9 - 1 downto 0);
    mul_ln42_4_fu_103_p0 <= sext_ln42_1_fu_1161_p1(33 - 1 downto 0);
    mul_ln42_4_fu_103_p1 <= ap_const_lv36_FFFFFFF3A(9 - 1 downto 0);
    mul_ln42_5_fu_107_p0 <= sext_ln42_1_fu_1161_p1(33 - 1 downto 0);
    mul_ln42_5_fu_107_p1 <= ap_const_lv36_FFFFFFFE5(6 - 1 downto 0);
    mul_ln42_6_fu_116_p0 <= sext_ln42_1_fu_1161_p1(33 - 1 downto 0);
    mul_ln42_6_fu_116_p1 <= ap_const_lv36_FFFFFFE45(10 - 1 downto 0);
    mul_ln42_7_fu_117_p0 <= sext_ln70_fu_1234_p1(33 - 1 downto 0);
    mul_ln42_7_fu_117_p1 <= ap_const_lv36_FFFFFFDC8(11 - 1 downto 0);
    mul_ln42_8_fu_109_p0 <= sext_ln70_fu_1234_p1(33 - 1 downto 0);
    mul_ln42_8_fu_109_p1 <= ap_const_lv36_9E(9 - 1 downto 0);
    mul_ln42_9_fu_114_p0 <= sext_ln70_fu_1234_p1(33 - 1 downto 0);
    mul_ln42_9_fu_114_p1 <= ap_const_lv36_57(8 - 1 downto 0);
    mul_ln42_fu_112_p0 <= sext_ln42_fu_1113_p1(33 - 1 downto 0);
    mul_ln42_fu_112_p1 <= ap_const_lv36_124(10 - 1 downto 0);
        sext_ln110_1_fu_1429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln111_1_fu_1421_p3),33));

        sext_ln110_2_fu_1441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln111_2_fu_1433_p3),33));

        sext_ln110_fu_1417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_fu_1409_p3),33));

    sext_ln42_1_fu_1161_p0 <= data_1_val;
        sext_ln42_1_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln42_1_fu_1161_p0),36));

        sext_ln42_2_fu_1305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_3_val),36));

        sext_ln42_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_0_val),36));

        sext_ln68_fu_1453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln111_3_fu_1445_p3),33));

    sext_ln70_fu_1234_p0 <= data_2_val;
        sext_ln70_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_fu_1234_p0),36));

    shl_ln111_1_fu_1421_p3 <= (x_1_fu_1375_p2 & ap_const_lv10_0);
    shl_ln111_2_fu_1433_p3 <= (x_2_fu_1389_p2 & ap_const_lv10_0);
    shl_ln111_3_fu_1445_p3 <= (x_3_fu_1403_p2 & ap_const_lv10_0);
    shl_ln2_fu_1409_p3 <= (x_fu_1361_p2 & ap_const_lv10_0);
    shl_ln73_1_fu_1180_p1 <= data_1_val;
    shl_ln73_1_fu_1180_p3 <= (shl_ln73_1_fu_1180_p1 & ap_const_lv3_0);
    shl_ln73_2_fu_1275_p3 <= (trunc_ln73_1_fu_1271_p1 & ap_const_lv7_0);
    shl_ln_fu_1172_p3 <= (trunc_ln73_fu_1168_p1 & ap_const_lv9_0);
    sub_ln73_1_fu_1283_p2 <= std_logic_vector(unsigned(ap_const_lv36_0) - unsigned(shl_ln73_2_fu_1275_p3));
    sub_ln73_2_fu_1289_p2 <= std_logic_vector(unsigned(sub_ln73_1_fu_1283_p2) - unsigned(sext_ln70_fu_1234_p1));
    sub_ln73_fu_1188_p2 <= std_logic_vector(unsigned(shl_ln_fu_1172_p3) - unsigned(shl_ln73_1_fu_1180_p3));
    trunc_ln73_1_fu_1271_p0 <= data_2_val;
    trunc_ln73_1_fu_1271_p1 <= trunc_ln73_1_fu_1271_p0(29 - 1 downto 0);
    trunc_ln73_fu_1168_p0 <= data_1_val;
    trunc_ln73_fu_1168_p1 <= trunc_ln73_fu_1168_p0(27 - 1 downto 0);
    x_1_fu_1375_p2 <= std_logic_vector(unsigned(add_ln58_4_fu_1371_p2) + unsigned(add_ln58_3_fu_1367_p2));
    x_2_fu_1389_p2 <= std_logic_vector(unsigned(add_ln58_7_fu_1385_p2) + unsigned(add_ln58_6_fu_1381_p2));
    x_3_fu_1403_p2 <= std_logic_vector(unsigned(add_ln58_10_fu_1399_p2) + unsigned(add_ln58_9_fu_1395_p2));
    x_fu_1361_p2 <= std_logic_vector(unsigned(add_ln58_1_fu_1357_p2) + unsigned(add_ln58_fu_1353_p2));
end behav;
