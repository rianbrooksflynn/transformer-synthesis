-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config3_1_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    idx2 : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (32 downto 0) );
end;


architecture behav of myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config3_1_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal value_weight3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal value_weight3_ce0 : STD_LOGIC;
    signal value_weight3_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal value_weight3_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal value_weight3_ce1 : STD_LOGIC;
    signal value_weight3_q1 : STD_LOGIC_VECTOR (10 downto 0);
    signal value_weight3_address2 : STD_LOGIC_VECTOR (3 downto 0);
    signal value_weight3_ce2 : STD_LOGIC;
    signal value_weight3_q2 : STD_LOGIC_VECTOR (10 downto 0);
    signal value_weight3_address3 : STD_LOGIC_VECTOR (3 downto 0);
    signal value_weight3_ce3 : STD_LOGIC;
    signal value_weight3_q3 : STD_LOGIC_VECTOR (10 downto 0);
    signal value_weight3_address4 : STD_LOGIC_VECTOR (3 downto 0);
    signal value_weight3_ce4 : STD_LOGIC;
    signal value_weight3_q4 : STD_LOGIC_VECTOR (10 downto 0);
    signal value_weight3_address5 : STD_LOGIC_VECTOR (3 downto 0);
    signal value_weight3_ce5 : STD_LOGIC;
    signal value_weight3_q5 : STD_LOGIC_VECTOR (10 downto 0);
    signal value_weight3_address6 : STD_LOGIC_VECTOR (3 downto 0);
    signal value_weight3_ce6 : STD_LOGIC;
    signal value_weight3_q6 : STD_LOGIC_VECTOR (10 downto 0);
    signal value_weight3_address7 : STD_LOGIC_VECTOR (3 downto 0);
    signal value_weight3_ce7 : STD_LOGIC;
    signal value_weight3_q7 : STD_LOGIC_VECTOR (10 downto 0);
    signal idx2_read_reg_674 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal data_3_val_read_reg_682 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_val_read_reg_687 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_val_read_reg_692 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_val_read_reg_692_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_val_read_reg_697 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_val_read_reg_697_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_12_fu_534_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_12_reg_742 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_15_fu_540_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_15_reg_747 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_3_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln42_4_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_5_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_6_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_1_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_2_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln42_15_fu_185_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln73_961_fu_586_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln42_17_fu_186_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln73_964_fu_469_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln42_fu_187_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln73_958_fu_551_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln42_16_fu_188_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln42_20_fu_189_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln73_967_fu_504_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln42_14_fu_190_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln42_19_fu_191_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln42_18_fu_192_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln42_3_fu_386_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln42_4_fu_397_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln42_5_fu_408_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln42_6_fu_419_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln42_fu_434_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln42_1_fu_444_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln42_2_fu_454_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln42_17_fu_186_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln42_18_fu_192_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln42_19_fu_191_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln42_20_fu_189_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln42_17_fu_474_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_19_fu_509_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_18_fu_489_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_20_fu_524_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln42_fu_187_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln42_14_fu_190_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln42_15_fu_185_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln42_16_fu_188_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln42_15_fu_591_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_556_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_fu_616_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_16_fu_606_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_s_fu_571_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_14_fu_627_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_fu_622_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_638_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal x_4_fu_633_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln111_4_fu_650_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln110_fu_646_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln68_fu_658_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_16s_11s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config3_1_2_value_weigdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        address2 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (10 downto 0);
        address3 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (10 downto 0);
        address4 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (10 downto 0);
        address5 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (10 downto 0);
        address6 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (10 downto 0);
        address7 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    value_weight3_U : component myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config3_1_2_value_weigdEe
    generic map (
        DataWidth => 11,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => value_weight3_address0,
        ce0 => value_weight3_ce0,
        q0 => value_weight3_q0,
        address1 => value_weight3_address1,
        ce1 => value_weight3_ce1,
        q1 => value_weight3_q1,
        address2 => value_weight3_address2,
        ce2 => value_weight3_ce2,
        q2 => value_weight3_q2,
        address3 => value_weight3_address3,
        ce3 => value_weight3_ce3,
        q3 => value_weight3_q3,
        address4 => value_weight3_address4,
        ce4 => value_weight3_ce4,
        q4 => value_weight3_q4,
        address5 => value_weight3_address5,
        ce5 => value_weight3_ce5,
        q5 => value_weight3_q5,
        address6 => value_weight3_address6,
        ce6 => value_weight3_ce6,
        q6 => value_weight3_q6,
        address7 => value_weight3_address7,
        ce7 => value_weight3_ce7,
        q7 => value_weight3_q7);

    mul_16s_11s_26_1_1_U54 : component myproject_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln42_15_fu_185_p0,
        din1 => value_weight3_q1,
        dout => mul_ln42_15_fu_185_p2);

    mul_16s_11s_26_1_1_U55 : component myproject_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln42_17_fu_186_p0,
        din1 => value_weight3_q7,
        dout => mul_ln42_17_fu_186_p2);

    mul_16s_11s_26_1_1_U56 : component myproject_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln42_fu_187_p0,
        din1 => value_weight3_q3,
        dout => mul_ln42_fu_187_p2);

    mul_16s_11s_26_1_1_U57 : component myproject_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln42_16_fu_188_p0,
        din1 => value_weight3_q0,
        dout => mul_ln42_16_fu_188_p2);

    mul_16s_11s_26_1_1_U58 : component myproject_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln42_20_fu_189_p0,
        din1 => value_weight3_q4,
        dout => mul_ln42_20_fu_189_p2);

    mul_16s_11s_26_1_1_U59 : component myproject_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln42_14_fu_190_p0,
        din1 => value_weight3_q2,
        dout => mul_ln42_14_fu_190_p2);

    mul_16s_11s_26_1_1_U60 : component myproject_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln42_19_fu_191_p0,
        din1 => value_weight3_q5,
        dout => mul_ln42_19_fu_191_p2);

    mul_16s_11s_26_1_1_U61 : component myproject_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln42_18_fu_192_p0,
        din1 => value_weight3_q6,
        dout => mul_ln42_18_fu_192_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln58_12_reg_742 <= add_ln58_12_fu_534_p2;
                add_ln58_15_reg_747 <= add_ln58_15_fu_540_p2;
                data_0_val_read_reg_697 <= data_0_val;
                data_0_val_read_reg_697_pp0_iter1_reg <= data_0_val_read_reg_697;
                data_1_val_read_reg_692 <= data_1_val;
                data_1_val_read_reg_692_pp0_iter1_reg <= data_1_val_read_reg_692;
                data_2_val_read_reg_687 <= data_2_val;
                data_3_val_read_reg_682 <= data_3_val;
                idx2_read_reg_674 <= idx2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln42_1_fu_444_p2 <= std_logic_vector(unsigned(idx2_read_reg_674) + unsigned(ap_const_lv4_2));
    add_ln42_2_fu_454_p2 <= std_logic_vector(unsigned(idx2_read_reg_674) + unsigned(ap_const_lv4_3));
    add_ln42_3_fu_386_p2 <= std_logic_vector(unsigned(idx2) + unsigned(ap_const_lv4_4));
    add_ln42_4_fu_397_p2 <= std_logic_vector(unsigned(idx2) + unsigned(ap_const_lv4_5));
    add_ln42_5_fu_408_p2 <= std_logic_vector(unsigned(idx2) + unsigned(ap_const_lv4_6));
    add_ln42_6_fu_419_p2 <= std_logic_vector(unsigned(idx2) + unsigned(ap_const_lv4_7));
    add_ln42_fu_434_p2 <= std_logic_vector(unsigned(idx2_read_reg_674) + unsigned(ap_const_lv4_1));
    add_ln58_12_fu_534_p2 <= std_logic_vector(unsigned(trunc_ln42_17_fu_474_p4) + unsigned(trunc_ln42_19_fu_509_p4));
    add_ln58_14_fu_627_p2 <= std_logic_vector(unsigned(trunc_ln42_16_fu_606_p4) + unsigned(trunc_ln42_s_fu_571_p4));
    add_ln58_15_fu_540_p2 <= std_logic_vector(unsigned(trunc_ln42_18_fu_489_p4) + unsigned(trunc_ln42_20_fu_524_p4));
    add_ln58_fu_616_p2 <= std_logic_vector(unsigned(trunc_ln42_15_fu_591_p4) + unsigned(trunc_ln_fu_556_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= sext_ln110_fu_646_p1;
    ap_return_1 <= sext_ln68_fu_658_p1;
    mul_ln42_14_fu_190_p0 <= sext_ln73_958_fu_551_p1(16 - 1 downto 0);
    mul_ln42_15_fu_185_p0 <= sext_ln73_961_fu_586_p1(16 - 1 downto 0);
    mul_ln42_16_fu_188_p0 <= sext_ln73_961_fu_586_p1(16 - 1 downto 0);
    mul_ln42_17_fu_186_p0 <= sext_ln73_964_fu_469_p1(16 - 1 downto 0);
    mul_ln42_18_fu_192_p0 <= sext_ln73_964_fu_469_p1(16 - 1 downto 0);
    mul_ln42_19_fu_191_p0 <= sext_ln73_967_fu_504_p1(16 - 1 downto 0);
    mul_ln42_20_fu_189_p0 <= sext_ln73_967_fu_504_p1(16 - 1 downto 0);
    mul_ln42_fu_187_p0 <= sext_ln73_958_fu_551_p1(16 - 1 downto 0);
        sext_ln110_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_638_p3),33));

        sext_ln68_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln111_4_fu_650_p3),33));

        sext_ln73_958_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_0_val_read_reg_697_pp0_iter1_reg),26));

        sext_ln73_961_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_1_val_read_reg_692_pp0_iter1_reg),26));

        sext_ln73_964_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_2_val_read_reg_687),26));

        sext_ln73_967_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_3_val_read_reg_682),26));

    shl_ln111_4_fu_650_p3 <= (x_4_fu_633_p2 & ap_const_lv10_0);
    shl_ln_fu_638_p3 <= (x_fu_622_p2 & ap_const_lv10_0);
    trunc_ln42_15_fu_591_p4 <= mul_ln42_15_fu_185_p2(25 downto 10);
    trunc_ln42_16_fu_606_p4 <= mul_ln42_16_fu_188_p2(25 downto 10);
    trunc_ln42_17_fu_474_p4 <= mul_ln42_17_fu_186_p2(25 downto 10);
    trunc_ln42_18_fu_489_p4 <= mul_ln42_18_fu_192_p2(25 downto 10);
    trunc_ln42_19_fu_509_p4 <= mul_ln42_19_fu_191_p2(25 downto 10);
    trunc_ln42_20_fu_524_p4 <= mul_ln42_20_fu_189_p2(25 downto 10);
    trunc_ln42_s_fu_571_p4 <= mul_ln42_14_fu_190_p2(25 downto 10);
    trunc_ln_fu_556_p4 <= mul_ln42_fu_187_p2(25 downto 10);
    value_weight3_address0 <= zext_ln42_2_fu_459_p1(4 - 1 downto 0);
    value_weight3_address1 <= zext_ln42_1_fu_449_p1(4 - 1 downto 0);
    value_weight3_address2 <= zext_ln42_fu_439_p1(4 - 1 downto 0);
    value_weight3_address3 <= zext_ln13_fu_430_p1(4 - 1 downto 0);
    value_weight3_address4 <= zext_ln42_6_fu_425_p1(4 - 1 downto 0);
    value_weight3_address5 <= zext_ln42_5_fu_414_p1(4 - 1 downto 0);
    value_weight3_address6 <= zext_ln42_4_fu_403_p1(4 - 1 downto 0);
    value_weight3_address7 <= zext_ln42_3_fu_392_p1(4 - 1 downto 0);

    value_weight3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            value_weight3_ce0 <= ap_const_logic_1;
        else 
            value_weight3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    value_weight3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            value_weight3_ce1 <= ap_const_logic_1;
        else 
            value_weight3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    value_weight3_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            value_weight3_ce2 <= ap_const_logic_1;
        else 
            value_weight3_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    value_weight3_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            value_weight3_ce3 <= ap_const_logic_1;
        else 
            value_weight3_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    value_weight3_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            value_weight3_ce4 <= ap_const_logic_1;
        else 
            value_weight3_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    value_weight3_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            value_weight3_ce5 <= ap_const_logic_1;
        else 
            value_weight3_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    value_weight3_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            value_weight3_ce6 <= ap_const_logic_1;
        else 
            value_weight3_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    value_weight3_ce7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            value_weight3_ce7 <= ap_const_logic_1;
        else 
            value_weight3_ce7 <= ap_const_logic_0;
        end if; 
    end process;

    x_4_fu_633_p2 <= std_logic_vector(unsigned(add_ln58_15_reg_747) + unsigned(add_ln58_14_fu_627_p2));
    x_fu_622_p2 <= std_logic_vector(unsigned(add_ln58_12_reg_742) + unsigned(add_ln58_fu_616_p2));
    zext_ln13_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx2_read_reg_674),64));
    zext_ln42_1_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_1_fu_444_p2),64));
    zext_ln42_2_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_2_fu_454_p2),64));
    zext_ln42_3_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_3_fu_386_p2),64));
    zext_ln42_4_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_4_fu_397_p2),64));
    zext_ln42_5_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_5_fu_408_p2),64));
    zext_ln42_6_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_6_fu_419_p2),64));
    zext_ln42_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_fu_434_p2),64));
end behav;
