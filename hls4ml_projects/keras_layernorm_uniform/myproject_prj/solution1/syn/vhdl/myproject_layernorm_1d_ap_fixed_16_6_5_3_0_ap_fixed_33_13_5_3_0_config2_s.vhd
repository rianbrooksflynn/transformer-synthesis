-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (32 downto 0) );
end;


architecture behav of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv19_8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv31_666 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000011001100110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal invert_sqr_table_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal invert_sqr_table_ce0 : STD_LOGIC;
    signal invert_sqr_table_q0 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln_fu_103_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln_reg_543 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln728_1_fu_111_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln728_1_reg_548 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln728_2_fu_119_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln728_2_reg_553 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln728_3_fu_127_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln728_3_reg_558 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln728_4_fu_135_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln728_4_reg_563 : STD_LOGIC_VECTOR (18 downto 0);
    signal mean_V_reg_568 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln703_fu_183_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_reg_573 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_reg_573_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_reg_573_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln_reg_578 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_1_fu_201_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_1_reg_583 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_1_reg_583_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_1_reg_583_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln708_1_reg_588 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_2_fu_219_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_2_reg_593 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_2_reg_593_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_2_reg_593_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_3_fu_237_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_3_reg_598 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_3_reg_598_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_3_reg_598_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_4_fu_255_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_4_reg_603 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_4_reg_603_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln703_4_reg_603_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln703_6_fu_279_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln703_6_reg_608 : STD_LOGIC_VECTOR (18 downto 0);
    signal var_V_reg_613 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln145_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_1_fu_149_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln703_2_fu_155_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln703_fu_143_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln703_3_fu_161_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_fu_494_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln708_fu_180_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln708_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln708_1_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln708_2_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln708_3_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln708_4_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln708_3_fu_246_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln708_4_fu_264_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln703_5_fu_273_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln708_2_fu_228_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln703_4_fu_285_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln703_7_fu_289_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_1_fu_536_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln708_1_fu_307_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_310_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_fu_316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_1_fu_324_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_1_fu_336_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln144_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln141_fu_332_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal index_2_fu_352_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_fu_372_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln1116_fu_365_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal mul_ln1118_fu_372_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal mul_ln1118_1_fu_391_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1118_1_fu_391_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal mul_ln1118_2_fu_410_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1118_2_fu_410_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal mul_ln1118_3_fu_429_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1118_3_fu_429_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal mul_ln1118_4_fu_448_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1118_4_fu_448_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_fu_494_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln708_fu_501_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1118_1_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln708_fu_501_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln708_1_fu_508_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1118_2_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln708_1_fu_508_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln708_2_fu_515_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1118_3_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln708_2_fu_515_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln708_3_fu_522_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1118_4_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln708_3_fu_522_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln708_4_fu_529_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1118_5_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln708_4_fu_529_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_1_fu_536_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_reset_start_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_27ns_19s_46_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component myproject_mul_mul_12ns_19s_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component myproject_mul_mul_19s_19s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;



begin
    invert_sqr_table_U : component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb
    generic map (
        DataWidth => 27,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_sqr_table_address0,
        ce0 => invert_sqr_table_ce0,
        q0 => invert_sqr_table_q0);

    mul_27ns_19s_46_1_1_U1 : component myproject_mul_27ns_19s_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 19,
        dout_WIDTH => 46)
    port map (
        din0 => mul_ln1118_fu_372_p0,
        din1 => sub_ln703_reg_573_pp0_iter3_reg,
        dout => mul_ln1118_fu_372_p2);

    mul_27ns_19s_46_1_1_U2 : component myproject_mul_27ns_19s_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 19,
        dout_WIDTH => 46)
    port map (
        din0 => mul_ln1118_1_fu_391_p0,
        din1 => sub_ln703_1_reg_583_pp0_iter3_reg,
        dout => mul_ln1118_1_fu_391_p2);

    mul_27ns_19s_46_1_1_U3 : component myproject_mul_27ns_19s_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 19,
        dout_WIDTH => 46)
    port map (
        din0 => mul_ln1118_2_fu_410_p0,
        din1 => sub_ln703_2_reg_593_pp0_iter3_reg,
        dout => mul_ln1118_2_fu_410_p2);

    mul_27ns_19s_46_1_1_U4 : component myproject_mul_27ns_19s_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 19,
        dout_WIDTH => 46)
    port map (
        din0 => mul_ln1118_3_fu_429_p0,
        din1 => sub_ln703_3_reg_598_pp0_iter3_reg,
        dout => mul_ln1118_3_fu_429_p2);

    mul_27ns_19s_46_1_1_U5 : component myproject_mul_27ns_19s_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 19,
        dout_WIDTH => 46)
    port map (
        din0 => mul_ln1118_4_fu_448_p0,
        din1 => sub_ln703_4_reg_603_pp0_iter3_reg,
        dout => mul_ln1118_4_fu_448_p2);

    mul_mul_12ns_19s_31_1_1_U6 : component myproject_mul_mul_12ns_19s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 19,
        dout_WIDTH => 31)
    port map (
        din0 => r_V_fu_494_p0,
        din1 => add_ln703_3_fu_161_p2,
        dout => r_V_fu_494_p2);

    mul_mul_19s_19s_32_1_1_U7 : component myproject_mul_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln708_fu_501_p0,
        din1 => mul_ln708_fu_501_p1,
        dout => mul_ln708_fu_501_p2);

    mul_mul_19s_19s_32_1_1_U8 : component myproject_mul_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln708_1_fu_508_p0,
        din1 => mul_ln708_1_fu_508_p1,
        dout => mul_ln708_1_fu_508_p2);

    mul_mul_19s_19s_32_1_1_U9 : component myproject_mul_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln708_2_fu_515_p0,
        din1 => mul_ln708_2_fu_515_p1,
        dout => mul_ln708_2_fu_515_p2);

    mul_mul_19s_19s_32_1_1_U10 : component myproject_mul_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln708_3_fu_522_p0,
        din1 => mul_ln708_3_fu_522_p1,
        dout => mul_ln708_3_fu_522_p2);

    mul_mul_19s_19s_32_1_1_U11 : component myproject_mul_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln708_4_fu_529_p0,
        din1 => mul_ln708_4_fu_529_p1,
        dout => mul_ln708_4_fu_529_p2);

    mul_mul_12ns_19s_31_1_1_U12 : component myproject_mul_mul_12ns_19s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 19,
        dout_WIDTH => 31)
    port map (
        din0 => r_V_1_fu_536_p0,
        din1 => add_ln703_7_fu_289_p2,
        dout => r_V_1_fu_536_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln703_6_reg_608 <= add_ln703_6_fu_279_p2;
                mean_V_reg_568 <= r_V_fu_494_p2(30 downto 13);
                    shl_ln728_1_reg_548(18 downto 3) <= shl_ln728_1_fu_111_p3(18 downto 3);
                    shl_ln728_2_reg_553(18 downto 3) <= shl_ln728_2_fu_119_p3(18 downto 3);
                    shl_ln728_3_reg_558(18 downto 3) <= shl_ln728_3_fu_127_p3(18 downto 3);
                    shl_ln728_4_reg_563(18 downto 3) <= shl_ln728_4_fu_135_p3(18 downto 3);
                    shl_ln_reg_543(18 downto 3) <= shl_ln_fu_103_p3(18 downto 3);
                sub_ln703_1_reg_583 <= sub_ln703_1_fu_201_p2;
                sub_ln703_2_reg_593 <= sub_ln703_2_fu_219_p2;
                sub_ln703_3_reg_598 <= sub_ln703_3_fu_237_p2;
                sub_ln703_4_reg_603 <= sub_ln703_4_fu_255_p2;
                sub_ln703_reg_573 <= sub_ln703_fu_183_p2;
                trunc_ln708_1_reg_588 <= mul_ln708_1_fu_508_p2(31 downto 13);
                trunc_ln_reg_578 <= mul_ln708_fu_501_p2(31 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                sub_ln703_1_reg_583_pp0_iter2_reg <= sub_ln703_1_reg_583;
                sub_ln703_1_reg_583_pp0_iter3_reg <= sub_ln703_1_reg_583_pp0_iter2_reg;
                sub_ln703_2_reg_593_pp0_iter2_reg <= sub_ln703_2_reg_593;
                sub_ln703_2_reg_593_pp0_iter3_reg <= sub_ln703_2_reg_593_pp0_iter2_reg;
                sub_ln703_3_reg_598_pp0_iter2_reg <= sub_ln703_3_reg_598;
                sub_ln703_3_reg_598_pp0_iter3_reg <= sub_ln703_3_reg_598_pp0_iter2_reg;
                sub_ln703_4_reg_603_pp0_iter2_reg <= sub_ln703_4_reg_603;
                sub_ln703_4_reg_603_pp0_iter3_reg <= sub_ln703_4_reg_603_pp0_iter2_reg;
                sub_ln703_reg_573_pp0_iter2_reg <= sub_ln703_reg_573;
                sub_ln703_reg_573_pp0_iter3_reg <= sub_ln703_reg_573_pp0_iter2_reg;
                var_V_reg_613 <= r_V_1_fu_536_p2(30 downto 13);
            end if;
        end if;
    end process;
    shl_ln_reg_543(2 downto 0) <= "000";
    shl_ln728_1_reg_548(2 downto 0) <= "000";
    shl_ln728_2_reg_553(2 downto 0) <= "000";
    shl_ln728_3_reg_558(2 downto 0) <= "000";
    shl_ln728_4_reg_563(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_reset_start_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_1_fu_149_p2 <= std_logic_vector(unsigned(shl_ln728_3_fu_127_p3) + unsigned(shl_ln728_4_fu_135_p3));
    add_ln703_2_fu_155_p2 <= std_logic_vector(unsigned(add_ln703_1_fu_149_p2) + unsigned(shl_ln728_2_fu_119_p3));
    add_ln703_3_fu_161_p2 <= std_logic_vector(unsigned(add_ln703_2_fu_155_p2) + unsigned(add_ln703_fu_143_p2));
    add_ln703_4_fu_285_p2 <= std_logic_vector(unsigned(trunc_ln708_1_reg_588) + unsigned(trunc_ln_reg_578));
    add_ln703_5_fu_273_p2 <= std_logic_vector(unsigned(trunc_ln708_3_fu_246_p4) + unsigned(trunc_ln708_4_fu_264_p4));
    add_ln703_6_fu_279_p2 <= std_logic_vector(unsigned(add_ln703_5_fu_273_p2) + unsigned(trunc_ln708_2_fu_228_p4));
    add_ln703_7_fu_289_p2 <= std_logic_vector(unsigned(add_ln703_6_reg_608) + unsigned(add_ln703_4_fu_285_p2));
    add_ln703_fu_143_p2 <= std_logic_vector(unsigned(shl_ln728_1_fu_111_p3) + unsigned(shl_ln_fu_103_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_start_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_start_pp0 <= ap_const_logic_1;
        else 
            ap_reset_start_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= mul_ln1118_fu_372_p2(45 downto 13);
    ap_return_1 <= mul_ln1118_1_fu_391_p2(45 downto 13);
    ap_return_2 <= mul_ln1118_2_fu_410_p2(45 downto 13);
    ap_return_3 <= mul_ln1118_3_fu_429_p2(45 downto 13);
    ap_return_4 <= mul_ln1118_4_fu_448_p2(45 downto 13);
    icmp_ln144_fu_346_p2 <= "0" when (tmp_1_fu_336_p4 = ap_const_lv6_0) else "1";
    index_1_fu_324_p3 <= 
        ap_const_lv19_0 when (tmp_fu_316_p3(0) = '1') else 
        ret_V_fu_310_p2;
    index_2_fu_352_p3 <= 
        ap_const_lv13_1FFF when (icmp_ln144_fu_346_p2(0) = '1') else 
        trunc_ln141_fu_332_p1;
    invert_sqr_table_address0 <= zext_ln145_fu_360_p1(13 - 1 downto 0);

    invert_sqr_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            invert_sqr_table_ce0 <= ap_const_logic_1;
        else 
            invert_sqr_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_1_fu_391_p0 <= zext_ln1116_fu_365_p1(27 - 1 downto 0);
    mul_ln1118_2_fu_410_p0 <= zext_ln1116_fu_365_p1(27 - 1 downto 0);
    mul_ln1118_3_fu_429_p0 <= zext_ln1116_fu_365_p1(27 - 1 downto 0);
    mul_ln1118_4_fu_448_p0 <= zext_ln1116_fu_365_p1(27 - 1 downto 0);
    mul_ln1118_fu_372_p0 <= zext_ln1116_fu_365_p1(27 - 1 downto 0);
    mul_ln708_1_fu_508_p0 <= sext_ln1118_2_fu_206_p1(19 - 1 downto 0);
    mul_ln708_1_fu_508_p1 <= sext_ln1118_2_fu_206_p1(19 - 1 downto 0);
    mul_ln708_2_fu_515_p0 <= sext_ln1118_3_fu_224_p1(19 - 1 downto 0);
    mul_ln708_2_fu_515_p1 <= sext_ln1118_3_fu_224_p1(19 - 1 downto 0);
    mul_ln708_3_fu_522_p0 <= sext_ln1118_4_fu_242_p1(19 - 1 downto 0);
    mul_ln708_3_fu_522_p1 <= sext_ln1118_4_fu_242_p1(19 - 1 downto 0);
    mul_ln708_4_fu_529_p0 <= sext_ln1118_5_fu_260_p1(19 - 1 downto 0);
    mul_ln708_4_fu_529_p1 <= sext_ln1118_5_fu_260_p1(19 - 1 downto 0);
    mul_ln708_fu_501_p0 <= sext_ln1118_1_fu_188_p1(19 - 1 downto 0);
    mul_ln708_fu_501_p1 <= sext_ln1118_1_fu_188_p1(19 - 1 downto 0);
    r_V_1_fu_536_p0 <= ap_const_lv31_666(12 - 1 downto 0);
    r_V_fu_494_p0 <= ap_const_lv31_666(12 - 1 downto 0);
    ret_V_fu_310_p2 <= std_logic_vector(unsigned(ap_const_lv19_8) + unsigned(sext_ln708_1_fu_307_p1));
        sext_ln1118_1_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_fu_183_p2),32));

        sext_ln1118_2_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_1_fu_201_p2),32));

        sext_ln1118_3_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_2_fu_219_p2),32));

        sext_ln1118_4_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_3_fu_237_p2),32));

        sext_ln1118_5_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_4_fu_255_p2),32));

        sext_ln708_1_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(var_V_reg_613),19));

        sext_ln708_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mean_V_reg_568),19));

    shl_ln728_1_fu_111_p3 <= (p_read1 & ap_const_lv3_0);
    shl_ln728_2_fu_119_p3 <= (p_read2 & ap_const_lv3_0);
    shl_ln728_3_fu_127_p3 <= (p_read3 & ap_const_lv3_0);
    shl_ln728_4_fu_135_p3 <= (p_read4 & ap_const_lv3_0);
    shl_ln_fu_103_p3 <= (p_read & ap_const_lv3_0);
    sub_ln703_1_fu_201_p2 <= std_logic_vector(unsigned(shl_ln728_1_reg_548) - unsigned(sext_ln708_fu_180_p1));
    sub_ln703_2_fu_219_p2 <= std_logic_vector(unsigned(shl_ln728_2_reg_553) - unsigned(sext_ln708_fu_180_p1));
    sub_ln703_3_fu_237_p2 <= std_logic_vector(unsigned(shl_ln728_3_reg_558) - unsigned(sext_ln708_fu_180_p1));
    sub_ln703_4_fu_255_p2 <= std_logic_vector(unsigned(shl_ln728_4_reg_563) - unsigned(sext_ln708_fu_180_p1));
    sub_ln703_fu_183_p2 <= std_logic_vector(unsigned(shl_ln_reg_543) - unsigned(sext_ln708_fu_180_p1));
    tmp_1_fu_336_p4 <= index_1_fu_324_p3(18 downto 13);
    tmp_fu_316_p3 <= ret_V_fu_310_p2(18 downto 18);
    trunc_ln141_fu_332_p1 <= index_1_fu_324_p3(13 - 1 downto 0);
    trunc_ln708_2_fu_228_p4 <= mul_ln708_2_fu_515_p2(31 downto 13);
    trunc_ln708_3_fu_246_p4 <= mul_ln708_3_fu_522_p2(31 downto 13);
    trunc_ln708_4_fu_264_p4 <= mul_ln708_4_fu_529_p2(31 downto 13);
    zext_ln1116_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invert_sqr_table_q0),46));
    zext_ln145_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_2_fu_352_p3),64));
end behav;
