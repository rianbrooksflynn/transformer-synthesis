-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (32 downto 0) );
end;


architecture behav of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv37_3333 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000011001100110011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal invert_sqr_table_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal invert_sqr_table_ce0 : STD_LOGIC;
    signal invert_sqr_table_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_cache_fu_137_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sum_cache_reg_578 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal shl_ln_fu_145_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln_reg_583 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_1_fu_153_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_1_reg_588 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_2_fu_161_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_2_reg_593 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_3_fu_169_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_3_reg_598 : STD_LOGIC_VECTOR (21 downto 0);
    signal mean_reg_603 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln134_fu_224_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_reg_608 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_reg_608_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_reg_608_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal diff_5_reg_613 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_1_fu_245_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_1_reg_618 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_1_reg_618_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_1_reg_618_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal diff_reg_623 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_2_fu_266_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_2_reg_628 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_2_reg_628_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_2_reg_628_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_3_fu_287_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_3_reg_633 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_3_reg_633_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_3_reg_633_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_4_fu_308_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_4_reg_638 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_4_reg_638_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_4_reg_638_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_3_fu_335_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_3_reg_643 : STD_LOGIC_VECTOR (21 downto 0);
    signal index_fu_420_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal index_reg_648 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln144_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln135_fu_117_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_fu_229_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_fu_117_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_1_fu_121_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_1_fu_250_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_1_fu_121_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_2_fu_125_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_2_fu_271_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_2_fu_125_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_3_fu_129_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_3_fu_292_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_3_fu_129_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_4_fu_133_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_4_fu_313_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_4_fu_133_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_2_fu_183_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_3_fu_189_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_1_fu_177_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_fu_195_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln73_fu_205_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln73_fu_205_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln130_fu_221_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_fu_117_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_1_fu_121_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_2_fu_125_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_3_fu_129_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_4_fu_133_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal diff_3_fu_298_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal diff_4_fu_319_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_2_fu_329_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal diff_2_fu_277_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_1_fu_341_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_fu_345_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln73_1_fu_354_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln73_1_fu_354_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_1_fu_360_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_fu_382_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_392_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln140_fu_370_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln140_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln140_fu_406_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_fu_374_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln140_fu_412_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln140_1_fu_428_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_3_fu_431_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_1_fu_439_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_fu_450_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln143_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln140_fu_446_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal index_2_fu_466_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln149_fu_486_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln149_fu_479_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln149_fu_486_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln149_1_fu_499_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln149_1_fu_499_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln149_2_fu_512_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln149_2_fu_512_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln149_3_fu_525_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln149_3_fu_525_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln149_4_fu_538_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln149_4_fu_538_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln149_1_fu_492_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln149_3_fu_505_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln149_5_fu_518_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln149_7_fu_531_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln151_fu_544_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_22s_22s_38_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component myproject_mul_22s_15ns_37_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;


    component myproject_mul_22s_9ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    invert_sqr_table_U : component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb
    generic map (
        DataWidth => 9,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_sqr_table_address0,
        ce0 => invert_sqr_table_ce0,
        q0 => invert_sqr_table_q0);

    mul_22s_22s_38_1_1_U1 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_fu_117_p0,
        din1 => mul_ln135_fu_117_p1,
        dout => mul_ln135_fu_117_p2);

    mul_22s_22s_38_1_1_U2 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_1_fu_121_p0,
        din1 => mul_ln135_1_fu_121_p1,
        dout => mul_ln135_1_fu_121_p2);

    mul_22s_22s_38_1_1_U3 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_2_fu_125_p0,
        din1 => mul_ln135_2_fu_125_p1,
        dout => mul_ln135_2_fu_125_p2);

    mul_22s_22s_38_1_1_U4 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_3_fu_129_p0,
        din1 => mul_ln135_3_fu_129_p1,
        dout => mul_ln135_3_fu_129_p2);

    mul_22s_22s_38_1_1_U5 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_4_fu_133_p0,
        din1 => mul_ln135_4_fu_133_p1,
        dout => mul_ln135_4_fu_133_p2);

    mul_22s_15ns_37_1_1_U6 : component myproject_mul_22s_15ns_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 15,
        dout_WIDTH => 37)
    port map (
        din0 => add_ln128_fu_195_p2,
        din1 => mul_ln73_fu_205_p1,
        dout => mul_ln73_fu_205_p2);

    mul_22s_15ns_37_1_1_U7 : component myproject_mul_22s_15ns_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 15,
        dout_WIDTH => 37)
    port map (
        din0 => add_ln136_fu_345_p2,
        din1 => mul_ln73_1_fu_354_p1,
        dout => mul_ln73_1_fu_354_p2);

    mul_22s_9ns_31_1_1_U8 : component myproject_mul_22s_9ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 9,
        dout_WIDTH => 31)
    port map (
        din0 => sub_ln134_reg_608_pp0_iter3_reg,
        din1 => mul_ln149_fu_486_p1,
        dout => mul_ln149_fu_486_p2);

    mul_22s_9ns_31_1_1_U9 : component myproject_mul_22s_9ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 9,
        dout_WIDTH => 31)
    port map (
        din0 => sub_ln134_1_reg_618_pp0_iter3_reg,
        din1 => mul_ln149_1_fu_499_p1,
        dout => mul_ln149_1_fu_499_p2);

    mul_22s_9ns_31_1_1_U10 : component myproject_mul_22s_9ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 9,
        dout_WIDTH => 31)
    port map (
        din0 => sub_ln134_2_reg_628_pp0_iter3_reg,
        din1 => mul_ln149_2_fu_512_p1,
        dout => mul_ln149_2_fu_512_p2);

    mul_22s_9ns_31_1_1_U11 : component myproject_mul_22s_9ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 9,
        dout_WIDTH => 31)
    port map (
        din0 => sub_ln134_3_reg_633_pp0_iter3_reg,
        din1 => mul_ln149_3_fu_525_p1,
        dout => mul_ln149_3_fu_525_p2);

    mul_22s_9ns_31_1_1_U12 : component myproject_mul_22s_9ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 9,
        dout_WIDTH => 31)
    port map (
        din0 => sub_ln134_4_reg_638_pp0_iter3_reg,
        din1 => mul_ln149_4_fu_538_p1,
        dout => mul_ln149_4_fu_538_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln136_3_reg_643 <= add_ln136_3_fu_335_p2;
                diff_5_reg_613 <= mul_ln135_fu_117_p2(37 downto 16);
                diff_reg_623 <= mul_ln135_1_fu_121_p2(37 downto 16);
                mean_reg_603 <= mul_ln73_fu_205_p2(36 downto 16);
                    shl_ln128_1_reg_588(21 downto 6) <= shl_ln128_1_fu_153_p3(21 downto 6);
                    shl_ln128_2_reg_593(21 downto 6) <= shl_ln128_2_fu_161_p3(21 downto 6);
                    shl_ln128_3_reg_598(21 downto 6) <= shl_ln128_3_fu_169_p3(21 downto 6);
                    shl_ln_reg_583(21 downto 6) <= shl_ln_fu_145_p3(21 downto 6);
                sub_ln134_1_reg_618 <= sub_ln134_1_fu_245_p2;
                sub_ln134_2_reg_628 <= sub_ln134_2_fu_266_p2;
                sub_ln134_3_reg_633 <= sub_ln134_3_fu_287_p2;
                sub_ln134_4_reg_638 <= sub_ln134_4_fu_308_p2;
                sub_ln134_reg_608 <= sub_ln134_fu_224_p2;
                    sum_cache_reg_578(21 downto 6) <= sum_cache_fu_137_p3(21 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                index_reg_648 <= index_fu_420_p3;
                sub_ln134_1_reg_618_pp0_iter2_reg <= sub_ln134_1_reg_618;
                sub_ln134_1_reg_618_pp0_iter3_reg <= sub_ln134_1_reg_618_pp0_iter2_reg;
                sub_ln134_2_reg_628_pp0_iter2_reg <= sub_ln134_2_reg_628;
                sub_ln134_2_reg_628_pp0_iter3_reg <= sub_ln134_2_reg_628_pp0_iter2_reg;
                sub_ln134_3_reg_633_pp0_iter2_reg <= sub_ln134_3_reg_633;
                sub_ln134_3_reg_633_pp0_iter3_reg <= sub_ln134_3_reg_633_pp0_iter2_reg;
                sub_ln134_4_reg_638_pp0_iter2_reg <= sub_ln134_4_reg_638;
                sub_ln134_4_reg_638_pp0_iter3_reg <= sub_ln134_4_reg_638_pp0_iter2_reg;
                sub_ln134_reg_608_pp0_iter2_reg <= sub_ln134_reg_608;
                sub_ln134_reg_608_pp0_iter3_reg <= sub_ln134_reg_608_pp0_iter2_reg;
            end if;
        end if;
    end process;
    sum_cache_reg_578(5 downto 0) <= "000000";
    shl_ln_reg_583(5 downto 0) <= "000000";
    shl_ln128_1_reg_588(5 downto 0) <= "000000";
    shl_ln128_2_reg_593(5 downto 0) <= "000000";
    shl_ln128_3_reg_598(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln128_1_fu_177_p2 <= std_logic_vector(unsigned(shl_ln_fu_145_p3) + unsigned(sum_cache_fu_137_p3));
    add_ln128_2_fu_183_p2 <= std_logic_vector(unsigned(shl_ln128_2_fu_161_p3) + unsigned(shl_ln128_3_fu_169_p3));
    add_ln128_3_fu_189_p2 <= std_logic_vector(unsigned(add_ln128_2_fu_183_p2) + unsigned(shl_ln128_1_fu_153_p3));
    add_ln128_fu_195_p2 <= std_logic_vector(unsigned(add_ln128_3_fu_189_p2) + unsigned(add_ln128_1_fu_177_p2));
    add_ln136_1_fu_341_p2 <= std_logic_vector(unsigned(diff_5_reg_613) + unsigned(diff_reg_623));
    add_ln136_2_fu_329_p2 <= std_logic_vector(unsigned(diff_3_fu_298_p4) + unsigned(diff_4_fu_319_p4));
    add_ln136_3_fu_335_p2 <= std_logic_vector(unsigned(add_ln136_2_fu_329_p2) + unsigned(diff_2_fu_277_p4));
    add_ln136_fu_345_p2 <= std_logic_vector(unsigned(add_ln136_3_reg_643) + unsigned(add_ln136_1_fu_341_p2));
    add_ln140_fu_406_p2 <= std_logic_vector(signed(sext_ln140_fu_370_p1) + signed(ap_const_lv20_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= sext_ln149_1_fu_492_p1;
    ap_return_1 <= sext_ln149_3_fu_505_p1;
    ap_return_2 <= sext_ln149_5_fu_518_p1;
    ap_return_3 <= sext_ln149_7_fu_531_p1;
    ap_return_4 <= sext_ln151_fu_544_p1;
    diff_2_fu_277_p4 <= mul_ln135_2_fu_125_p2(37 downto 16);
    diff_3_fu_298_p4 <= mul_ln135_3_fu_129_p2(37 downto 16);
    diff_4_fu_319_p4 <= mul_ln135_4_fu_133_p2(37 downto 16);
    icmp_ln140_fu_400_p2 <= "1" when (tmp_s_fu_392_p3 = ap_const_lv16_0) else "0";
    icmp_ln143_fu_460_p2 <= "0" when (tmp_4_fu_450_p4 = ap_const_lv6_0) else "1";
    index_1_fu_439_p3 <= 
        ap_const_lv20_0 when (tmp_3_fu_431_p3(0) = '1') else 
        index_reg_648;
    index_2_fu_466_p3 <= 
        ap_const_lv14_3FFF when (icmp_ln143_fu_460_p2(0) = '1') else 
        trunc_ln140_fu_446_p1;
    index_fu_420_p3 <= 
        select_ln140_fu_412_p3 when (tmp_2_fu_374_p3(0) = '1') else 
        sext_ln140_fu_370_p1;
    invert_sqr_table_address0 <= zext_ln144_fu_474_p1(14 - 1 downto 0);

    invert_sqr_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            invert_sqr_table_ce0 <= ap_const_logic_1;
        else 
            invert_sqr_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln135_1_fu_121_p0 <= sext_ln135_1_fu_250_p1(22 - 1 downto 0);
    mul_ln135_1_fu_121_p1 <= sext_ln135_1_fu_250_p1(22 - 1 downto 0);
    mul_ln135_2_fu_125_p0 <= sext_ln135_2_fu_271_p1(22 - 1 downto 0);
    mul_ln135_2_fu_125_p1 <= sext_ln135_2_fu_271_p1(22 - 1 downto 0);
    mul_ln135_3_fu_129_p0 <= sext_ln135_3_fu_292_p1(22 - 1 downto 0);
    mul_ln135_3_fu_129_p1 <= sext_ln135_3_fu_292_p1(22 - 1 downto 0);
    mul_ln135_4_fu_133_p0 <= sext_ln135_4_fu_313_p1(22 - 1 downto 0);
    mul_ln135_4_fu_133_p1 <= sext_ln135_4_fu_313_p1(22 - 1 downto 0);
    mul_ln135_fu_117_p0 <= sext_ln135_fu_229_p1(22 - 1 downto 0);
    mul_ln135_fu_117_p1 <= sext_ln135_fu_229_p1(22 - 1 downto 0);
    mul_ln149_1_fu_499_p1 <= zext_ln149_fu_479_p1(9 - 1 downto 0);
    mul_ln149_2_fu_512_p1 <= zext_ln149_fu_479_p1(9 - 1 downto 0);
    mul_ln149_3_fu_525_p1 <= zext_ln149_fu_479_p1(9 - 1 downto 0);
    mul_ln149_4_fu_538_p1 <= zext_ln149_fu_479_p1(9 - 1 downto 0);
    mul_ln149_fu_486_p1 <= zext_ln149_fu_479_p1(9 - 1 downto 0);
    mul_ln73_1_fu_354_p1 <= ap_const_lv37_3333(15 - 1 downto 0);
    mul_ln73_fu_205_p1 <= ap_const_lv37_3333(15 - 1 downto 0);
    select_ln140_fu_412_p3 <= 
        sext_ln140_fu_370_p1 when (icmp_ln140_fu_400_p2(0) = '1') else 
        add_ln140_fu_406_p2;
        sext_ln130_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mean_reg_603),22));

        sext_ln135_1_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_1_fu_245_p2),38));

        sext_ln135_2_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_2_fu_266_p2),38));

        sext_ln135_3_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_3_fu_287_p2),38));

        sext_ln135_4_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_4_fu_308_p2),38));

        sext_ln135_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_fu_224_p2),38));

        sext_ln140_1_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_reg_648),21));

        sext_ln140_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_360_p4),20));

        sext_ln149_1_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln149_fu_486_p2),33));

        sext_ln149_3_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln149_1_fu_499_p2),33));

        sext_ln149_5_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln149_2_fu_512_p2),33));

        sext_ln149_7_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln149_3_fu_525_p2),33));

        sext_ln151_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln149_4_fu_538_p2),33));

    shl_ln128_1_fu_153_p3 <= (data_2_val & ap_const_lv6_0);
    shl_ln128_2_fu_161_p3 <= (data_3_val & ap_const_lv6_0);
    shl_ln128_3_fu_169_p3 <= (data_4_val & ap_const_lv6_0);
    shl_ln_fu_145_p3 <= (data_1_val & ap_const_lv6_0);
    sub_ln134_1_fu_245_p2 <= std_logic_vector(unsigned(shl_ln_reg_583) - unsigned(sext_ln130_fu_221_p1));
    sub_ln134_2_fu_266_p2 <= std_logic_vector(unsigned(shl_ln128_1_reg_588) - unsigned(sext_ln130_fu_221_p1));
    sub_ln134_3_fu_287_p2 <= std_logic_vector(unsigned(shl_ln128_2_reg_593) - unsigned(sext_ln130_fu_221_p1));
    sub_ln134_4_fu_308_p2 <= std_logic_vector(unsigned(shl_ln128_3_reg_598) - unsigned(sext_ln130_fu_221_p1));
    sub_ln134_fu_224_p2 <= std_logic_vector(unsigned(sum_cache_reg_578) - unsigned(sext_ln130_fu_221_p1));
    sum_cache_fu_137_p3 <= (data_0_val & ap_const_lv6_0);
    tmp_1_fu_360_p4 <= mul_ln73_1_fu_354_p2(36 downto 18);
    tmp_2_fu_374_p3 <= mul_ln73_1_fu_354_p2(36 downto 36);
    tmp_3_fu_431_p3 <= sext_ln140_1_fu_428_p1(20 downto 20);
    tmp_4_fu_450_p4 <= index_1_fu_439_p3(19 downto 14);
    tmp_fu_382_p4 <= mul_ln73_1_fu_354_p2(17 downto 16);
    tmp_s_fu_392_p3 <= (tmp_fu_382_p4 & ap_const_lv14_0);
    trunc_ln140_fu_446_p1 <= index_1_fu_439_p3(14 - 1 downto 0);
    zext_ln144_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_2_fu_466_p3),64));
    zext_ln149_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invert_sqr_table_q0),31));
end behav;
