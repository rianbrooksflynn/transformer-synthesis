-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (32 downto 0) );
end;


architecture behav of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv37_3333 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000011001100110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal invert_sqr_table_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal invert_sqr_table_ce0 : STD_LOGIC;
    signal invert_sqr_table_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_115_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln_reg_571 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_1_fu_123_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_1_reg_576 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_2_fu_131_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_2_reg_581 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_3_fu_139_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_3_reg_586 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_4_fu_147_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_4_reg_591 : STD_LOGIC_VECTOR (21 downto 0);
    signal mean_V_reg_596 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln703_fu_195_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_reg_601 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_reg_601_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_reg_601_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln_reg_606 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_1_fu_220_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_1_reg_611 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_1_reg_611_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_1_reg_611_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_1_reg_616 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_2_fu_245_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_2_reg_621 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_2_reg_621_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_2_reg_621_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_3_fu_270_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_3_reg_626 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_3_reg_626_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_3_reg_626_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_4_fu_295_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_4_reg_631 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_4_reg_631_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln703_4_reg_631_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_6_fu_326_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_6_reg_636 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_1_fu_528_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal r_V_1_reg_641 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_reg_646 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln851_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln851_reg_651 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln144_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_1_fu_161_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_2_fu_167_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_fu_155_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_3_fu_173_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_fu_521_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln708_fu_192_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_fu_204_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_1_fu_200_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_fu_204_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_fu_204_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_1_fu_229_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_2_fu_225_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_1_fu_229_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_1_fu_229_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_2_fu_254_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_3_fu_250_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_2_fu_254_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_2_fu_254_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_3_fu_279_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_4_fu_275_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_3_fu_279_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_3_fu_279_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_4_fu_304_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_5_fu_300_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_4_fu_304_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_4_fu_304_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln708_3_fu_285_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_4_fu_310_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_5_fu_320_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_2_fu_260_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_4_fu_332_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_7_fu_336_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_fu_354_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_2_fu_363_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln850_fu_377_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln695_fu_387_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_fu_380_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln850_fu_393_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal index_fu_400_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_1_fu_416_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_fu_428_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln143_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln140_fu_424_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal index_2_fu_444_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1118_fu_536_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1118_1_fu_543_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1118_2_fu_550_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1118_3_fu_557_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1118_4_fu_564_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1116_fu_464_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1116_1_fu_470_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1116_2_fu_476_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1116_3_fu_482_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln151_fu_488_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_fu_521_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_1_fu_528_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1118_fu_536_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_fu_457_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1118_1_fu_543_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_2_fu_550_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_3_fu_557_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_4_fu_564_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_reset_start_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_22s_22s_38_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component myproject_mul_mul_15ns_22s_37_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;


    component myproject_mul_mul_22s_9ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    invert_sqr_table_U : component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb
    generic map (
        DataWidth => 9,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_sqr_table_address0,
        ce0 => invert_sqr_table_ce0,
        q0 => invert_sqr_table_q0);

    mul_22s_22s_38_1_1_U1 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_fu_204_p0,
        din1 => mul_ln708_fu_204_p1,
        dout => mul_ln708_fu_204_p2);

    mul_22s_22s_38_1_1_U2 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_1_fu_229_p0,
        din1 => mul_ln708_1_fu_229_p1,
        dout => mul_ln708_1_fu_229_p2);

    mul_22s_22s_38_1_1_U3 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_2_fu_254_p0,
        din1 => mul_ln708_2_fu_254_p1,
        dout => mul_ln708_2_fu_254_p2);

    mul_22s_22s_38_1_1_U4 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_3_fu_279_p0,
        din1 => mul_ln708_3_fu_279_p1,
        dout => mul_ln708_3_fu_279_p2);

    mul_22s_22s_38_1_1_U5 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_4_fu_304_p0,
        din1 => mul_ln708_4_fu_304_p1,
        dout => mul_ln708_4_fu_304_p2);

    mul_mul_15ns_22s_37_1_1_U6 : component myproject_mul_mul_15ns_22s_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 22,
        dout_WIDTH => 37)
    port map (
        din0 => r_V_fu_521_p0,
        din1 => add_ln703_3_fu_173_p2,
        dout => r_V_fu_521_p2);

    mul_mul_15ns_22s_37_1_1_U7 : component myproject_mul_mul_15ns_22s_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 22,
        dout_WIDTH => 37)
    port map (
        din0 => r_V_1_fu_528_p0,
        din1 => add_ln703_7_fu_336_p2,
        dout => r_V_1_fu_528_p2);

    mul_mul_22s_9ns_31_1_1_U8 : component myproject_mul_mul_22s_9ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 9,
        dout_WIDTH => 31)
    port map (
        din0 => sub_ln703_reg_601_pp0_iter3_reg,
        din1 => mul_ln1118_fu_536_p1,
        dout => mul_ln1118_fu_536_p2);

    mul_mul_22s_9ns_31_1_1_U9 : component myproject_mul_mul_22s_9ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 9,
        dout_WIDTH => 31)
    port map (
        din0 => sub_ln703_1_reg_611_pp0_iter3_reg,
        din1 => mul_ln1118_1_fu_543_p1,
        dout => mul_ln1118_1_fu_543_p2);

    mul_mul_22s_9ns_31_1_1_U10 : component myproject_mul_mul_22s_9ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 9,
        dout_WIDTH => 31)
    port map (
        din0 => sub_ln703_2_reg_621_pp0_iter3_reg,
        din1 => mul_ln1118_2_fu_550_p1,
        dout => mul_ln1118_2_fu_550_p2);

    mul_mul_22s_9ns_31_1_1_U11 : component myproject_mul_mul_22s_9ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 9,
        dout_WIDTH => 31)
    port map (
        din0 => sub_ln703_3_reg_626_pp0_iter3_reg,
        din1 => mul_ln1118_3_fu_557_p1,
        dout => mul_ln1118_3_fu_557_p2);

    mul_mul_22s_9ns_31_1_1_U12 : component myproject_mul_mul_22s_9ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 9,
        dout_WIDTH => 31)
    port map (
        din0 => sub_ln703_4_reg_631_pp0_iter3_reg,
        din1 => mul_ln1118_4_fu_564_p1,
        dout => mul_ln1118_4_fu_564_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln703_6_reg_636 <= add_ln703_6_fu_326_p2;
                mean_V_reg_596 <= r_V_fu_521_p2(36 downto 16);
                    shl_ln728_1_reg_576(21 downto 6) <= shl_ln728_1_fu_123_p3(21 downto 6);
                    shl_ln728_2_reg_581(21 downto 6) <= shl_ln728_2_fu_131_p3(21 downto 6);
                    shl_ln728_3_reg_586(21 downto 6) <= shl_ln728_3_fu_139_p3(21 downto 6);
                    shl_ln728_4_reg_591(21 downto 6) <= shl_ln728_4_fu_147_p3(21 downto 6);
                    shl_ln_reg_571(21 downto 6) <= shl_ln_fu_115_p3(21 downto 6);
                sub_ln703_1_reg_611 <= sub_ln703_1_fu_220_p2;
                sub_ln703_2_reg_621 <= sub_ln703_2_fu_245_p2;
                sub_ln703_3_reg_626 <= sub_ln703_3_fu_270_p2;
                sub_ln703_4_reg_631 <= sub_ln703_4_fu_295_p2;
                sub_ln703_reg_601 <= sub_ln703_fu_195_p2;
                trunc_ln708_1_reg_616 <= mul_ln708_1_fu_229_p2(37 downto 16);
                trunc_ln_reg_606 <= mul_ln708_fu_204_p2(37 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                icmp_ln851_reg_651 <= icmp_ln851_fu_371_p2;
                r_V_1_reg_641 <= r_V_1_fu_528_p2;
                sub_ln703_1_reg_611_pp0_iter2_reg <= sub_ln703_1_reg_611;
                sub_ln703_1_reg_611_pp0_iter3_reg <= sub_ln703_1_reg_611_pp0_iter2_reg;
                sub_ln703_2_reg_621_pp0_iter2_reg <= sub_ln703_2_reg_621;
                sub_ln703_2_reg_621_pp0_iter3_reg <= sub_ln703_2_reg_621_pp0_iter2_reg;
                sub_ln703_3_reg_626_pp0_iter2_reg <= sub_ln703_3_reg_626;
                sub_ln703_3_reg_626_pp0_iter3_reg <= sub_ln703_3_reg_626_pp0_iter2_reg;
                sub_ln703_4_reg_631_pp0_iter2_reg <= sub_ln703_4_reg_631;
                sub_ln703_4_reg_631_pp0_iter3_reg <= sub_ln703_4_reg_631_pp0_iter2_reg;
                sub_ln703_reg_601_pp0_iter2_reg <= sub_ln703_reg_601;
                sub_ln703_reg_601_pp0_iter3_reg <= sub_ln703_reg_601_pp0_iter2_reg;
                tmp_reg_646 <= r_V_1_fu_528_p2(36 downto 18);
            end if;
        end if;
    end process;
    shl_ln_reg_571(5 downto 0) <= "000000";
    shl_ln728_1_reg_576(5 downto 0) <= "000000";
    shl_ln728_2_reg_581(5 downto 0) <= "000000";
    shl_ln728_3_reg_586(5 downto 0) <= "000000";
    shl_ln728_4_reg_591(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_reset_start_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln695_fu_387_p2 <= std_logic_vector(unsigned(ap_const_lv20_1) + unsigned(sext_ln850_fu_377_p1));
    add_ln703_1_fu_161_p2 <= std_logic_vector(unsigned(shl_ln728_3_fu_139_p3) + unsigned(shl_ln728_4_fu_147_p3));
    add_ln703_2_fu_167_p2 <= std_logic_vector(unsigned(add_ln703_1_fu_161_p2) + unsigned(shl_ln728_2_fu_131_p3));
    add_ln703_3_fu_173_p2 <= std_logic_vector(unsigned(add_ln703_2_fu_167_p2) + unsigned(add_ln703_fu_155_p2));
    add_ln703_4_fu_332_p2 <= std_logic_vector(unsigned(trunc_ln708_1_reg_616) + unsigned(trunc_ln_reg_606));
    add_ln703_5_fu_320_p2 <= std_logic_vector(unsigned(trunc_ln708_3_fu_285_p4) + unsigned(trunc_ln708_4_fu_310_p4));
    add_ln703_6_fu_326_p2 <= std_logic_vector(unsigned(add_ln703_5_fu_320_p2) + unsigned(trunc_ln708_2_fu_260_p4));
    add_ln703_7_fu_336_p2 <= std_logic_vector(unsigned(add_ln703_6_reg_636) + unsigned(add_ln703_4_fu_332_p2));
    add_ln703_fu_155_p2 <= std_logic_vector(unsigned(shl_ln728_1_fu_123_p3) + unsigned(shl_ln_fu_115_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_start_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_start_pp0 <= ap_const_logic_1;
        else 
            ap_reset_start_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= sext_ln1116_fu_464_p1;
    ap_return_1 <= sext_ln1116_1_fu_470_p1;
    ap_return_2 <= sext_ln1116_2_fu_476_p1;
    ap_return_3 <= sext_ln1116_3_fu_482_p1;
    ap_return_4 <= sext_ln151_fu_488_p1;
    icmp_ln143_fu_438_p2 <= "0" when (tmp_4_fu_428_p4 = ap_const_lv6_0) else "1";
    icmp_ln851_fu_371_p2 <= "0" when (p_Result_2_fu_363_p3 = ap_const_lv16_0) else "1";
    index_1_fu_416_p3 <= 
        ap_const_lv20_0 when (tmp_3_fu_408_p3(0) = '1') else 
        index_fu_400_p3;
    index_2_fu_444_p3 <= 
        ap_const_lv14_3FFF when (icmp_ln143_fu_438_p2(0) = '1') else 
        trunc_ln140_fu_424_p1;
    index_fu_400_p3 <= 
        select_ln850_fu_393_p3 when (tmp_2_fu_380_p3(0) = '1') else 
        sext_ln850_fu_377_p1;
    invert_sqr_table_address0 <= zext_ln144_fu_452_p1(14 - 1 downto 0);

    invert_sqr_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            invert_sqr_table_ce0 <= ap_const_logic_1;
        else 
            invert_sqr_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_1_fu_543_p1 <= zext_ln1116_fu_457_p1(9 - 1 downto 0);
    mul_ln1118_2_fu_550_p1 <= zext_ln1116_fu_457_p1(9 - 1 downto 0);
    mul_ln1118_3_fu_557_p1 <= zext_ln1116_fu_457_p1(9 - 1 downto 0);
    mul_ln1118_4_fu_564_p1 <= zext_ln1116_fu_457_p1(9 - 1 downto 0);
    mul_ln1118_fu_536_p1 <= zext_ln1116_fu_457_p1(9 - 1 downto 0);
    mul_ln708_1_fu_229_p0 <= sext_ln1118_2_fu_225_p1(22 - 1 downto 0);
    mul_ln708_1_fu_229_p1 <= sext_ln1118_2_fu_225_p1(22 - 1 downto 0);
    mul_ln708_2_fu_254_p0 <= sext_ln1118_3_fu_250_p1(22 - 1 downto 0);
    mul_ln708_2_fu_254_p1 <= sext_ln1118_3_fu_250_p1(22 - 1 downto 0);
    mul_ln708_3_fu_279_p0 <= sext_ln1118_4_fu_275_p1(22 - 1 downto 0);
    mul_ln708_3_fu_279_p1 <= sext_ln1118_4_fu_275_p1(22 - 1 downto 0);
    mul_ln708_4_fu_304_p0 <= sext_ln1118_5_fu_300_p1(22 - 1 downto 0);
    mul_ln708_4_fu_304_p1 <= sext_ln1118_5_fu_300_p1(22 - 1 downto 0);
    mul_ln708_fu_204_p0 <= sext_ln1118_1_fu_200_p1(22 - 1 downto 0);
    mul_ln708_fu_204_p1 <= sext_ln1118_1_fu_200_p1(22 - 1 downto 0);
    p_Result_2_fu_363_p3 <= (tmp_1_fu_354_p4 & ap_const_lv14_0);
    r_V_1_fu_528_p0 <= ap_const_lv37_3333(15 - 1 downto 0);
    r_V_fu_521_p0 <= ap_const_lv37_3333(15 - 1 downto 0);
    select_ln850_fu_393_p3 <= 
        add_ln695_fu_387_p2 when (icmp_ln851_reg_651(0) = '1') else 
        sext_ln850_fu_377_p1;
        sext_ln1116_1_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_1_fu_543_p2),33));

        sext_ln1116_2_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_2_fu_550_p2),33));

        sext_ln1116_3_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_3_fu_557_p2),33));

        sext_ln1116_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_fu_536_p2),33));

        sext_ln1118_1_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_fu_195_p2),38));

        sext_ln1118_2_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_1_fu_220_p2),38));

        sext_ln1118_3_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_2_fu_245_p2),38));

        sext_ln1118_4_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_3_fu_270_p2),38));

        sext_ln1118_5_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_4_fu_295_p2),38));

        sext_ln151_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_4_fu_564_p2),33));

        sext_ln708_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mean_V_reg_596),22));

        sext_ln850_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_646),20));

    shl_ln728_1_fu_123_p3 <= (p_read1 & ap_const_lv6_0);
    shl_ln728_2_fu_131_p3 <= (p_read2 & ap_const_lv6_0);
    shl_ln728_3_fu_139_p3 <= (p_read3 & ap_const_lv6_0);
    shl_ln728_4_fu_147_p3 <= (p_read4 & ap_const_lv6_0);
    shl_ln_fu_115_p3 <= (p_read & ap_const_lv6_0);
    sub_ln703_1_fu_220_p2 <= std_logic_vector(unsigned(shl_ln728_1_reg_576) - unsigned(sext_ln708_fu_192_p1));
    sub_ln703_2_fu_245_p2 <= std_logic_vector(unsigned(shl_ln728_2_reg_581) - unsigned(sext_ln708_fu_192_p1));
    sub_ln703_3_fu_270_p2 <= std_logic_vector(unsigned(shl_ln728_3_reg_586) - unsigned(sext_ln708_fu_192_p1));
    sub_ln703_4_fu_295_p2 <= std_logic_vector(unsigned(shl_ln728_4_reg_591) - unsigned(sext_ln708_fu_192_p1));
    sub_ln703_fu_195_p2 <= std_logic_vector(unsigned(shl_ln_reg_571) - unsigned(sext_ln708_fu_192_p1));
    tmp_1_fu_354_p4 <= r_V_1_fu_528_p2(17 downto 16);
    tmp_2_fu_380_p3 <= r_V_1_reg_641(36 downto 36);
    tmp_3_fu_408_p3 <= index_fu_400_p3(19 downto 19);
    tmp_4_fu_428_p4 <= index_1_fu_416_p3(19 downto 14);
    trunc_ln140_fu_424_p1 <= index_1_fu_416_p3(14 - 1 downto 0);
    trunc_ln708_2_fu_260_p4 <= mul_ln708_2_fu_254_p2(37 downto 16);
    trunc_ln708_3_fu_285_p4 <= mul_ln708_3_fu_279_p2(37 downto 16);
    trunc_ln708_4_fu_310_p4 <= mul_ln708_4_fu_304_p2(37 downto 16);
    zext_ln1116_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invert_sqr_table_q0),31));
    zext_ln144_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_2_fu_444_p3),64));
end behav;
