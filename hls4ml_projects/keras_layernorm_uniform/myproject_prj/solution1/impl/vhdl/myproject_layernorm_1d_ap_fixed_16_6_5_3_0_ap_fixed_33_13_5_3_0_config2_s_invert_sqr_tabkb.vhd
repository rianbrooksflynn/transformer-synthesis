-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb_rom is 
    generic(
             DWIDTH     : integer := 9; 
             AWIDTH     : integer := 14; 
             MEM_SIZE    : integer := 16384
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "111111001", 1 => "111101011", 2 => "111011101", 3 => "111010001", 
    4 => "111000101", 5 => "110111010", 6 => "110110000", 7 => "110100111", 
    8 => "110011110", 9 => "110010110", 10 => "110001110", 11 => "110000111", 
    12 => "110000000", 13 => "101111001", 14 => "101110011", 15 => "101101101", 
    16 => "101100111", 17 => "101100010", 18 => "101011101", 19 => "101011000", 
    20 => "101010011", 21 => "101001110", 22 => "101001010", 23 => "101000110", 
    24 => "101000010", 25 => "100111110", 26 => "100111010", 27 => "100110110", 
    28 => "100110011", 29 => "100110000", 30 => "100101100", 31 => "100101001", 
    32 => "100100110", 33 => "100100011", 34 => "100100000", 35 => "100011101", 
    36 => "100011010", 37 => "100011000", 38 => "100010101", 39 => "100010011", 
    40 => "100010000", 41 => "100001110", 42 => "100001100", 43 => "100001001", 
    44 => "100000111", 45 => "100000101", 46 => "100000011", 47 => "100000001", 
    48 => "011111111", 49 => "011111101", 50 => "011111011", 51 => "011111001", 
    52 => "011110111", 53 => "011110101", 54 => "011110100", 55 => "011110010", 
    56 => "011110000", 57 => "011101111", 58 => "011101101", 59 => "011101011", 
    60 => "011101010", 61 => "011101000", 62 => "011100111", 63 => "011100101", 
    64 => "011100100", 65 => "011100011", 66 => "011100001", 67 => "011100000", 
    68 => "011011110", 69 => "011011101", 70 => "011011100", 71 => "011011011", 
    72 => "011011001", 73 => "011011000", 74 => "011010111", 75 => "011010110", 
    76 => "011010101", 77 => "011010011", 78 => "011010010", 79 => "011010001", 
    80 => "011010000", 81 => "011001111", 82 => "011001110", 83 => "011001101", 
    84 => "011001100", 85 => "011001011", 86 => "011001010", 87 => "011001001", 
    88 => "011001000", 89 => "011000111", 90 => "011000110", 91 => "011000101", 
    92 => "011000100", 93 => "011000011", 94 to 95=> "011000010", 96 => "011000001", 
    97 => "011000000", 98 => "010111111", 99 => "010111110", 100 to 101=> "010111101", 
    102 => "010111100", 103 => "010111011", 104 => "010111010", 105 to 106=> "010111001", 
    107 => "010111000", 108 => "010110111", 109 to 110=> "010110110", 111 => "010110101", 
    112 to 113=> "010110100", 114 => "010110011", 115 => "010110010", 116 to 117=> "010110001", 
    118 to 119=> "010110000", 120 => "010101111", 121 to 122=> "010101110", 123 => "010101101", 
    124 to 125=> "010101100", 126 to 127=> "010101011", 128 => "010101010", 129 to 130=> "010101001", 
    131 to 132=> "010101000", 133 to 134=> "010100111", 135 => "010100110", 136 to 137=> "010100101", 
    138 to 139=> "010100100", 140 to 141=> "010100011", 142 to 143=> "010100010", 144 to 145=> "010100001", 
    146 to 147=> "010100000", 148 to 149=> "010011111", 150 to 151=> "010011110", 152 to 153=> "010011101", 
    154 to 155=> "010011100", 156 to 158=> "010011011", 159 to 160=> "010011010", 161 to 162=> "010011001", 
    163 to 165=> "010011000", 166 to 167=> "010010111", 168 to 170=> "010010110", 171 to 172=> "010010101", 
    173 to 175=> "010010100", 176 to 177=> "010010011", 178 to 180=> "010010010", 181 to 183=> "010010001", 
    184 to 185=> "010010000", 186 to 188=> "010001111", 189 to 191=> "010001110", 192 to 194=> "010001101", 
    195 to 197=> "010001100", 198 to 200=> "010001011", 201 to 203=> "010001010", 204 to 207=> "010001001", 
    208 to 210=> "010001000", 211 to 213=> "010000111", 214 to 217=> "010000110", 218 to 220=> "010000101", 
    221 to 224=> "010000100", 225 to 228=> "010000011", 229 to 231=> "010000010", 232 to 235=> "010000001", 
    236 to 239=> "010000000", 240 to 243=> "001111111", 244 to 247=> "001111110", 248 to 252=> "001111101", 
    253 to 256=> "001111100", 257 to 260=> "001111011", 261 to 265=> "001111010", 266 to 270=> "001111001", 
    271 to 274=> "001111000", 275 to 279=> "001110111", 280 to 284=> "001110110", 285 to 290=> "001110101", 
    291 to 295=> "001110100", 296 to 300=> "001110011", 301 to 306=> "001110010", 307 to 312=> "001110001", 
    313 to 317=> "001110000", 318 to 324=> "001101111", 325 to 330=> "001101110", 331 to 336=> "001101101", 
    337 to 343=> "001101100", 344 to 349=> "001101011", 350 to 356=> "001101010", 357 to 364=> "001101001", 
    365 to 371=> "001101000", 372 to 378=> "001100111", 379 to 386=> "001100110", 387 to 394=> "001100101", 
    395 to 403=> "001100100", 404 to 411=> "001100011", 412 to 420=> "001100010", 421 to 429=> "001100001", 
    430 to 438=> "001100000", 439 to 448=> "001011111", 449 to 458=> "001011110", 459 to 468=> "001011101", 
    469 to 479=> "001011100", 480 to 490=> "001011011", 491 to 501=> "001011010", 502 to 513=> "001011001", 
    514 to 525=> "001011000", 526 to 537=> "001010111", 538 to 550=> "001010110", 551 to 564=> "001010101", 
    565 to 578=> "001010100", 579 to 592=> "001010011", 593 to 607=> "001010010", 608 to 622=> "001010001", 
    623 to 638=> "001010000", 639 to 655=> "001001111", 656 to 673=> "001001110", 674 to 691=> "001001101", 
    692 to 709=> "001001100", 710 to 729=> "001001011", 730 to 749=> "001001010", 750 to 770=> "001001001", 
    771 to 792=> "001001000", 793 to 815=> "001000111", 816 to 839=> "001000110", 840 to 864=> "001000101", 
    865 to 890=> "001000100", 891 to 917=> "001000011", 918 to 946=> "001000010", 947 to 976=> "001000001", 
    977 to 1007=> "001000000", 1008 to 1040=> "000111111", 1041 to 1074=> "000111110", 1075 to 1110=> "000111101", 
    1111 to 1148=> "000111100", 1149 to 1188=> "000111011", 1189 to 1230=> "000111010", 1231 to 1274=> "000111001", 
    1275 to 1321=> "000111000", 1322 to 1370=> "000110111", 1371 to 1421=> "000110110", 1422 to 1476=> "000110101", 
    1477 to 1534=> "000110100", 1535 to 1596=> "000110011", 1597 to 1661=> "000110010", 1662 to 1730=> "000110001", 
    1731 to 1804=> "000110000", 1805 to 1882=> "000101111", 1883 to 1965=> "000101110", 1966 to 2054=> "000101101", 
    2055 to 2150=> "000101100", 2151 to 2252=> "000101011", 2253 to 2361=> "000101010", 2362 to 2478=> "000101001", 
    2479 to 2605=> "000101000", 2606 to 2741=> "000100111", 2742 to 2888=> "000100110", 2889 to 3047=> "000100101", 
    3048 to 3219=> "000100100", 3220 to 3407=> "000100011", 3408 to 3611=> "000100010", 3612 to 3835=> "000100001", 
    3836 to 4079=> "000100000", 4080 to 4348=> "000011111", 4349 to 4643=> "000011110", 4644 to 4970=> "000011101", 
    4971 to 5333=> "000011100", 5334 to 5737=> "000011011", 5738 to 6188=> "000011010", 6189 to 6694=> "000011001", 
    6695 to 7265=> "000011000", 7266 to 7912=> "000010111", 7913 to 8649=> "000010110", 8650 to 9494=> "000010101", 
    9495 to 10469=> "000010100", 10470 to 11602=> "000010011", 11603 to 12928=> "000010010", 12929 to 14496=> "000010001", 
    14497 to 16367=> "000010000", 16368 to 16383=> "000001111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb is
    generic (
        DataWidth : INTEGER := 9;
        AddressRange : INTEGER := 16384;
        AddressWidth : INTEGER := 14);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb is
    component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb_rom_U :  component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


