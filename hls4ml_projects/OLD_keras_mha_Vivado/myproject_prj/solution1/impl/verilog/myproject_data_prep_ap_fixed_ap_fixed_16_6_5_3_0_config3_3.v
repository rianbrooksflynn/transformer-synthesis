// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_data_prep_ap_fixed_ap_fixed_16_6_5_3_0_config3_3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_val,
        d_query_0_0_din,
        d_query_0_0_num_data_valid,
        d_query_0_0_fifo_cap,
        d_query_0_0_full_n,
        d_query_0_0_write,
        d_query_0_1_din,
        d_query_0_1_num_data_valid,
        d_query_0_1_fifo_cap,
        d_query_0_1_full_n,
        d_query_0_1_write,
        d_query_0_2_din,
        d_query_0_2_num_data_valid,
        d_query_0_2_fifo_cap,
        d_query_0_2_full_n,
        d_query_0_2_write,
        d_query_0_3_din,
        d_query_0_3_num_data_valid,
        d_query_0_3_fifo_cap,
        d_query_0_3_full_n,
        d_query_0_3_write
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [1279:0] data_val;
output  [15:0] d_query_0_0_din;
input  [2:0] d_query_0_0_num_data_valid;
input  [2:0] d_query_0_0_fifo_cap;
input   d_query_0_0_full_n;
output   d_query_0_0_write;
output  [15:0] d_query_0_1_din;
input  [2:0] d_query_0_1_num_data_valid;
input  [2:0] d_query_0_1_fifo_cap;
input   d_query_0_1_full_n;
output   d_query_0_1_write;
output  [15:0] d_query_0_2_din;
input  [2:0] d_query_0_2_num_data_valid;
input  [2:0] d_query_0_2_fifo_cap;
input   d_query_0_2_full_n;
output   d_query_0_2_write;
output  [15:0] d_query_0_3_din;
input  [2:0] d_query_0_3_num_data_valid;
input  [2:0] d_query_0_3_fifo_cap;
input   d_query_0_3_full_n;
output   d_query_0_3_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg[15:0] d_query_0_0_din;
reg d_query_0_0_write;
reg[15:0] d_query_0_1_din;
reg d_query_0_1_write;
reg[15:0] d_query_0_2_din;
reg d_query_0_2_write;
reg[15:0] d_query_0_3_din;
reg d_query_0_3_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    d_query_0_0_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
reg    d_query_0_1_blk_n;
reg    d_query_0_2_blk_n;
reg    d_query_0_3_blk_n;
reg   [15:0] p_119_reg_1174;
reg    ap_block_state1;
reg   [15:0] p_120_reg_1179;
reg   [15:0] p_121_reg_1184;
reg   [15:0] p_122_reg_1189;
reg   [15:0] p_123_reg_1194;
reg   [15:0] p_124_reg_1199;
reg   [15:0] p_125_reg_1204;
reg   [15:0] p_126_reg_1209;
reg   [15:0] p_127_reg_1214;
reg   [15:0] p_128_reg_1219;
reg   [15:0] p_129_reg_1224;
reg   [15:0] p_130_reg_1229;
reg   [15:0] p_131_reg_1234;
reg   [15:0] p_132_reg_1239;
reg   [15:0] p_133_reg_1244;
reg   [15:0] p_134_reg_1249;
reg   [15:0] p_135_reg_1254;
reg   [15:0] p_136_reg_1259;
reg   [15:0] p_137_reg_1264;
reg   [15:0] p_138_reg_1269;
reg   [15:0] p_139_reg_1274;
reg   [15:0] p_140_reg_1279;
reg   [15:0] p_141_reg_1284;
reg   [15:0] p_142_reg_1289;
reg   [15:0] p_143_reg_1294;
reg   [15:0] p_144_reg_1299;
reg   [15:0] p_145_reg_1304;
reg   [15:0] p_146_reg_1309;
reg   [15:0] p_147_reg_1314;
reg   [15:0] p_148_reg_1319;
reg   [15:0] p_149_reg_1324;
reg   [15:0] p_150_reg_1329;
reg   [15:0] p_151_reg_1334;
reg   [15:0] p_152_reg_1339;
reg   [15:0] p_153_reg_1344;
reg   [15:0] p_154_reg_1349;
reg   [15:0] p_155_reg_1354;
reg   [15:0] p_156_reg_1359;
reg   [15:0] p_157_reg_1364;
reg   [15:0] p_158_reg_1369;
reg   [15:0] p_159_reg_1374;
reg   [15:0] p_160_reg_1379;
reg   [15:0] p_161_reg_1384;
reg   [15:0] p_162_reg_1389;
reg   [15:0] p_163_reg_1394;
reg   [15:0] p_164_reg_1399;
reg   [15:0] p_165_reg_1404;
reg   [15:0] p_166_reg_1409;
reg   [15:0] p_167_reg_1414;
reg   [15:0] p_168_reg_1419;
reg   [15:0] p_169_reg_1424;
reg   [15:0] p_170_reg_1429;
reg   [15:0] p_171_reg_1434;
reg   [15:0] p_172_reg_1439;
reg   [15:0] p_173_reg_1444;
reg   [15:0] p_174_reg_1449;
reg   [15:0] p_175_reg_1454;
reg   [15:0] p_176_reg_1459;
reg   [15:0] p_177_reg_1464;
reg   [15:0] p_178_reg_1469;
reg   [15:0] p_179_reg_1474;
reg   [15:0] p_180_reg_1479;
reg   [15:0] p_181_reg_1484;
reg   [15:0] p_182_reg_1489;
reg   [15:0] p_183_reg_1494;
reg   [15:0] p_184_reg_1499;
reg   [15:0] p_185_reg_1504;
reg   [15:0] p_186_reg_1509;
reg   [15:0] p_187_reg_1514;
reg   [15:0] p_188_reg_1519;
reg   [15:0] p_189_reg_1524;
reg   [15:0] p_190_reg_1529;
reg   [15:0] p_191_reg_1534;
reg   [15:0] p_192_reg_1539;
reg   [15:0] p_193_reg_1544;
reg   [15:0] p_0_reg_1549;
wire   [15:0] trunc_ln290_fu_376_p1;
reg    ap_block_state2;
reg    ap_block_state3;
reg    ap_block_state4;
reg    ap_block_state5;
reg    ap_block_state6;
reg    ap_block_state7;
reg    ap_block_state8;
reg    ap_block_state9;
reg    ap_block_state10;
reg    ap_block_state11;
reg    ap_block_state12;
reg    ap_block_state13;
reg    ap_block_state14;
reg    ap_block_state15;
reg    ap_block_state16;
reg    ap_block_state17;
reg    ap_block_state18;
reg    ap_block_state19;
reg    ap_block_state20;
reg   [19:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 20'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_reg_1549 <= {{data_val[1279:1264]}};
        p_119_reg_1174 <= {{data_val[79:64]}};
        p_120_reg_1179 <= {{data_val[95:80]}};
        p_121_reg_1184 <= {{data_val[111:96]}};
        p_122_reg_1189 <= {{data_val[127:112]}};
        p_123_reg_1194 <= {{data_val[143:128]}};
        p_124_reg_1199 <= {{data_val[159:144]}};
        p_125_reg_1204 <= {{data_val[175:160]}};
        p_126_reg_1209 <= {{data_val[191:176]}};
        p_127_reg_1214 <= {{data_val[207:192]}};
        p_128_reg_1219 <= {{data_val[223:208]}};
        p_129_reg_1224 <= {{data_val[239:224]}};
        p_130_reg_1229 <= {{data_val[255:240]}};
        p_131_reg_1234 <= {{data_val[271:256]}};
        p_132_reg_1239 <= {{data_val[287:272]}};
        p_133_reg_1244 <= {{data_val[303:288]}};
        p_134_reg_1249 <= {{data_val[319:304]}};
        p_135_reg_1254 <= {{data_val[335:320]}};
        p_136_reg_1259 <= {{data_val[351:336]}};
        p_137_reg_1264 <= {{data_val[367:352]}};
        p_138_reg_1269 <= {{data_val[383:368]}};
        p_139_reg_1274 <= {{data_val[399:384]}};
        p_140_reg_1279 <= {{data_val[415:400]}};
        p_141_reg_1284 <= {{data_val[431:416]}};
        p_142_reg_1289 <= {{data_val[447:432]}};
        p_143_reg_1294 <= {{data_val[463:448]}};
        p_144_reg_1299 <= {{data_val[479:464]}};
        p_145_reg_1304 <= {{data_val[495:480]}};
        p_146_reg_1309 <= {{data_val[511:496]}};
        p_147_reg_1314 <= {{data_val[527:512]}};
        p_148_reg_1319 <= {{data_val[543:528]}};
        p_149_reg_1324 <= {{data_val[559:544]}};
        p_150_reg_1329 <= {{data_val[575:560]}};
        p_151_reg_1334 <= {{data_val[591:576]}};
        p_152_reg_1339 <= {{data_val[607:592]}};
        p_153_reg_1344 <= {{data_val[623:608]}};
        p_154_reg_1349 <= {{data_val[639:624]}};
        p_155_reg_1354 <= {{data_val[655:640]}};
        p_156_reg_1359 <= {{data_val[671:656]}};
        p_157_reg_1364 <= {{data_val[687:672]}};
        p_158_reg_1369 <= {{data_val[703:688]}};
        p_159_reg_1374 <= {{data_val[719:704]}};
        p_160_reg_1379 <= {{data_val[735:720]}};
        p_161_reg_1384 <= {{data_val[751:736]}};
        p_162_reg_1389 <= {{data_val[767:752]}};
        p_163_reg_1394 <= {{data_val[783:768]}};
        p_164_reg_1399 <= {{data_val[799:784]}};
        p_165_reg_1404 <= {{data_val[815:800]}};
        p_166_reg_1409 <= {{data_val[831:816]}};
        p_167_reg_1414 <= {{data_val[847:832]}};
        p_168_reg_1419 <= {{data_val[863:848]}};
        p_169_reg_1424 <= {{data_val[879:864]}};
        p_170_reg_1429 <= {{data_val[895:880]}};
        p_171_reg_1434 <= {{data_val[911:896]}};
        p_172_reg_1439 <= {{data_val[927:912]}};
        p_173_reg_1444 <= {{data_val[943:928]}};
        p_174_reg_1449 <= {{data_val[959:944]}};
        p_175_reg_1454 <= {{data_val[975:960]}};
        p_176_reg_1459 <= {{data_val[991:976]}};
        p_177_reg_1464 <= {{data_val[1007:992]}};
        p_178_reg_1469 <= {{data_val[1023:1008]}};
        p_179_reg_1474 <= {{data_val[1039:1024]}};
        p_180_reg_1479 <= {{data_val[1055:1040]}};
        p_181_reg_1484 <= {{data_val[1071:1056]}};
        p_182_reg_1489 <= {{data_val[1087:1072]}};
        p_183_reg_1494 <= {{data_val[1103:1088]}};
        p_184_reg_1499 <= {{data_val[1119:1104]}};
        p_185_reg_1504 <= {{data_val[1135:1120]}};
        p_186_reg_1509 <= {{data_val[1151:1136]}};
        p_187_reg_1514 <= {{data_val[1167:1152]}};
        p_188_reg_1519 <= {{data_val[1183:1168]}};
        p_189_reg_1524 <= {{data_val[1199:1184]}};
        p_190_reg_1529 <= {{data_val[1215:1200]}};
        p_191_reg_1534 <= {{data_val[1231:1216]}};
        p_192_reg_1539 <= {{data_val[1247:1232]}};
        p_193_reg_1544 <= {{data_val[1263:1248]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state10)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state11)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state12)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state13)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state14)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state15)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state16)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state17)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state18)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state19)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state20)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state5)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state6)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state7)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state8)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state9)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        d_query_0_0_blk_n = d_query_0_0_full_n;
    end else begin
        d_query_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20))) begin
        d_query_0_0_din = p_191_reg_1534;
    end else if (((1'b0 == ap_block_state19) & (1'b1 == ap_CS_fsm_state19))) begin
        d_query_0_0_din = p_187_reg_1514;
    end else if (((1'b0 == ap_block_state18) & (1'b1 == ap_CS_fsm_state18))) begin
        d_query_0_0_din = p_183_reg_1494;
    end else if (((1'b0 == ap_block_state17) & (1'b1 == ap_CS_fsm_state17))) begin
        d_query_0_0_din = p_179_reg_1474;
    end else if (((1'b0 == ap_block_state16) & (1'b1 == ap_CS_fsm_state16))) begin
        d_query_0_0_din = p_175_reg_1454;
    end else if (((1'b0 == ap_block_state15) & (1'b1 == ap_CS_fsm_state15))) begin
        d_query_0_0_din = p_171_reg_1434;
    end else if (((1'b0 == ap_block_state14) & (1'b1 == ap_CS_fsm_state14))) begin
        d_query_0_0_din = p_167_reg_1414;
    end else if (((1'b0 == ap_block_state13) & (1'b1 == ap_CS_fsm_state13))) begin
        d_query_0_0_din = p_163_reg_1394;
    end else if (((1'b0 == ap_block_state12) & (1'b1 == ap_CS_fsm_state12))) begin
        d_query_0_0_din = p_159_reg_1374;
    end else if (((1'b0 == ap_block_state11) & (1'b1 == ap_CS_fsm_state11))) begin
        d_query_0_0_din = p_155_reg_1354;
    end else if (((1'b0 == ap_block_state10) & (1'b1 == ap_CS_fsm_state10))) begin
        d_query_0_0_din = p_151_reg_1334;
    end else if (((1'b0 == ap_block_state9) & (1'b1 == ap_CS_fsm_state9))) begin
        d_query_0_0_din = p_147_reg_1314;
    end else if (((1'b0 == ap_block_state8) & (1'b1 == ap_CS_fsm_state8))) begin
        d_query_0_0_din = p_143_reg_1294;
    end else if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        d_query_0_0_din = p_139_reg_1274;
    end else if (((1'b0 == ap_block_state6) & (1'b1 == ap_CS_fsm_state6))) begin
        d_query_0_0_din = p_135_reg_1254;
    end else if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5))) begin
        d_query_0_0_din = p_131_reg_1234;
    end else if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        d_query_0_0_din = p_127_reg_1214;
    end else if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        d_query_0_0_din = p_123_reg_1194;
    end else if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        d_query_0_0_din = p_119_reg_1174;
    end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        d_query_0_0_din = trunc_ln290_fu_376_p1;
    end else begin
        d_query_0_0_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20)) | ((1'b0 == ap_block_state19) & (1'b1 == ap_CS_fsm_state19)) | ((1'b0 == ap_block_state18) & (1'b1 == ap_CS_fsm_state18)) | ((1'b0 == ap_block_state17) & (1'b1 == ap_CS_fsm_state17)) | ((1'b0 == ap_block_state16) & (1'b1 == ap_CS_fsm_state16)) | ((1'b0 == ap_block_state15) & (1'b1 == ap_CS_fsm_state15)) | ((1'b0 == ap_block_state14) & (1'b1 == ap_CS_fsm_state14)) | ((1'b0 == ap_block_state13) & (1'b1 == ap_CS_fsm_state13)) | ((1'b0 == ap_block_state12) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_state11) & (1'b1 == ap_CS_fsm_state11)) | ((1'b0 == ap_block_state10) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_state9) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_state8) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7)) | ((1'b0 == ap_block_state6) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4)) | 
    ((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1)))) begin
        d_query_0_0_write = 1'b1;
    end else begin
        d_query_0_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        d_query_0_1_blk_n = d_query_0_1_full_n;
    end else begin
        d_query_0_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20))) begin
        d_query_0_1_din = p_192_reg_1539;
    end else if (((1'b0 == ap_block_state19) & (1'b1 == ap_CS_fsm_state19))) begin
        d_query_0_1_din = p_188_reg_1519;
    end else if (((1'b0 == ap_block_state18) & (1'b1 == ap_CS_fsm_state18))) begin
        d_query_0_1_din = p_184_reg_1499;
    end else if (((1'b0 == ap_block_state17) & (1'b1 == ap_CS_fsm_state17))) begin
        d_query_0_1_din = p_180_reg_1479;
    end else if (((1'b0 == ap_block_state16) & (1'b1 == ap_CS_fsm_state16))) begin
        d_query_0_1_din = p_176_reg_1459;
    end else if (((1'b0 == ap_block_state15) & (1'b1 == ap_CS_fsm_state15))) begin
        d_query_0_1_din = p_172_reg_1439;
    end else if (((1'b0 == ap_block_state14) & (1'b1 == ap_CS_fsm_state14))) begin
        d_query_0_1_din = p_168_reg_1419;
    end else if (((1'b0 == ap_block_state13) & (1'b1 == ap_CS_fsm_state13))) begin
        d_query_0_1_din = p_164_reg_1399;
    end else if (((1'b0 == ap_block_state12) & (1'b1 == ap_CS_fsm_state12))) begin
        d_query_0_1_din = p_160_reg_1379;
    end else if (((1'b0 == ap_block_state11) & (1'b1 == ap_CS_fsm_state11))) begin
        d_query_0_1_din = p_156_reg_1359;
    end else if (((1'b0 == ap_block_state10) & (1'b1 == ap_CS_fsm_state10))) begin
        d_query_0_1_din = p_152_reg_1339;
    end else if (((1'b0 == ap_block_state9) & (1'b1 == ap_CS_fsm_state9))) begin
        d_query_0_1_din = p_148_reg_1319;
    end else if (((1'b0 == ap_block_state8) & (1'b1 == ap_CS_fsm_state8))) begin
        d_query_0_1_din = p_144_reg_1299;
    end else if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        d_query_0_1_din = p_140_reg_1279;
    end else if (((1'b0 == ap_block_state6) & (1'b1 == ap_CS_fsm_state6))) begin
        d_query_0_1_din = p_136_reg_1259;
    end else if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5))) begin
        d_query_0_1_din = p_132_reg_1239;
    end else if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        d_query_0_1_din = p_128_reg_1219;
    end else if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        d_query_0_1_din = p_124_reg_1199;
    end else if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        d_query_0_1_din = p_120_reg_1179;
    end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        d_query_0_1_din = {{data_val[31:16]}};
    end else begin
        d_query_0_1_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20)) | ((1'b0 == ap_block_state19) & (1'b1 == ap_CS_fsm_state19)) | ((1'b0 == ap_block_state18) & (1'b1 == ap_CS_fsm_state18)) | ((1'b0 == ap_block_state17) & (1'b1 == ap_CS_fsm_state17)) | ((1'b0 == ap_block_state16) & (1'b1 == ap_CS_fsm_state16)) | ((1'b0 == ap_block_state15) & (1'b1 == ap_CS_fsm_state15)) | ((1'b0 == ap_block_state14) & (1'b1 == ap_CS_fsm_state14)) | ((1'b0 == ap_block_state13) & (1'b1 == ap_CS_fsm_state13)) | ((1'b0 == ap_block_state12) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_state11) & (1'b1 == ap_CS_fsm_state11)) | ((1'b0 == ap_block_state10) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_state9) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_state8) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7)) | ((1'b0 == ap_block_state6) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4)) | 
    ((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1)))) begin
        d_query_0_1_write = 1'b1;
    end else begin
        d_query_0_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        d_query_0_2_blk_n = d_query_0_2_full_n;
    end else begin
        d_query_0_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20))) begin
        d_query_0_2_din = p_193_reg_1544;
    end else if (((1'b0 == ap_block_state19) & (1'b1 == ap_CS_fsm_state19))) begin
        d_query_0_2_din = p_189_reg_1524;
    end else if (((1'b0 == ap_block_state18) & (1'b1 == ap_CS_fsm_state18))) begin
        d_query_0_2_din = p_185_reg_1504;
    end else if (((1'b0 == ap_block_state17) & (1'b1 == ap_CS_fsm_state17))) begin
        d_query_0_2_din = p_181_reg_1484;
    end else if (((1'b0 == ap_block_state16) & (1'b1 == ap_CS_fsm_state16))) begin
        d_query_0_2_din = p_177_reg_1464;
    end else if (((1'b0 == ap_block_state15) & (1'b1 == ap_CS_fsm_state15))) begin
        d_query_0_2_din = p_173_reg_1444;
    end else if (((1'b0 == ap_block_state14) & (1'b1 == ap_CS_fsm_state14))) begin
        d_query_0_2_din = p_169_reg_1424;
    end else if (((1'b0 == ap_block_state13) & (1'b1 == ap_CS_fsm_state13))) begin
        d_query_0_2_din = p_165_reg_1404;
    end else if (((1'b0 == ap_block_state12) & (1'b1 == ap_CS_fsm_state12))) begin
        d_query_0_2_din = p_161_reg_1384;
    end else if (((1'b0 == ap_block_state11) & (1'b1 == ap_CS_fsm_state11))) begin
        d_query_0_2_din = p_157_reg_1364;
    end else if (((1'b0 == ap_block_state10) & (1'b1 == ap_CS_fsm_state10))) begin
        d_query_0_2_din = p_153_reg_1344;
    end else if (((1'b0 == ap_block_state9) & (1'b1 == ap_CS_fsm_state9))) begin
        d_query_0_2_din = p_149_reg_1324;
    end else if (((1'b0 == ap_block_state8) & (1'b1 == ap_CS_fsm_state8))) begin
        d_query_0_2_din = p_145_reg_1304;
    end else if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        d_query_0_2_din = p_141_reg_1284;
    end else if (((1'b0 == ap_block_state6) & (1'b1 == ap_CS_fsm_state6))) begin
        d_query_0_2_din = p_137_reg_1264;
    end else if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5))) begin
        d_query_0_2_din = p_133_reg_1244;
    end else if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        d_query_0_2_din = p_129_reg_1224;
    end else if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        d_query_0_2_din = p_125_reg_1204;
    end else if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        d_query_0_2_din = p_121_reg_1184;
    end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        d_query_0_2_din = {{data_val[47:32]}};
    end else begin
        d_query_0_2_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20)) | ((1'b0 == ap_block_state19) & (1'b1 == ap_CS_fsm_state19)) | ((1'b0 == ap_block_state18) & (1'b1 == ap_CS_fsm_state18)) | ((1'b0 == ap_block_state17) & (1'b1 == ap_CS_fsm_state17)) | ((1'b0 == ap_block_state16) & (1'b1 == ap_CS_fsm_state16)) | ((1'b0 == ap_block_state15) & (1'b1 == ap_CS_fsm_state15)) | ((1'b0 == ap_block_state14) & (1'b1 == ap_CS_fsm_state14)) | ((1'b0 == ap_block_state13) & (1'b1 == ap_CS_fsm_state13)) | ((1'b0 == ap_block_state12) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_state11) & (1'b1 == ap_CS_fsm_state11)) | ((1'b0 == ap_block_state10) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_state9) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_state8) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7)) | ((1'b0 == ap_block_state6) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4)) | 
    ((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1)))) begin
        d_query_0_2_write = 1'b1;
    end else begin
        d_query_0_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        d_query_0_3_blk_n = d_query_0_3_full_n;
    end else begin
        d_query_0_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20))) begin
        d_query_0_3_din = p_0_reg_1549;
    end else if (((1'b0 == ap_block_state19) & (1'b1 == ap_CS_fsm_state19))) begin
        d_query_0_3_din = p_190_reg_1529;
    end else if (((1'b0 == ap_block_state18) & (1'b1 == ap_CS_fsm_state18))) begin
        d_query_0_3_din = p_186_reg_1509;
    end else if (((1'b0 == ap_block_state17) & (1'b1 == ap_CS_fsm_state17))) begin
        d_query_0_3_din = p_182_reg_1489;
    end else if (((1'b0 == ap_block_state16) & (1'b1 == ap_CS_fsm_state16))) begin
        d_query_0_3_din = p_178_reg_1469;
    end else if (((1'b0 == ap_block_state15) & (1'b1 == ap_CS_fsm_state15))) begin
        d_query_0_3_din = p_174_reg_1449;
    end else if (((1'b0 == ap_block_state14) & (1'b1 == ap_CS_fsm_state14))) begin
        d_query_0_3_din = p_170_reg_1429;
    end else if (((1'b0 == ap_block_state13) & (1'b1 == ap_CS_fsm_state13))) begin
        d_query_0_3_din = p_166_reg_1409;
    end else if (((1'b0 == ap_block_state12) & (1'b1 == ap_CS_fsm_state12))) begin
        d_query_0_3_din = p_162_reg_1389;
    end else if (((1'b0 == ap_block_state11) & (1'b1 == ap_CS_fsm_state11))) begin
        d_query_0_3_din = p_158_reg_1369;
    end else if (((1'b0 == ap_block_state10) & (1'b1 == ap_CS_fsm_state10))) begin
        d_query_0_3_din = p_154_reg_1349;
    end else if (((1'b0 == ap_block_state9) & (1'b1 == ap_CS_fsm_state9))) begin
        d_query_0_3_din = p_150_reg_1329;
    end else if (((1'b0 == ap_block_state8) & (1'b1 == ap_CS_fsm_state8))) begin
        d_query_0_3_din = p_146_reg_1309;
    end else if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        d_query_0_3_din = p_142_reg_1289;
    end else if (((1'b0 == ap_block_state6) & (1'b1 == ap_CS_fsm_state6))) begin
        d_query_0_3_din = p_138_reg_1269;
    end else if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5))) begin
        d_query_0_3_din = p_134_reg_1249;
    end else if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        d_query_0_3_din = p_130_reg_1229;
    end else if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        d_query_0_3_din = p_126_reg_1209;
    end else if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        d_query_0_3_din = p_122_reg_1189;
    end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        d_query_0_3_din = {{data_val[63:48]}};
    end else begin
        d_query_0_3_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20)) | ((1'b0 == ap_block_state19) & (1'b1 == ap_CS_fsm_state19)) | ((1'b0 == ap_block_state18) & (1'b1 == ap_CS_fsm_state18)) | ((1'b0 == ap_block_state17) & (1'b1 == ap_CS_fsm_state17)) | ((1'b0 == ap_block_state16) & (1'b1 == ap_CS_fsm_state16)) | ((1'b0 == ap_block_state15) & (1'b1 == ap_CS_fsm_state15)) | ((1'b0 == ap_block_state14) & (1'b1 == ap_CS_fsm_state14)) | ((1'b0 == ap_block_state13) & (1'b1 == ap_CS_fsm_state13)) | ((1'b0 == ap_block_state12) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_state11) & (1'b1 == ap_CS_fsm_state11)) | ((1'b0 == ap_block_state10) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_state9) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_state8) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7)) | ((1'b0 == ap_block_state6) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4)) | 
    ((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1)))) begin
        d_query_0_3_write = 1'b1;
    end else begin
        d_query_0_3_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b0 == ap_block_state8) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b0 == ap_block_state9) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b0 == ap_block_state11) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b0 == ap_block_state12) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b0 == ap_block_state13) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b0 == ap_block_state14) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b0 == ap_block_state15) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b0 == ap_block_state16) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b0 == ap_block_state17) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b0 == ap_block_state18) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b0 == ap_block_state19) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state10 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state11 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state12 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state13 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state14 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state15 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state16 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state17 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state18 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state19 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state20 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((d_query_0_3_full_n == 1'b0) | (d_query_0_2_full_n == 1'b0) | (d_query_0_1_full_n == 1'b0) | (d_query_0_0_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign start_out = real_start;

assign trunc_ln290_fu_376_p1 = data_val[15:0];

endmodule //myproject_data_prep_ap_fixed_ap_fixed_16_6_5_3_0_config3_3
