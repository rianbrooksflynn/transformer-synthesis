// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_dense_latency_ap_fixed_ap_fixed_16_6_5_3_0_config3_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_val,
        data_1_val,
        data_2_val,
        data_3_val,
        idx2,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] data_0_val;
input  [15:0] data_1_val;
input  [15:0] data_2_val;
input  [15:0] data_3_val;
input  [3:0] idx2;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [3:0] value_weight3_address0;
reg    value_weight3_ce0;
wire   [10:0] value_weight3_q0;
wire   [3:0] value_weight3_address1;
reg    value_weight3_ce1;
wire   [10:0] value_weight3_q1;
wire   [3:0] value_weight3_address2;
reg    value_weight3_ce2;
wire   [10:0] value_weight3_q2;
wire   [3:0] value_weight3_address3;
reg    value_weight3_ce3;
wire   [10:0] value_weight3_q3;
wire   [3:0] value_weight3_address4;
reg    value_weight3_ce4;
wire   [10:0] value_weight3_q4;
wire   [3:0] value_weight3_address5;
reg    value_weight3_ce5;
wire   [10:0] value_weight3_q5;
wire   [3:0] value_weight3_address6;
reg    value_weight3_ce6;
wire   [10:0] value_weight3_q6;
wire   [3:0] value_weight3_address7;
reg    value_weight3_ce7;
wire   [10:0] value_weight3_q7;
reg   [15:0] data_3_val_read_reg_461;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] data_3_val_read_reg_461_pp0_iter1_reg;
reg   [15:0] data_2_val_read_reg_466;
reg   [15:0] data_2_val_read_reg_466_pp0_iter1_reg;
reg   [15:0] data_1_val_read_reg_471;
reg   [15:0] data_1_val_read_reg_471_pp0_iter1_reg;
reg   [15:0] data_0_val_read_reg_476;
reg   [15:0] data_0_val_read_reg_476_pp0_iter1_reg;
reg  signed [10:0] w_reg_521;
reg  signed [10:0] w_171_reg_526;
reg  signed [10:0] w_172_reg_531;
reg  signed [10:0] w_173_reg_536;
reg  signed [10:0] w_174_reg_541;
reg  signed [10:0] w_175_reg_546;
reg  signed [10:0] w_176_reg_551;
reg  signed [10:0] w_177_reg_556;
reg   [15:0] trunc_ln_reg_561;
reg   [15:0] trunc_ln63_16_reg_566;
reg   [15:0] trunc_ln63_17_reg_571;
reg   [15:0] trunc_ln63_18_reg_576;
reg   [15:0] trunc_ln63_19_reg_581;
reg   [15:0] trunc_ln63_20_reg_586;
reg   [15:0] trunc_ln63_21_reg_591;
reg   [15:0] trunc_ln63_22_reg_596;
wire   [63:0] zext_ln33_fu_175_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln63_fu_186_p1;
wire   [63:0] zext_ln63_1_fu_197_p1;
wire   [63:0] zext_ln63_2_fu_208_p1;
wire   [63:0] zext_ln63_3_fu_219_p1;
wire   [63:0] zext_ln63_4_fu_230_p1;
wire   [63:0] zext_ln63_5_fu_241_p1;
wire   [63:0] zext_ln63_6_fu_252_p1;
wire   [3:0] add_ln63_fu_180_p2;
wire   [3:0] add_ln63_1_fu_191_p2;
wire   [3:0] add_ln63_2_fu_202_p2;
wire   [3:0] add_ln63_3_fu_213_p2;
wire   [3:0] add_ln63_4_fu_224_p2;
wire   [3:0] add_ln63_5_fu_235_p2;
wire   [3:0] add_ln63_6_fu_246_p2;
wire  signed [15:0] mul_ln63_fu_263_p0;
wire  signed [25:0] sext_ln78_621_fu_260_p1;
wire   [25:0] mul_ln63_fu_263_p2;
wire  signed [15:0] mul_ln63_5_fu_282_p0;
wire   [25:0] mul_ln63_5_fu_282_p2;
wire  signed [15:0] mul_ln63_6_fu_304_p0;
wire  signed [25:0] sext_ln78_624_fu_301_p1;
wire   [25:0] mul_ln63_6_fu_304_p2;
wire  signed [15:0] mul_ln63_7_fu_323_p0;
wire   [25:0] mul_ln63_7_fu_323_p2;
wire  signed [15:0] mul_ln63_8_fu_345_p0;
wire  signed [25:0] sext_ln78_627_fu_342_p1;
wire   [25:0] mul_ln63_8_fu_345_p2;
wire  signed [15:0] mul_ln63_9_fu_364_p0;
wire   [25:0] mul_ln63_9_fu_364_p2;
wire  signed [15:0] mul_ln63_10_fu_386_p0;
wire  signed [25:0] sext_ln78_630_fu_383_p1;
wire   [25:0] mul_ln63_10_fu_386_p2;
wire  signed [15:0] mul_ln63_11_fu_405_p0;
wire   [25:0] mul_ln63_11_fu_405_p2;
wire   [15:0] add_ln76_12_fu_425_p2;
wire   [15:0] add_ln76_fu_421_p2;
wire   [15:0] add_ln76_15_fu_439_p2;
wire   [15:0] add_ln76_14_fu_435_p2;
wire   [15:0] add_ln76_13_fu_429_p2;
wire   [15:0] add_ln76_16_fu_443_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

myproject_dense_latency_ap_fixed_ap_fixed_16_6_5_3_0_config3_1_s_vadEe #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
value_weight3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(value_weight3_address0),
    .ce0(value_weight3_ce0),
    .q0(value_weight3_q0),
    .address1(value_weight3_address1),
    .ce1(value_weight3_ce1),
    .q1(value_weight3_q1),
    .address2(value_weight3_address2),
    .ce2(value_weight3_ce2),
    .q2(value_weight3_q2),
    .address3(value_weight3_address3),
    .ce3(value_weight3_ce3),
    .q3(value_weight3_q3),
    .address4(value_weight3_address4),
    .ce4(value_weight3_ce4),
    .q4(value_weight3_q4),
    .address5(value_weight3_address5),
    .ce5(value_weight3_ce5),
    .q5(value_weight3_q5),
    .address6(value_weight3_address6),
    .ce6(value_weight3_ce6),
    .q6(value_weight3_q6),
    .address7(value_weight3_address7),
    .ce7(value_weight3_ce7),
    .q7(value_weight3_q7)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U54(
    .din0(mul_ln63_fu_263_p0),
    .din1(w_reg_521),
    .dout(mul_ln63_fu_263_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U55(
    .din0(mul_ln63_5_fu_282_p0),
    .din1(w_171_reg_526),
    .dout(mul_ln63_5_fu_282_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U56(
    .din0(mul_ln63_6_fu_304_p0),
    .din1(w_172_reg_531),
    .dout(mul_ln63_6_fu_304_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U57(
    .din0(mul_ln63_7_fu_323_p0),
    .din1(w_173_reg_536),
    .dout(mul_ln63_7_fu_323_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U58(
    .din0(mul_ln63_8_fu_345_p0),
    .din1(w_174_reg_541),
    .dout(mul_ln63_8_fu_345_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U59(
    .din0(mul_ln63_9_fu_364_p0),
    .din1(w_175_reg_546),
    .dout(mul_ln63_9_fu_364_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U60(
    .din0(mul_ln63_10_fu_386_p0),
    .din1(w_176_reg_551),
    .dout(mul_ln63_10_fu_386_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U61(
    .din0(mul_ln63_11_fu_405_p0),
    .din1(w_177_reg_556),
    .dout(mul_ln63_11_fu_405_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_0_val_read_reg_476 <= data_0_val;
        data_0_val_read_reg_476_pp0_iter1_reg <= data_0_val_read_reg_476;
        data_1_val_read_reg_471 <= data_1_val;
        data_1_val_read_reg_471_pp0_iter1_reg <= data_1_val_read_reg_471;
        data_2_val_read_reg_466 <= data_2_val;
        data_2_val_read_reg_466_pp0_iter1_reg <= data_2_val_read_reg_466;
        data_3_val_read_reg_461 <= data_3_val;
        data_3_val_read_reg_461_pp0_iter1_reg <= data_3_val_read_reg_461;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        trunc_ln63_16_reg_566 <= {{mul_ln63_5_fu_282_p2[25:10]}};
        trunc_ln63_17_reg_571 <= {{mul_ln63_6_fu_304_p2[25:10]}};
        trunc_ln63_18_reg_576 <= {{mul_ln63_7_fu_323_p2[25:10]}};
        trunc_ln63_19_reg_581 <= {{mul_ln63_8_fu_345_p2[25:10]}};
        trunc_ln63_20_reg_586 <= {{mul_ln63_9_fu_364_p2[25:10]}};
        trunc_ln63_21_reg_591 <= {{mul_ln63_10_fu_386_p2[25:10]}};
        trunc_ln63_22_reg_596 <= {{mul_ln63_11_fu_405_p2[25:10]}};
        trunc_ln_reg_561 <= {{mul_ln63_fu_263_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_171_reg_526 <= value_weight3_q6;
        w_172_reg_531 <= value_weight3_q5;
        w_173_reg_536 <= value_weight3_q4;
        w_174_reg_541 <= value_weight3_q3;
        w_175_reg_546 <= value_weight3_q2;
        w_176_reg_551 <= value_weight3_q1;
        w_177_reg_556 <= value_weight3_q0;
        w_reg_521 <= value_weight3_q7;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight3_ce0 = 1'b1;
    end else begin
        value_weight3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight3_ce1 = 1'b1;
    end else begin
        value_weight3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight3_ce2 = 1'b1;
    end else begin
        value_weight3_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight3_ce3 = 1'b1;
    end else begin
        value_weight3_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight3_ce4 = 1'b1;
    end else begin
        value_weight3_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight3_ce5 = 1'b1;
    end else begin
        value_weight3_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight3_ce6 = 1'b1;
    end else begin
        value_weight3_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_weight3_ce7 = 1'b1;
    end else begin
        value_weight3_ce7 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln63_1_fu_191_p2 = (idx2 + 4'd2);

assign add_ln63_2_fu_202_p2 = (idx2 + 4'd3);

assign add_ln63_3_fu_213_p2 = (idx2 + 4'd4);

assign add_ln63_4_fu_224_p2 = (idx2 + 4'd5);

assign add_ln63_5_fu_235_p2 = (idx2 + 4'd6);

assign add_ln63_6_fu_246_p2 = (idx2 + 4'd7);

assign add_ln63_fu_180_p2 = (idx2 + 4'd1);

assign add_ln76_12_fu_425_p2 = (trunc_ln63_19_reg_581 + trunc_ln63_21_reg_591);

assign add_ln76_13_fu_429_p2 = (add_ln76_12_fu_425_p2 + add_ln76_fu_421_p2);

assign add_ln76_14_fu_435_p2 = (trunc_ln63_18_reg_576 + trunc_ln63_16_reg_566);

assign add_ln76_15_fu_439_p2 = (trunc_ln63_20_reg_586 + trunc_ln63_22_reg_596);

assign add_ln76_16_fu_443_p2 = (add_ln76_15_fu_439_p2 + add_ln76_14_fu_435_p2);

assign add_ln76_fu_421_p2 = (trunc_ln63_17_reg_571 + trunc_ln_reg_561);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = add_ln76_13_fu_429_p2;

assign ap_return_1 = add_ln76_16_fu_443_p2;

assign mul_ln63_10_fu_386_p0 = sext_ln78_630_fu_383_p1;

assign mul_ln63_11_fu_405_p0 = sext_ln78_630_fu_383_p1;

assign mul_ln63_5_fu_282_p0 = sext_ln78_621_fu_260_p1;

assign mul_ln63_6_fu_304_p0 = sext_ln78_624_fu_301_p1;

assign mul_ln63_7_fu_323_p0 = sext_ln78_624_fu_301_p1;

assign mul_ln63_8_fu_345_p0 = sext_ln78_627_fu_342_p1;

assign mul_ln63_9_fu_364_p0 = sext_ln78_627_fu_342_p1;

assign mul_ln63_fu_263_p0 = sext_ln78_621_fu_260_p1;

assign sext_ln78_621_fu_260_p1 = $signed(data_0_val_read_reg_476_pp0_iter1_reg);

assign sext_ln78_624_fu_301_p1 = $signed(data_1_val_read_reg_471_pp0_iter1_reg);

assign sext_ln78_627_fu_342_p1 = $signed(data_2_val_read_reg_466_pp0_iter1_reg);

assign sext_ln78_630_fu_383_p1 = $signed(data_3_val_read_reg_461_pp0_iter1_reg);

assign value_weight3_address0 = zext_ln63_6_fu_252_p1;

assign value_weight3_address1 = zext_ln63_5_fu_241_p1;

assign value_weight3_address2 = zext_ln63_4_fu_230_p1;

assign value_weight3_address3 = zext_ln63_3_fu_219_p1;

assign value_weight3_address4 = zext_ln63_2_fu_208_p1;

assign value_weight3_address5 = zext_ln63_1_fu_197_p1;

assign value_weight3_address6 = zext_ln63_fu_186_p1;

assign value_weight3_address7 = zext_ln33_fu_175_p1;

assign zext_ln33_fu_175_p1 = idx2;

assign zext_ln63_1_fu_197_p1 = add_ln63_1_fu_191_p2;

assign zext_ln63_2_fu_208_p1 = add_ln63_2_fu_202_p2;

assign zext_ln63_3_fu_219_p1 = add_ln63_3_fu_213_p2;

assign zext_ln63_4_fu_230_p1 = add_ln63_4_fu_224_p2;

assign zext_ln63_5_fu_241_p1 = add_ln63_5_fu_235_p2;

assign zext_ln63_6_fu_252_p1 = add_ln63_6_fu_246_p2;

assign zext_ln63_fu_186_p1 = add_ln63_fu_180_p2;

endmodule //myproject_dense_latency_ap_fixed_ap_fixed_16_6_5_3_0_config3_1_s
