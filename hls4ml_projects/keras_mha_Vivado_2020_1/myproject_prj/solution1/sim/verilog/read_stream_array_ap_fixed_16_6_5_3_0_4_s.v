// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module read_stream_array_ap_fixed_16_6_5_3_0_4_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in_0_V_V_dout,
        data_in_0_V_V_empty_n,
        data_in_0_V_V_read,
        data_in_1_V_V_dout,
        data_in_1_V_V_empty_n,
        data_in_1_V_V_read,
        data_in_2_V_V_dout,
        data_in_2_V_V_empty_n,
        data_in_2_V_V_read,
        data_in_3_V_V_dout,
        data_in_3_V_V_empty_n,
        data_in_3_V_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        data_in_0_V_V_blk_n,
        data_in_1_V_V_blk_n,
        data_in_2_V_V_blk_n,
        data_in_3_V_V_blk_n
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_in_0_V_V_dout;
input   data_in_0_V_V_empty_n;
output   data_in_0_V_V_read;
input  [15:0] data_in_1_V_V_dout;
input   data_in_1_V_V_empty_n;
output   data_in_1_V_V_read;
input  [15:0] data_in_2_V_V_dout;
input   data_in_2_V_V_empty_n;
output   data_in_2_V_V_read;
input  [15:0] data_in_3_V_V_dout;
input   data_in_3_V_V_empty_n;
output   data_in_3_V_V_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output   data_in_0_V_V_blk_n;
output   data_in_1_V_V_blk_n;
output   data_in_2_V_V_blk_n;
output   data_in_3_V_V_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_in_0_V_V_read;
reg data_in_1_V_V_read;
reg data_in_2_V_V_read;
reg data_in_3_V_V_read;
reg[15:0] ap_return_0;
reg[15:0] ap_return_1;
reg[15:0] ap_return_2;
reg[15:0] ap_return_3;
reg data_in_0_V_V_blk_n;
reg data_in_1_V_V_blk_n;
reg data_in_2_V_V_blk_n;
reg data_in_3_V_V_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
reg   [15:0] ap_return_0_preg;
reg   [15:0] ap_return_1_preg;
reg   [15:0] ap_return_2_preg;
reg   [15:0] ap_return_3_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 16'd0;
#0 ap_return_1_preg = 16'd0;
#0 ap_return_2_preg = 16'd0;
#0 ap_return_3_preg = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= data_in_0_V_V_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= data_in_1_V_V_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_2_preg <= data_in_2_V_V_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_3_preg <= data_in_3_V_V_dout;
        end
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = data_in_0_V_V_dout;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = data_in_1_V_V_dout;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = data_in_2_V_V_dout;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = data_in_3_V_V_dout;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_in_0_V_V_blk_n = data_in_0_V_V_empty_n;
    end else begin
        data_in_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_in_0_V_V_read = 1'b1;
    end else begin
        data_in_0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_in_1_V_V_blk_n = data_in_1_V_V_empty_n;
    end else begin
        data_in_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_in_1_V_V_read = 1'b1;
    end else begin
        data_in_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_in_2_V_V_blk_n = data_in_2_V_V_empty_n;
    end else begin
        data_in_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_in_2_V_V_read = 1'b1;
    end else begin
        data_in_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_in_3_V_V_blk_n = data_in_3_V_V_empty_n;
    end else begin
        data_in_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_in_3_V_V_read = 1'b1;
    end else begin
        data_in_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (data_in_3_V_V_empty_n == 1'b0) | (data_in_2_V_V_empty_n == 1'b0) | (data_in_1_V_V_empty_n == 1'b0) | (data_in_0_V_V_empty_n == 1'b0));
end

endmodule //read_stream_array_ap_fixed_16_6_5_3_0_4_s
