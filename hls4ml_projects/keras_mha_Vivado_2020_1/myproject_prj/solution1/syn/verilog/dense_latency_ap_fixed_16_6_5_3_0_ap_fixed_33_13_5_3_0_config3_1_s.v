// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config3_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        weights_V_address0,
        weights_V_ce0,
        weights_V_q0,
        weights_V_address1,
        weights_V_ce1,
        weights_V_q1,
        weights_V_offset,
        biases_V_offset,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
output  [3:0] weights_V_address0;
output   weights_V_ce0;
input  [15:0] weights_V_q0;
output  [3:0] weights_V_address1;
output   weights_V_ce1;
input  [15:0] weights_V_q1;
input  [4:0] weights_V_offset;
input  [2:0] biases_V_offset;
output  [58:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] weights_V_address0;
reg weights_V_ce0;
reg[3:0] weights_V_address1;
reg weights_V_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] trunc_ln42_fu_359_p1;
reg   [3:0] trunc_ln42_reg_682;
reg   [15:0] trunc_ln4_reg_697;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [15:0] trunc_ln708_s_reg_702;
reg   [15:0] trunc_ln708_3195_reg_717;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [15:0] trunc_ln708_3196_reg_722;
reg   [15:0] data_3_V_read_2_reg_737;
wire   [1:0] trunc_ln15_fu_486_p1;
reg   [1:0] trunc_ln15_reg_742;
reg   [15:0] trunc_ln708_3197_reg_748;
reg   [15:0] trunc_ln708_3198_reg_753;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage3_subdone;
reg   [15:0] ap_port_reg_data_0_V_read;
reg   [15:0] ap_port_reg_data_1_V_read;
reg   [15:0] ap_port_reg_data_2_V_read;
reg   [15:0] ap_port_reg_data_3_V_read;
reg   [2:0] ap_port_reg_biases_V_offset;
wire   [63:0] zext_ln15_fu_354_p1;
wire   [63:0] zext_ln42_fu_369_p1;
wire   [63:0] zext_ln42_1_fu_415_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln42_2_fu_425_p1;
wire   [63:0] zext_ln42_3_fu_471_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln42_4_fu_481_p1;
wire   [63:0] zext_ln42_5_fu_531_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln42_6_fu_541_p1;
wire  signed [15:0] mul_ln1118_4017_fu_177_p0;
wire  signed [25:0] sext_ln1116_1720_cast_fu_430_p1;
wire  signed [15:0] mul_ln1118_4017_fu_177_p1;
wire  signed [15:0] mul_ln1118_4019_fu_178_p0;
wire  signed [25:0] sext_ln1116_1721_cast_fu_490_p1;
wire  signed [15:0] mul_ln1118_4019_fu_178_p1;
wire  signed [15:0] mul_ln1118_4020_fu_179_p0;
wire  signed [15:0] mul_ln1118_4020_fu_179_p1;
wire  signed [15:0] mul_ln1118_4016_fu_180_p0;
wire  signed [25:0] sext_ln1116_cast_fu_374_p1;
wire  signed [15:0] mul_ln1118_4016_fu_180_p1;
wire  signed [15:0] mul_ln1118_fu_181_p0;
wire  signed [15:0] mul_ln1118_fu_181_p1;
wire  signed [15:0] mul_ln1118_4018_fu_182_p0;
wire  signed [15:0] mul_ln1118_4018_fu_182_p1;
wire  signed [15:0] mul_ln1118_4021_fu_183_p0;
wire  signed [25:0] sext_ln1116_1722_cast_fu_546_p1;
wire  signed [15:0] mul_ln1118_4021_fu_183_p1;
wire  signed [15:0] mul_ln1118_4022_fu_184_p0;
wire  signed [15:0] mul_ln1118_4022_fu_184_p1;
wire   [3:0] add_ln42_fu_363_p2;
wire   [25:0] mul_ln1118_fu_181_p2;
wire   [25:0] mul_ln1118_4016_fu_180_p2;
wire   [3:0] add_ln42_1_fu_410_p2;
wire   [3:0] add_ln42_2_fu_420_p2;
wire   [25:0] mul_ln1118_4017_fu_177_p2;
wire   [25:0] mul_ln1118_4018_fu_182_p2;
wire   [3:0] add_ln42_3_fu_466_p2;
wire   [3:0] add_ln42_4_fu_476_p2;
wire   [25:0] mul_ln1118_4019_fu_178_p2;
wire   [25:0] mul_ln1118_4020_fu_179_p2;
wire   [3:0] add_ln42_5_fu_526_p2;
wire   [3:0] add_ln42_6_fu_536_p2;
wire   [25:0] mul_ln1118_4021_fu_183_p2;
wire   [25:0] mul_ln1118_4022_fu_184_p2;
wire   [1:0] tmp_43_fu_599_p5;
wire   [15:0] tmp_42_fu_581_p6;
wire   [15:0] trunc_ln708_3199_fu_556_p4;
wire   [15:0] add_ln703_1519_fu_618_p2;
wire   [15:0] add_ln703_1520_fu_623_p2;
wire   [15:0] add_ln703_fu_613_p2;
wire   [15:0] tmp_43_fu_599_p6;
wire   [15:0] trunc_ln708_3200_fu_571_p4;
wire   [15:0] add_ln703_1523_fu_639_p2;
wire   [15:0] add_ln703_1524_fu_644_p2;
wire   [15:0] add_ln703_1522_fu_634_p2;
wire   [15:0] p_Val2_s_fu_628_p2;
wire   [25:0] shl_ln_fu_655_p3;
wire   [15:0] acc_1_V_fu_649_p2;
wire  signed [32:0] sext_ln728_fu_663_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U31(
    .din0(16'd0),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(trunc_ln15_reg_742),
    .dout(tmp_42_fu_581_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U32(
    .din0(16'd0),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(tmp_43_fu_599_p5),
    .dout(tmp_43_fu_599_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_port_reg_biases_V_offset <= biases_V_offset;
        ap_port_reg_data_0_V_read <= data_0_V_read;
        ap_port_reg_data_1_V_read <= data_1_V_read;
        ap_port_reg_data_2_V_read <= data_2_V_read;
        ap_port_reg_data_3_V_read <= data_3_V_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        data_3_V_read_2_reg_737 <= ap_port_reg_data_3_V_read;
        trunc_ln15_reg_742 <= trunc_ln15_fu_486_p1;
        trunc_ln708_3197_reg_748 <= {{mul_ln1118_4019_fu_178_p2[25:10]}};
        trunc_ln708_3198_reg_753 <= {{mul_ln1118_4020_fu_179_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln42_reg_682 <= trunc_ln42_fu_359_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        trunc_ln4_reg_697 <= {{mul_ln1118_fu_181_p2[25:10]}};
        trunc_ln708_s_reg_702 <= {{mul_ln1118_4016_fu_180_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        trunc_ln708_3195_reg_717 <= {{mul_ln1118_4017_fu_177_p2[25:10]}};
        trunc_ln708_3196_reg_722 <= {{mul_ln1118_4018_fu_182_p2[25:10]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            weights_V_address0 = zext_ln42_5_fu_531_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            weights_V_address0 = zext_ln42_3_fu_471_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            weights_V_address0 = zext_ln42_1_fu_415_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            weights_V_address0 = zext_ln15_fu_354_p1;
        end else begin
            weights_V_address0 = 'bx;
        end
    end else begin
        weights_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            weights_V_address1 = zext_ln42_6_fu_541_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            weights_V_address1 = zext_ln42_4_fu_481_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            weights_V_address1 = zext_ln42_2_fu_425_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            weights_V_address1 = zext_ln42_fu_369_p1;
        end else begin
            weights_V_address1 = 'bx;
        end
    end else begin
        weights_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        weights_V_ce0 = 1'b1;
    end else begin
        weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        weights_V_ce1 = 1'b1;
    end else begin
        weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_V_fu_649_p2 = (add_ln703_1524_fu_644_p2 + add_ln703_1522_fu_634_p2);

assign add_ln42_1_fu_410_p2 = (4'd2 + trunc_ln42_reg_682);

assign add_ln42_2_fu_420_p2 = (4'd3 + trunc_ln42_reg_682);

assign add_ln42_3_fu_466_p2 = (4'd4 + trunc_ln42_reg_682);

assign add_ln42_4_fu_476_p2 = (4'd5 + trunc_ln42_reg_682);

assign add_ln42_5_fu_526_p2 = (4'd6 + trunc_ln42_reg_682);

assign add_ln42_6_fu_536_p2 = (4'd7 + trunc_ln42_reg_682);

assign add_ln42_fu_363_p2 = (4'd1 + trunc_ln42_fu_359_p1);

assign add_ln703_1519_fu_618_p2 = (trunc_ln708_3197_reg_748 + trunc_ln708_3199_fu_556_p4);

assign add_ln703_1520_fu_623_p2 = (add_ln703_1519_fu_618_p2 + trunc_ln708_3195_reg_717);

assign add_ln703_1522_fu_634_p2 = (tmp_43_fu_599_p6 + trunc_ln708_s_reg_702);

assign add_ln703_1523_fu_639_p2 = (trunc_ln708_3198_reg_753 + trunc_ln708_3200_fu_571_p4);

assign add_ln703_1524_fu_644_p2 = (add_ln703_1523_fu_639_p2 + trunc_ln708_3196_reg_722);

assign add_ln703_fu_613_p2 = (tmp_42_fu_581_p6 + trunc_ln4_reg_697);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = (1'b0 == ap_ce);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = {{{acc_1_V_fu_649_p2}, {10'd0}}, {sext_ln728_fu_663_p1}};

assign mul_ln1118_4016_fu_180_p0 = sext_ln1116_cast_fu_374_p1;

assign mul_ln1118_4016_fu_180_p1 = weights_V_q1;

assign mul_ln1118_4016_fu_180_p2 = ($signed(mul_ln1118_4016_fu_180_p0) * $signed(mul_ln1118_4016_fu_180_p1));

assign mul_ln1118_4017_fu_177_p0 = sext_ln1116_1720_cast_fu_430_p1;

assign mul_ln1118_4017_fu_177_p1 = weights_V_q0;

assign mul_ln1118_4017_fu_177_p2 = ($signed(mul_ln1118_4017_fu_177_p0) * $signed(mul_ln1118_4017_fu_177_p1));

assign mul_ln1118_4018_fu_182_p0 = sext_ln1116_1720_cast_fu_430_p1;

assign mul_ln1118_4018_fu_182_p1 = weights_V_q1;

assign mul_ln1118_4018_fu_182_p2 = ($signed(mul_ln1118_4018_fu_182_p0) * $signed(mul_ln1118_4018_fu_182_p1));

assign mul_ln1118_4019_fu_178_p0 = sext_ln1116_1721_cast_fu_490_p1;

assign mul_ln1118_4019_fu_178_p1 = weights_V_q0;

assign mul_ln1118_4019_fu_178_p2 = ($signed(mul_ln1118_4019_fu_178_p0) * $signed(mul_ln1118_4019_fu_178_p1));

assign mul_ln1118_4020_fu_179_p0 = sext_ln1116_1721_cast_fu_490_p1;

assign mul_ln1118_4020_fu_179_p1 = weights_V_q1;

assign mul_ln1118_4020_fu_179_p2 = ($signed(mul_ln1118_4020_fu_179_p0) * $signed(mul_ln1118_4020_fu_179_p1));

assign mul_ln1118_4021_fu_183_p0 = sext_ln1116_1722_cast_fu_546_p1;

assign mul_ln1118_4021_fu_183_p1 = weights_V_q0;

assign mul_ln1118_4021_fu_183_p2 = ($signed(mul_ln1118_4021_fu_183_p0) * $signed(mul_ln1118_4021_fu_183_p1));

assign mul_ln1118_4022_fu_184_p0 = sext_ln1116_1722_cast_fu_546_p1;

assign mul_ln1118_4022_fu_184_p1 = weights_V_q1;

assign mul_ln1118_4022_fu_184_p2 = ($signed(mul_ln1118_4022_fu_184_p0) * $signed(mul_ln1118_4022_fu_184_p1));

assign mul_ln1118_fu_181_p0 = sext_ln1116_cast_fu_374_p1;

assign mul_ln1118_fu_181_p1 = weights_V_q0;

assign mul_ln1118_fu_181_p2 = ($signed(mul_ln1118_fu_181_p0) * $signed(mul_ln1118_fu_181_p1));

assign p_Val2_s_fu_628_p2 = (add_ln703_1520_fu_623_p2 + add_ln703_fu_613_p2);

assign sext_ln1116_1720_cast_fu_430_p1 = $signed(ap_port_reg_data_1_V_read);

assign sext_ln1116_1721_cast_fu_490_p1 = $signed(ap_port_reg_data_2_V_read);

assign sext_ln1116_1722_cast_fu_546_p1 = $signed(data_3_V_read_2_reg_737);

assign sext_ln1116_cast_fu_374_p1 = $signed(ap_port_reg_data_0_V_read);

assign sext_ln728_fu_663_p1 = $signed(shl_ln_fu_655_p3);

assign shl_ln_fu_655_p3 = {{p_Val2_s_fu_628_p2}, {10'd0}};

assign tmp_43_fu_599_p5 = (2'd1 + trunc_ln15_reg_742);

assign trunc_ln15_fu_486_p1 = ap_port_reg_biases_V_offset[1:0];

assign trunc_ln42_fu_359_p1 = weights_V_offset[3:0];

assign trunc_ln708_3199_fu_556_p4 = {{mul_ln1118_4021_fu_183_p2[25:10]}};

assign trunc_ln708_3200_fu_571_p4 = {{mul_ln1118_4022_fu_184_p2[25:10]}};

assign zext_ln15_fu_354_p1 = weights_V_offset;

assign zext_ln42_1_fu_415_p1 = add_ln42_1_fu_410_p2;

assign zext_ln42_2_fu_425_p1 = add_ln42_2_fu_420_p2;

assign zext_ln42_3_fu_471_p1 = add_ln42_3_fu_466_p2;

assign zext_ln42_4_fu_481_p1 = add_ln42_4_fu_476_p2;

assign zext_ln42_5_fu_531_p1 = add_ln42_5_fu_526_p2;

assign zext_ln42_6_fu_541_p1 = add_ln42_6_fu_536_p2;

assign zext_ln42_fu_369_p1 = add_ln42_fu_363_p2;

endmodule //dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config3_1_s
