-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (32 downto 0) );
end;


architecture behav of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv25_1F9F6E6 : STD_LOGIC_VECTOR (24 downto 0) := "1111110011111011011100110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv25_FFFED : STD_LOGIC_VECTOR (24 downto 0) := "0000011111111111111101101";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv31_666 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000011001100110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv19_8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv26_419 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000011001";
    constant ap_const_lv26_100024 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000100100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal index_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal index_table_ce0 : STD_LOGIC;
    signal index_table_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal invert_sqr_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_sqr_table_ce0 : STD_LOGIC;
    signal invert_sqr_table_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln114_fu_244_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_reg_740 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_1_fu_250_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_1_reg_746 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_2_fu_256_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_2_reg_752 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_3_fu_262_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_3_reg_758 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_4_fu_268_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_4_reg_764 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_fu_387_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_reg_770 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln52_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_775 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln55_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_i21_i_fu_446_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv_i21_i_reg_797 : STD_LOGIC_VECTOR (20 downto 0);
    signal mid_fu_524_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mid_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_phi_mux_deno_inver_1_phi_fu_145_p6 : STD_LOGIC_VECTOR (24 downto 0);
    signal deno_inver_1_reg_140 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln65_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln63_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal low_fu_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal low_4_fu_542_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal high_fu_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal high_3_fu_548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_164_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sum_cache_fu_156_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_2_fu_180_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_3_fu_188_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_2_fu_202_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_1_fu_172_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_3_fu_208_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_1_fu_196_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_fu_214_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln73_fu_224_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln73_fu_224_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mean_fu_230_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln111_fu_240_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_fu_277_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_fu_277_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_1_fu_296_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_1_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_1_fu_296_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_1_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_2_fu_315_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_2_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_2_fu_315_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_2_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_3_fu_334_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_3_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_3_fu_334_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_3_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_4_fu_353_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_4_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_4_fu_353_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_4_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal diff_5_fu_283_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_fu_302_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_3_fu_340_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_4_fu_359_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_2_fu_375_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_2_fu_321_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_3_fu_381_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_1_fu_369_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln73_1_fu_396_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln73_1_fu_396_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal var_fu_402_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln118_fu_412_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal x_fu_416_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1_fu_426_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln52_fu_422_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln64_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln64_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln64_1_fu_490_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln64_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln64_2_fu_510_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_476_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln64_1_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln64_1_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln65_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln63_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_560_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_fu_598_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln122_fu_591_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal mul_ln122_fu_598_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln3_fu_604_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_1_fu_621_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln122_1_fu_621_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln122_1_fu_627_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_2_fu_644_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln122_2_fu_644_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln122_2_fu_650_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_3_fu_667_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln122_3_fu_667_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln122_3_fu_673_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_4_fu_690_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln122_4_fu_690_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln122_4_fu_696_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln122_1_fu_614_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln122_3_fu_637_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln122_5_fu_660_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln122_7_fu_683_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln122_9_fu_706_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_19s_12ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component myproject_mul_19s_19s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_mul_25ns_19s_44_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_index_table_Rbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tacud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    index_table_U : component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_index_table_Rbkb
    generic map (
        DataWidth => 21,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => index_table_address0,
        ce0 => index_table_ce0,
        q0 => index_table_q0);

    invert_sqr_table_U : component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tacud
    generic map (
        DataWidth => 25,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_sqr_table_address0,
        ce0 => invert_sqr_table_ce0,
        q0 => invert_sqr_table_q0);

    mul_19s_12ns_31_1_1_U1 : component myproject_mul_19s_12ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 12,
        dout_WIDTH => 31)
    port map (
        din0 => add_ln109_fu_214_p2,
        din1 => mul_ln73_fu_224_p1,
        dout => mul_ln73_fu_224_p2);

    mul_19s_19s_32_1_1_U2 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_fu_277_p0,
        din1 => mul_ln115_fu_277_p1,
        dout => mul_ln115_fu_277_p2);

    mul_19s_19s_32_1_1_U3 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_1_fu_296_p0,
        din1 => mul_ln115_1_fu_296_p1,
        dout => mul_ln115_1_fu_296_p2);

    mul_19s_19s_32_1_1_U4 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_2_fu_315_p0,
        din1 => mul_ln115_2_fu_315_p1,
        dout => mul_ln115_2_fu_315_p2);

    mul_19s_19s_32_1_1_U5 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_3_fu_334_p0,
        din1 => mul_ln115_3_fu_334_p1,
        dout => mul_ln115_3_fu_334_p2);

    mul_19s_19s_32_1_1_U6 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_4_fu_353_p0,
        din1 => mul_ln115_4_fu_353_p1,
        dout => mul_ln115_4_fu_353_p2);

    mul_19s_12ns_31_1_1_U7 : component myproject_mul_19s_12ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 12,
        dout_WIDTH => 31)
    port map (
        din0 => add_ln116_reg_770,
        din1 => mul_ln73_1_fu_396_p1,
        dout => mul_ln73_1_fu_396_p2);

    mul_25ns_19s_44_1_1_U8 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_fu_598_p0,
        din1 => sub_ln114_reg_740,
        dout => mul_ln122_fu_598_p2);

    mul_25ns_19s_44_1_1_U9 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_1_fu_621_p0,
        din1 => sub_ln114_1_reg_746,
        dout => mul_ln122_1_fu_621_p2);

    mul_25ns_19s_44_1_1_U10 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_2_fu_644_p0,
        din1 => sub_ln114_2_reg_752,
        dout => mul_ln122_2_fu_644_p2);

    mul_25ns_19s_44_1_1_U11 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_3_fu_667_p0,
        din1 => sub_ln114_3_reg_758,
        dout => mul_ln122_3_fu_667_p2);

    mul_25ns_19s_44_1_1_U12 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_4_fu_690_p0,
        din1 => sub_ln114_4_reg_764,
        dout => mul_ln122_4_fu_690_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_0_preg <= sext_ln122_1_fu_614_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_1_preg <= sext_ln122_3_fu_637_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_2_preg <= sext_ln122_5_fu_660_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_3_preg <= sext_ln122_7_fu_683_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_4_preg <= sext_ln122_9_fu_706_p1;
                end if; 
            end if;
        end if;
    end process;


    deno_inver_1_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_440_p2 = ap_const_lv1_1) and (icmp_ln52_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                deno_inver_1_reg_140 <= ap_const_lv25_FFFED;
            elsif (((icmp_ln52_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                deno_inver_1_reg_140 <= ap_const_lv25_1F9F6E6;
            elsif (((icmp_ln55_reg_779 = ap_const_lv1_0) and (icmp_ln52_reg_775 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                deno_inver_1_reg_140 <= invert_sqr_table_q0;
            end if; 
        end if;
    end process;

    high_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_440_p2 = ap_const_lv1_0) and (icmp_ln52_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                high_fu_80 <= ap_const_lv32_3FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                high_fu_80 <= high_3_fu_548_p3;
            end if; 
        end if;
    end process;

    low_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_440_p2 = ap_const_lv1_0) and (icmp_ln52_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                low_fu_76 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                low_fu_76 <= low_4_fu_542_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln116_reg_770 <= add_ln116_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    conv_i21_i_reg_797(20 downto 7) <= conv_i21_i_fu_446_p3(20 downto 7);
                icmp_ln52_reg_775 <= icmp_ln52_fu_434_p2;
                icmp_ln55_reg_779 <= icmp_ln55_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mid_reg_808 <= mid_fu_524_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sub_ln114_1_reg_746 <= sub_ln114_1_fu_250_p2;
                sub_ln114_2_reg_752 <= sub_ln114_2_fu_256_p2;
                sub_ln114_3_reg_758 <= sub_ln114_3_fu_262_p2;
                sub_ln114_4_reg_764 <= sub_ln114_4_fu_268_p2;
                sub_ln114_reg_740 <= sub_ln114_fu_244_p2;
            end if;
        end if;
    end process;
    conv_i21_i_reg_797(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln52_fu_434_p2, ap_CS_fsm_state3, icmp_ln55_fu_440_p2, ap_CS_fsm_state5, icmp_ln63_fu_570_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln55_fu_440_p2 = ap_const_lv1_0) and (icmp_ln52_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln63_fu_570_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln109_1_fu_196_p2 <= std_logic_vector(unsigned(shl_ln_fu_164_p3) + unsigned(sum_cache_fu_156_p3));
    add_ln109_2_fu_202_p2 <= std_logic_vector(unsigned(shl_ln109_2_fu_180_p3) + unsigned(shl_ln109_3_fu_188_p3));
    add_ln109_3_fu_208_p2 <= std_logic_vector(unsigned(add_ln109_2_fu_202_p2) + unsigned(shl_ln109_1_fu_172_p3));
    add_ln109_fu_214_p2 <= std_logic_vector(unsigned(add_ln109_3_fu_208_p2) + unsigned(add_ln109_1_fu_196_p2));
    add_ln116_1_fu_369_p2 <= std_logic_vector(unsigned(diff_5_fu_283_p4) + unsigned(diff_fu_302_p4));
    add_ln116_2_fu_375_p2 <= std_logic_vector(unsigned(diff_3_fu_340_p4) + unsigned(diff_4_fu_359_p4));
    add_ln116_3_fu_381_p2 <= std_logic_vector(unsigned(add_ln116_2_fu_375_p2) + unsigned(diff_2_fu_321_p4));
    add_ln116_fu_387_p2 <= std_logic_vector(unsigned(add_ln116_3_fu_381_p2) + unsigned(add_ln116_1_fu_369_p2));
    add_ln64_fu_470_p2 <= std_logic_vector(unsigned(low_fu_76) + unsigned(high_fu_80));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_deno_inver_1_phi_fu_145_p6_assign_proc : process(invert_sqr_table_q0, icmp_ln52_reg_775, icmp_ln55_reg_779, deno_inver_1_reg_140, ap_CS_fsm_state6)
    begin
        if (((icmp_ln55_reg_779 = ap_const_lv1_0) and (icmp_ln52_reg_775 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_deno_inver_1_phi_fu_145_p6 <= invert_sqr_table_q0;
        else 
            ap_phi_mux_deno_inver_1_phi_fu_145_p6 <= deno_inver_1_reg_140;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state6, sext_ln122_1_fu_614_p1, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_0 <= sext_ln122_1_fu_614_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state6, sext_ln122_3_fu_637_p1, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_1 <= sext_ln122_3_fu_637_p1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state6, sext_ln122_5_fu_660_p1, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_2 <= sext_ln122_5_fu_660_p1;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state6, sext_ln122_7_fu_683_p1, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_3 <= sext_ln122_7_fu_683_p1;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state6, sext_ln122_9_fu_706_p1, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_4 <= sext_ln122_9_fu_706_p1;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;

    conv_i21_i_fu_446_p3 <= (trunc_ln52_fu_422_p1 & ap_const_lv7_0);
    diff_2_fu_321_p4 <= mul_ln115_2_fu_315_p2(31 downto 13);
    diff_3_fu_340_p4 <= mul_ln115_3_fu_334_p2(31 downto 13);
    diff_4_fu_359_p4 <= mul_ln115_4_fu_353_p2(31 downto 13);
    diff_5_fu_283_p4 <= mul_ln115_fu_277_p2(31 downto 13);
    diff_fu_302_p4 <= mul_ln115_1_fu_296_p2(31 downto 13);
    high_3_fu_548_p3 <= 
        high_fu_80 when (icmp_ln65_fu_537_p2(0) = '1') else 
        mid_reg_808;
    icmp_ln52_fu_434_p2 <= "1" when (signed(shl_ln1_fu_426_p3) < signed(ap_const_lv26_419)) else "0";
    icmp_ln55_fu_440_p2 <= "1" when (signed(shl_ln1_fu_426_p3) > signed(ap_const_lv26_100024)) else "0";
    icmp_ln63_fu_570_p2 <= "1" when (signed(tmp_1_fu_560_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln65_fu_537_p2 <= "1" when (unsigned(conv_i21_i_reg_797) > unsigned(index_table_q0)) else "0";
    index_table_address0 <= zext_ln65_fu_532_p1(10 - 1 downto 0);

    index_table_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            index_table_ce0 <= ap_const_logic_1;
        else 
            index_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    invert_sqr_table_address0 <= zext_ln72_fu_586_p1(10 - 1 downto 0);

    invert_sqr_table_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            invert_sqr_table_ce0 <= ap_const_logic_1;
        else 
            invert_sqr_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    low_4_fu_542_p3 <= 
        mid_reg_808 when (icmp_ln65_fu_537_p2(0) = '1') else 
        low_fu_76;
    lshr_ln64_1_fu_490_p4 <= sub_ln64_fu_484_p2(31 downto 1);
    lshr_ln64_2_fu_510_p4 <= add_ln64_fu_470_p2(31 downto 1);
    mean_fu_230_p4 <= mul_ln73_fu_224_p2(30 downto 13);
    mid_fu_524_p3 <= 
        sub_ln64_1_fu_504_p2 when (tmp_fu_476_p3(0) = '1') else 
        zext_ln64_1_fu_520_p1;
    mul_ln115_1_fu_296_p0 <= sext_ln115_1_fu_293_p1(19 - 1 downto 0);
    mul_ln115_1_fu_296_p1 <= sext_ln115_1_fu_293_p1(19 - 1 downto 0);
    mul_ln115_2_fu_315_p0 <= sext_ln115_2_fu_312_p1(19 - 1 downto 0);
    mul_ln115_2_fu_315_p1 <= sext_ln115_2_fu_312_p1(19 - 1 downto 0);
    mul_ln115_3_fu_334_p0 <= sext_ln115_3_fu_331_p1(19 - 1 downto 0);
    mul_ln115_3_fu_334_p1 <= sext_ln115_3_fu_331_p1(19 - 1 downto 0);
    mul_ln115_4_fu_353_p0 <= sext_ln115_4_fu_350_p1(19 - 1 downto 0);
    mul_ln115_4_fu_353_p1 <= sext_ln115_4_fu_350_p1(19 - 1 downto 0);
    mul_ln115_fu_277_p0 <= sext_ln115_fu_274_p1(19 - 1 downto 0);
    mul_ln115_fu_277_p1 <= sext_ln115_fu_274_p1(19 - 1 downto 0);
    mul_ln122_1_fu_621_p0 <= zext_ln122_fu_591_p1(25 - 1 downto 0);
    mul_ln122_2_fu_644_p0 <= zext_ln122_fu_591_p1(25 - 1 downto 0);
    mul_ln122_3_fu_667_p0 <= zext_ln122_fu_591_p1(25 - 1 downto 0);
    mul_ln122_4_fu_690_p0 <= zext_ln122_fu_591_p1(25 - 1 downto 0);
    mul_ln122_fu_598_p0 <= zext_ln122_fu_591_p1(25 - 1 downto 0);
    mul_ln73_1_fu_396_p1 <= ap_const_lv31_666(12 - 1 downto 0);
    mul_ln73_fu_224_p1 <= ap_const_lv31_666(12 - 1 downto 0);
        sext_ln111_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mean_fu_230_p4),19));

        sext_ln115_1_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_1_reg_746),32));

        sext_ln115_2_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_2_reg_752),32));

        sext_ln115_3_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_3_reg_758),32));

        sext_ln115_4_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_4_reg_764),32));

        sext_ln115_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_reg_740),32));

        sext_ln118_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(var_fu_402_p4),19));

        sext_ln122_1_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_604_p4),33));

        sext_ln122_3_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln122_1_fu_627_p4),33));

        sext_ln122_5_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln122_2_fu_650_p4),33));

        sext_ln122_7_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln122_3_fu_673_p4),33));

        sext_ln122_9_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln122_4_fu_696_p4),33));

    shl_ln109_1_fu_172_p3 <= (data_2_val & ap_const_lv3_0);
    shl_ln109_2_fu_180_p3 <= (data_3_val & ap_const_lv3_0);
    shl_ln109_3_fu_188_p3 <= (data_4_val & ap_const_lv3_0);
    shl_ln1_fu_426_p3 <= (x_fu_416_p2 & ap_const_lv7_0);
    shl_ln_fu_164_p3 <= (data_1_val & ap_const_lv3_0);
    sub_ln114_1_fu_250_p2 <= std_logic_vector(unsigned(shl_ln_fu_164_p3) - unsigned(sext_ln111_fu_240_p1));
    sub_ln114_2_fu_256_p2 <= std_logic_vector(unsigned(shl_ln109_1_fu_172_p3) - unsigned(sext_ln111_fu_240_p1));
    sub_ln114_3_fu_262_p2 <= std_logic_vector(unsigned(shl_ln109_2_fu_180_p3) - unsigned(sext_ln111_fu_240_p1));
    sub_ln114_4_fu_268_p2 <= std_logic_vector(unsigned(shl_ln109_3_fu_188_p3) - unsigned(sext_ln111_fu_240_p1));
    sub_ln114_fu_244_p2 <= std_logic_vector(unsigned(sum_cache_fu_156_p3) - unsigned(sext_ln111_fu_240_p1));
    sub_ln63_fu_554_p2 <= std_logic_vector(unsigned(high_3_fu_548_p3) - unsigned(low_4_fu_542_p3));
    sub_ln64_1_fu_504_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln64_fu_500_p1));
    sub_ln64_fu_484_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(add_ln64_fu_470_p2));
    sum_cache_fu_156_p3 <= (data_0_val & ap_const_lv3_0);
    tmp_1_fu_560_p4 <= sub_ln63_fu_554_p2(31 downto 1);
    tmp_fu_476_p3 <= add_ln64_fu_470_p2(31 downto 31);
    trunc_ln122_1_fu_627_p4 <= mul_ln122_1_fu_621_p2(43 downto 13);
    trunc_ln122_2_fu_650_p4 <= mul_ln122_2_fu_644_p2(43 downto 13);
    trunc_ln122_3_fu_673_p4 <= mul_ln122_3_fu_667_p2(43 downto 13);
    trunc_ln122_4_fu_696_p4 <= mul_ln122_4_fu_690_p2(43 downto 13);
    trunc_ln3_fu_604_p4 <= mul_ln122_fu_598_p2(43 downto 13);
    trunc_ln52_fu_422_p1 <= x_fu_416_p2(14 - 1 downto 0);
    var_fu_402_p4 <= mul_ln73_1_fu_396_p2(30 downto 13);
    x_fu_416_p2 <= std_logic_vector(signed(sext_ln118_fu_412_p1) + signed(ap_const_lv19_8));
    zext_ln122_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_deno_inver_1_phi_fu_145_p6),44));
    zext_ln64_1_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln64_2_fu_510_p4),32));
    zext_ln64_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln64_1_fu_490_p4),32));
    zext_ln65_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mid_fu_524_p3),64));
    zext_ln72_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(low_4_fu_542_p3),64));
end behav;
