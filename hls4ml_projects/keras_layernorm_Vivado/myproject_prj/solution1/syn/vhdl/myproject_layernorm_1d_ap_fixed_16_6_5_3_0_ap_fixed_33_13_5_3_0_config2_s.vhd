-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_9_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (32 downto 0) );
end;


architecture behav of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv25_1F9F6E6 : STD_LOGIC_VECTOR (24 downto 0) := "1111110011111011011100110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv25_FFFED : STD_LOGIC_VECTOR (24 downto 0) := "0000011111111111111101101";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv30_333 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001100110011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv18_8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv25_419 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000011001";
    constant ap_const_lv25_100024 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000100100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal index_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal index_table_ce0 : STD_LOGIC;
    signal index_table_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal invert_sqr_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_sqr_table_ce0 : STD_LOGIC;
    signal invert_sqr_table_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln109_6_fu_196_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_6_reg_1146 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_7_fu_204_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_7_reg_1151 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_8_fu_212_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_8_reg_1156 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_7_fu_226_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_7_reg_1161 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_fu_353_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_reg_1166 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln114_1_fu_359_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_1_reg_1172 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_2_fu_365_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_2_reg_1178 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_3_fu_371_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_3_reg_1184 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_4_fu_377_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_4_reg_1190 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_5_fu_383_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_5_reg_1196 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_6_fu_389_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_6_reg_1202 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_7_fu_395_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_7_reg_1208 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_8_fu_400_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_8_reg_1214 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_9_fu_405_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln114_9_reg_1220 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_fu_648_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_reg_1226 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln52_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1231 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln55_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_1235 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_i21_i_fu_707_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv_i21_i_reg_1253 : STD_LOGIC_VECTOR (20 downto 0);
    signal mid_fu_785_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mid_reg_1264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_deno_inver_1_phi_fu_185_p6 : STD_LOGIC_VECTOR (24 downto 0);
    signal deno_inver_1_reg_180 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln65_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln63_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal low_fu_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal low_4_fu_803_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal high_fu_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal high_3_fu_809_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln109_6_fu_220_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln_fu_240_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sum_cache_fu_232_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_2_fu_256_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_3_fu_264_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_2_fu_294_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_1_fu_248_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_3_fu_300_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_1_fu_288_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_4_fu_272_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln109_5_fu_280_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_5_fu_312_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_8_fu_318_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_4_fu_306_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_fu_323_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln73_fu_333_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln73_fu_333_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mean_fu_339_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln111_fu_349_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_fu_413_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_fu_413_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_1_fu_432_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_1_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_1_fu_432_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_1_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_2_fu_451_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_2_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_2_fu_451_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_2_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_3_fu_470_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_3_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_3_fu_470_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_3_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_4_fu_489_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_4_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_4_fu_489_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_4_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_5_fu_508_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_5_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_5_fu_508_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_5_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_6_fu_527_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_6_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_6_fu_527_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_6_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_7_fu_546_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_7_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_7_fu_546_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_7_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_8_fu_565_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_8_fu_562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_8_fu_565_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_8_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_9_fu_584_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln115_9_fu_581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_9_fu_584_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln115_9_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal diff_10_fu_419_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_fu_438_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_3_fu_476_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_4_fu_495_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_2_fu_606_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_2_fu_457_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_3_fu_612_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_1_fu_600_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_5_fu_514_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_6_fu_533_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_8_fu_571_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_9_fu_590_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_6_fu_630_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_7_fu_552_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_7_fu_636_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_5_fu_624_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_8_fu_642_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_4_fu_618_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln73_1_fu_657_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln73_1_fu_657_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal var_fu_663_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln101_fu_673_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_fu_677_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln1_fu_687_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln52_fu_683_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln64_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln64_fu_745_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln64_1_fu_751_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln64_fu_761_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln64_2_fu_771_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_737_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln64_1_fu_765_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln64_1_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln65_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln63_fu_815_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_821_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_fu_859_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln122_fu_852_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal mul_ln122_fu_859_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln3_fu_865_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_1_fu_882_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln122_1_fu_882_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln122_1_fu_888_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_2_fu_905_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln122_2_fu_905_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln122_2_fu_911_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_3_fu_928_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln122_3_fu_928_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln122_3_fu_934_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_4_fu_951_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln122_4_fu_951_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln122_4_fu_957_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_5_fu_974_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln122_5_fu_974_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln122_5_fu_980_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_6_fu_997_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln122_6_fu_997_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln122_6_fu_1003_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_7_fu_1020_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln122_7_fu_1020_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln122_7_fu_1026_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_8_fu_1043_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln122_8_fu_1043_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln122_8_fu_1049_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln122_9_fu_1066_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln122_9_fu_1066_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln122_9_fu_1072_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln122_1_fu_875_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln122_3_fu_898_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln122_5_fu_921_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln122_7_fu_944_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln122_9_fu_967_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln122_11_fu_990_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln122_13_fu_1013_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln122_15_fu_1036_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln122_17_fu_1059_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln122_19_fu_1082_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_19s_11ns_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component myproject_mul_19s_19s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_mul_25ns_19s_44_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_index_table_Rbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tacud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    index_table_U : component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_index_table_Rbkb
    generic map (
        DataWidth => 21,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => index_table_address0,
        ce0 => index_table_ce0,
        q0 => index_table_q0);

    invert_sqr_table_U : component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tacud
    generic map (
        DataWidth => 25,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_sqr_table_address0,
        ce0 => invert_sqr_table_ce0,
        q0 => invert_sqr_table_q0);

    mul_19s_11ns_30_1_1_U1 : component myproject_mul_19s_11ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 11,
        dout_WIDTH => 30)
    port map (
        din0 => add_ln109_fu_323_p2,
        din1 => mul_ln73_fu_333_p1,
        dout => mul_ln73_fu_333_p2);

    mul_19s_19s_32_1_1_U2 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_fu_413_p0,
        din1 => mul_ln115_fu_413_p1,
        dout => mul_ln115_fu_413_p2);

    mul_19s_19s_32_1_1_U3 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_1_fu_432_p0,
        din1 => mul_ln115_1_fu_432_p1,
        dout => mul_ln115_1_fu_432_p2);

    mul_19s_19s_32_1_1_U4 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_2_fu_451_p0,
        din1 => mul_ln115_2_fu_451_p1,
        dout => mul_ln115_2_fu_451_p2);

    mul_19s_19s_32_1_1_U5 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_3_fu_470_p0,
        din1 => mul_ln115_3_fu_470_p1,
        dout => mul_ln115_3_fu_470_p2);

    mul_19s_19s_32_1_1_U6 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_4_fu_489_p0,
        din1 => mul_ln115_4_fu_489_p1,
        dout => mul_ln115_4_fu_489_p2);

    mul_19s_19s_32_1_1_U7 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_5_fu_508_p0,
        din1 => mul_ln115_5_fu_508_p1,
        dout => mul_ln115_5_fu_508_p2);

    mul_19s_19s_32_1_1_U8 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_6_fu_527_p0,
        din1 => mul_ln115_6_fu_527_p1,
        dout => mul_ln115_6_fu_527_p2);

    mul_19s_19s_32_1_1_U9 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_7_fu_546_p0,
        din1 => mul_ln115_7_fu_546_p1,
        dout => mul_ln115_7_fu_546_p2);

    mul_19s_19s_32_1_1_U10 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_8_fu_565_p0,
        din1 => mul_ln115_8_fu_565_p1,
        dout => mul_ln115_8_fu_565_p2);

    mul_19s_19s_32_1_1_U11 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_9_fu_584_p0,
        din1 => mul_ln115_9_fu_584_p1,
        dout => mul_ln115_9_fu_584_p2);

    mul_19s_11ns_30_1_1_U12 : component myproject_mul_19s_11ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 11,
        dout_WIDTH => 30)
    port map (
        din0 => add_ln116_reg_1226,
        din1 => mul_ln73_1_fu_657_p1,
        dout => mul_ln73_1_fu_657_p2);

    mul_25ns_19s_44_1_1_U13 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_fu_859_p0,
        din1 => sub_ln114_reg_1166,
        dout => mul_ln122_fu_859_p2);

    mul_25ns_19s_44_1_1_U14 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_1_fu_882_p0,
        din1 => sub_ln114_1_reg_1172,
        dout => mul_ln122_1_fu_882_p2);

    mul_25ns_19s_44_1_1_U15 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_2_fu_905_p0,
        din1 => sub_ln114_2_reg_1178,
        dout => mul_ln122_2_fu_905_p2);

    mul_25ns_19s_44_1_1_U16 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_3_fu_928_p0,
        din1 => sub_ln114_3_reg_1184,
        dout => mul_ln122_3_fu_928_p2);

    mul_25ns_19s_44_1_1_U17 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_4_fu_951_p0,
        din1 => sub_ln114_4_reg_1190,
        dout => mul_ln122_4_fu_951_p2);

    mul_25ns_19s_44_1_1_U18 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_5_fu_974_p0,
        din1 => sub_ln114_5_reg_1196,
        dout => mul_ln122_5_fu_974_p2);

    mul_25ns_19s_44_1_1_U19 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_6_fu_997_p0,
        din1 => sub_ln114_6_reg_1202,
        dout => mul_ln122_6_fu_997_p2);

    mul_25ns_19s_44_1_1_U20 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_7_fu_1020_p0,
        din1 => sub_ln114_7_reg_1208,
        dout => mul_ln122_7_fu_1020_p2);

    mul_25ns_19s_44_1_1_U21 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_8_fu_1043_p0,
        din1 => sub_ln114_8_reg_1214,
        dout => mul_ln122_8_fu_1043_p2);

    mul_25ns_19s_44_1_1_U22 : component myproject_mul_25ns_19s_44_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 44)
    port map (
        din0 => mul_ln122_9_fu_1066_p0,
        din1 => sub_ln114_9_reg_1220,
        dout => mul_ln122_9_fu_1066_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_0_preg <= sext_ln122_1_fu_875_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_1_preg <= sext_ln122_3_fu_898_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_2_preg <= sext_ln122_5_fu_921_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_3_preg <= sext_ln122_7_fu_944_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_4_preg <= sext_ln122_9_fu_967_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_5_preg <= sext_ln122_11_fu_990_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_6_preg <= sext_ln122_13_fu_1013_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_7_preg <= sext_ln122_15_fu_1036_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_8_preg <= sext_ln122_17_fu_1059_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv33_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_9_preg <= sext_ln122_19_fu_1082_p1;
                end if; 
            end if;
        end if;
    end process;


    deno_inver_1_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln55_fu_701_p2 = ap_const_lv1_1) and (icmp_ln52_fu_695_p2 = ap_const_lv1_0))) then 
                deno_inver_1_reg_180 <= ap_const_lv25_FFFED;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln52_fu_695_p2 = ap_const_lv1_1))) then 
                deno_inver_1_reg_180 <= ap_const_lv25_1F9F6E6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln55_reg_1235 = ap_const_lv1_0) and (icmp_ln52_reg_1231 = ap_const_lv1_0))) then 
                deno_inver_1_reg_180 <= invert_sqr_table_q0;
            end if; 
        end if;
    end process;

    high_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln55_fu_701_p2 = ap_const_lv1_0) and (icmp_ln52_fu_695_p2 = ap_const_lv1_0))) then 
                high_fu_90 <= ap_const_lv32_3FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                high_fu_90 <= high_3_fu_809_p3;
            end if; 
        end if;
    end process;

    low_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln55_fu_701_p2 = ap_const_lv1_0) and (icmp_ln52_fu_695_p2 = ap_const_lv1_0))) then 
                low_fu_86 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                low_fu_86 <= low_4_fu_803_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    add_ln109_7_reg_1161(18 downto 3) <= add_ln109_7_fu_226_p2(18 downto 3);
                    shl_ln109_6_reg_1146(18 downto 3) <= shl_ln109_6_fu_196_p3(18 downto 3);
                    shl_ln109_7_reg_1151(18 downto 3) <= shl_ln109_7_fu_204_p3(18 downto 3);
                    shl_ln109_8_reg_1156(18 downto 3) <= shl_ln109_8_fu_212_p3(18 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln116_reg_1226 <= add_ln116_fu_648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    conv_i21_i_reg_1253(20 downto 7) <= conv_i21_i_fu_707_p3(20 downto 7);
                icmp_ln52_reg_1231 <= icmp_ln52_fu_695_p2;
                icmp_ln55_reg_1235 <= icmp_ln55_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mid_reg_1264 <= mid_fu_785_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sub_ln114_1_reg_1172 <= sub_ln114_1_fu_359_p2;
                sub_ln114_2_reg_1178 <= sub_ln114_2_fu_365_p2;
                sub_ln114_3_reg_1184 <= sub_ln114_3_fu_371_p2;
                sub_ln114_4_reg_1190 <= sub_ln114_4_fu_377_p2;
                sub_ln114_5_reg_1196 <= sub_ln114_5_fu_383_p2;
                sub_ln114_6_reg_1202 <= sub_ln114_6_fu_389_p2;
                sub_ln114_7_reg_1208 <= sub_ln114_7_fu_395_p2;
                sub_ln114_8_reg_1214 <= sub_ln114_8_fu_400_p2;
                sub_ln114_9_reg_1220 <= sub_ln114_9_fu_405_p2;
                sub_ln114_reg_1166 <= sub_ln114_fu_353_p2;
            end if;
        end if;
    end process;
    shl_ln109_6_reg_1146(2 downto 0) <= "000";
    shl_ln109_7_reg_1151(2 downto 0) <= "000";
    shl_ln109_8_reg_1156(2 downto 0) <= "000";
    add_ln109_7_reg_1161(2 downto 0) <= "000";
    conv_i21_i_reg_1253(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln52_fu_695_p2, ap_CS_fsm_state4, icmp_ln55_fu_701_p2, ap_CS_fsm_state6, icmp_ln63_fu_831_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln55_fu_701_p2 = ap_const_lv1_0) and (icmp_ln52_fu_695_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln63_fu_831_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln109_1_fu_288_p2 <= std_logic_vector(unsigned(shl_ln_fu_240_p3) + unsigned(sum_cache_fu_232_p3));
    add_ln109_2_fu_294_p2 <= std_logic_vector(unsigned(shl_ln109_2_fu_256_p3) + unsigned(shl_ln109_3_fu_264_p3));
    add_ln109_3_fu_300_p2 <= std_logic_vector(unsigned(add_ln109_2_fu_294_p2) + unsigned(shl_ln109_1_fu_248_p3));
    add_ln109_4_fu_306_p2 <= std_logic_vector(unsigned(add_ln109_3_fu_300_p2) + unsigned(add_ln109_1_fu_288_p2));
    add_ln109_5_fu_312_p2 <= std_logic_vector(unsigned(shl_ln109_4_fu_272_p3) + unsigned(shl_ln109_5_fu_280_p3));
    add_ln109_6_fu_220_p2 <= std_logic_vector(unsigned(shl_ln109_7_fu_204_p3) + unsigned(shl_ln109_8_fu_212_p3));
    add_ln109_7_fu_226_p2 <= std_logic_vector(unsigned(add_ln109_6_fu_220_p2) + unsigned(shl_ln109_6_fu_196_p3));
    add_ln109_8_fu_318_p2 <= std_logic_vector(unsigned(add_ln109_7_reg_1161) + unsigned(add_ln109_5_fu_312_p2));
    add_ln109_fu_323_p2 <= std_logic_vector(unsigned(add_ln109_8_fu_318_p2) + unsigned(add_ln109_4_fu_306_p2));
    add_ln116_1_fu_600_p2 <= std_logic_vector(unsigned(diff_10_fu_419_p4) + unsigned(diff_fu_438_p4));
    add_ln116_2_fu_606_p2 <= std_logic_vector(unsigned(diff_3_fu_476_p4) + unsigned(diff_4_fu_495_p4));
    add_ln116_3_fu_612_p2 <= std_logic_vector(unsigned(add_ln116_2_fu_606_p2) + unsigned(diff_2_fu_457_p4));
    add_ln116_4_fu_618_p2 <= std_logic_vector(unsigned(add_ln116_3_fu_612_p2) + unsigned(add_ln116_1_fu_600_p2));
    add_ln116_5_fu_624_p2 <= std_logic_vector(unsigned(diff_5_fu_514_p4) + unsigned(diff_6_fu_533_p4));
    add_ln116_6_fu_630_p2 <= std_logic_vector(unsigned(diff_8_fu_571_p4) + unsigned(diff_9_fu_590_p4));
    add_ln116_7_fu_636_p2 <= std_logic_vector(unsigned(add_ln116_6_fu_630_p2) + unsigned(diff_7_fu_552_p4));
    add_ln116_8_fu_642_p2 <= std_logic_vector(unsigned(add_ln116_7_fu_636_p2) + unsigned(add_ln116_5_fu_624_p2));
    add_ln116_fu_648_p2 <= std_logic_vector(unsigned(add_ln116_8_fu_642_p2) + unsigned(add_ln116_4_fu_618_p2));
    add_ln64_fu_731_p2 <= std_logic_vector(unsigned(low_fu_86) + unsigned(high_fu_90));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_deno_inver_1_phi_fu_185_p6_assign_proc : process(invert_sqr_table_q0, icmp_ln52_reg_1231, icmp_ln55_reg_1235, deno_inver_1_reg_180, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln55_reg_1235 = ap_const_lv1_0) and (icmp_ln52_reg_1231 = ap_const_lv1_0))) then 
            ap_phi_mux_deno_inver_1_phi_fu_185_p6 <= invert_sqr_table_q0;
        else 
            ap_phi_mux_deno_inver_1_phi_fu_185_p6 <= deno_inver_1_reg_180;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state7, sext_ln122_1_fu_875_p1, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_0 <= sext_ln122_1_fu_875_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state7, sext_ln122_3_fu_898_p1, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_1 <= sext_ln122_3_fu_898_p1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state7, sext_ln122_5_fu_921_p1, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_2 <= sext_ln122_5_fu_921_p1;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state7, sext_ln122_7_fu_944_p1, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_3 <= sext_ln122_7_fu_944_p1;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state7, sext_ln122_9_fu_967_p1, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_4 <= sext_ln122_9_fu_967_p1;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state7, sext_ln122_11_fu_990_p1, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_5 <= sext_ln122_11_fu_990_p1;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_CS_fsm_state7, sext_ln122_13_fu_1013_p1, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_6 <= sext_ln122_13_fu_1013_p1;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_state7, sext_ln122_15_fu_1036_p1, ap_return_7_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_7 <= sext_ln122_15_fu_1036_p1;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ap_CS_fsm_state7, sext_ln122_17_fu_1059_p1, ap_return_8_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_8 <= sext_ln122_17_fu_1059_p1;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(ap_CS_fsm_state7, sext_ln122_19_fu_1082_p1, ap_return_9_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_9 <= sext_ln122_19_fu_1082_p1;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    conv_i21_i_fu_707_p3 <= (trunc_ln52_fu_683_p1 & ap_const_lv7_0);
    diff_10_fu_419_p4 <= mul_ln115_fu_413_p2(31 downto 13);
    diff_2_fu_457_p4 <= mul_ln115_2_fu_451_p2(31 downto 13);
    diff_3_fu_476_p4 <= mul_ln115_3_fu_470_p2(31 downto 13);
    diff_4_fu_495_p4 <= mul_ln115_4_fu_489_p2(31 downto 13);
    diff_5_fu_514_p4 <= mul_ln115_5_fu_508_p2(31 downto 13);
    diff_6_fu_533_p4 <= mul_ln115_6_fu_527_p2(31 downto 13);
    diff_7_fu_552_p4 <= mul_ln115_7_fu_546_p2(31 downto 13);
    diff_8_fu_571_p4 <= mul_ln115_8_fu_565_p2(31 downto 13);
    diff_9_fu_590_p4 <= mul_ln115_9_fu_584_p2(31 downto 13);
    diff_fu_438_p4 <= mul_ln115_1_fu_432_p2(31 downto 13);
    high_3_fu_809_p3 <= 
        high_fu_90 when (icmp_ln65_fu_798_p2(0) = '1') else 
        mid_reg_1264;
    icmp_ln52_fu_695_p2 <= "1" when (signed(shl_ln1_fu_687_p3) < signed(ap_const_lv25_419)) else "0";
    icmp_ln55_fu_701_p2 <= "1" when (signed(shl_ln1_fu_687_p3) > signed(ap_const_lv25_100024)) else "0";
    icmp_ln63_fu_831_p2 <= "1" when (signed(tmp_1_fu_821_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln65_fu_798_p2 <= "1" when (unsigned(conv_i21_i_reg_1253) > unsigned(index_table_q0)) else "0";
    index_table_address0 <= zext_ln65_fu_793_p1(10 - 1 downto 0);

    index_table_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            index_table_ce0 <= ap_const_logic_1;
        else 
            index_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    invert_sqr_table_address0 <= zext_ln72_fu_847_p1(10 - 1 downto 0);

    invert_sqr_table_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            invert_sqr_table_ce0 <= ap_const_logic_1;
        else 
            invert_sqr_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    low_4_fu_803_p3 <= 
        mid_reg_1264 when (icmp_ln65_fu_798_p2(0) = '1') else 
        low_fu_86;
    lshr_ln64_1_fu_751_p4 <= sub_ln64_fu_745_p2(31 downto 1);
    lshr_ln64_2_fu_771_p4 <= add_ln64_fu_731_p2(31 downto 1);
    mean_fu_339_p4 <= mul_ln73_fu_333_p2(29 downto 13);
    mid_fu_785_p3 <= 
        sub_ln64_1_fu_765_p2 when (tmp_fu_737_p3(0) = '1') else 
        zext_ln64_1_fu_781_p1;
    mul_ln115_1_fu_432_p0 <= sext_ln115_1_fu_429_p1(19 - 1 downto 0);
    mul_ln115_1_fu_432_p1 <= sext_ln115_1_fu_429_p1(19 - 1 downto 0);
    mul_ln115_2_fu_451_p0 <= sext_ln115_2_fu_448_p1(19 - 1 downto 0);
    mul_ln115_2_fu_451_p1 <= sext_ln115_2_fu_448_p1(19 - 1 downto 0);
    mul_ln115_3_fu_470_p0 <= sext_ln115_3_fu_467_p1(19 - 1 downto 0);
    mul_ln115_3_fu_470_p1 <= sext_ln115_3_fu_467_p1(19 - 1 downto 0);
    mul_ln115_4_fu_489_p0 <= sext_ln115_4_fu_486_p1(19 - 1 downto 0);
    mul_ln115_4_fu_489_p1 <= sext_ln115_4_fu_486_p1(19 - 1 downto 0);
    mul_ln115_5_fu_508_p0 <= sext_ln115_5_fu_505_p1(19 - 1 downto 0);
    mul_ln115_5_fu_508_p1 <= sext_ln115_5_fu_505_p1(19 - 1 downto 0);
    mul_ln115_6_fu_527_p0 <= sext_ln115_6_fu_524_p1(19 - 1 downto 0);
    mul_ln115_6_fu_527_p1 <= sext_ln115_6_fu_524_p1(19 - 1 downto 0);
    mul_ln115_7_fu_546_p0 <= sext_ln115_7_fu_543_p1(19 - 1 downto 0);
    mul_ln115_7_fu_546_p1 <= sext_ln115_7_fu_543_p1(19 - 1 downto 0);
    mul_ln115_8_fu_565_p0 <= sext_ln115_8_fu_562_p1(19 - 1 downto 0);
    mul_ln115_8_fu_565_p1 <= sext_ln115_8_fu_562_p1(19 - 1 downto 0);
    mul_ln115_9_fu_584_p0 <= sext_ln115_9_fu_581_p1(19 - 1 downto 0);
    mul_ln115_9_fu_584_p1 <= sext_ln115_9_fu_581_p1(19 - 1 downto 0);
    mul_ln115_fu_413_p0 <= sext_ln115_fu_410_p1(19 - 1 downto 0);
    mul_ln115_fu_413_p1 <= sext_ln115_fu_410_p1(19 - 1 downto 0);
    mul_ln122_1_fu_882_p0 <= zext_ln122_fu_852_p1(25 - 1 downto 0);
    mul_ln122_2_fu_905_p0 <= zext_ln122_fu_852_p1(25 - 1 downto 0);
    mul_ln122_3_fu_928_p0 <= zext_ln122_fu_852_p1(25 - 1 downto 0);
    mul_ln122_4_fu_951_p0 <= zext_ln122_fu_852_p1(25 - 1 downto 0);
    mul_ln122_5_fu_974_p0 <= zext_ln122_fu_852_p1(25 - 1 downto 0);
    mul_ln122_6_fu_997_p0 <= zext_ln122_fu_852_p1(25 - 1 downto 0);
    mul_ln122_7_fu_1020_p0 <= zext_ln122_fu_852_p1(25 - 1 downto 0);
    mul_ln122_8_fu_1043_p0 <= zext_ln122_fu_852_p1(25 - 1 downto 0);
    mul_ln122_9_fu_1066_p0 <= zext_ln122_fu_852_p1(25 - 1 downto 0);
    mul_ln122_fu_859_p0 <= zext_ln122_fu_852_p1(25 - 1 downto 0);
    mul_ln73_1_fu_657_p1 <= ap_const_lv30_333(11 - 1 downto 0);
    mul_ln73_fu_333_p1 <= ap_const_lv30_333(11 - 1 downto 0);
        sext_ln101_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(var_fu_663_p4),18));

        sext_ln111_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mean_fu_339_p4),19));

        sext_ln115_1_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_1_reg_1172),32));

        sext_ln115_2_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_2_reg_1178),32));

        sext_ln115_3_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_3_reg_1184),32));

        sext_ln115_4_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_4_reg_1190),32));

        sext_ln115_5_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_5_reg_1196),32));

        sext_ln115_6_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_6_reg_1202),32));

        sext_ln115_7_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_7_reg_1208),32));

        sext_ln115_8_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_8_reg_1214),32));

        sext_ln115_9_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_9_reg_1220),32));

        sext_ln115_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_reg_1166),32));

        sext_ln122_11_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln122_5_fu_980_p4),33));

        sext_ln122_13_fu_1013_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln122_6_fu_1003_p4),33));

        sext_ln122_15_fu_1036_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln122_7_fu_1026_p4),33));

        sext_ln122_17_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln122_8_fu_1049_p4),33));

        sext_ln122_19_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln122_9_fu_1072_p4),33));

        sext_ln122_1_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_865_p4),33));

        sext_ln122_3_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln122_1_fu_888_p4),33));

        sext_ln122_5_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln122_2_fu_911_p4),33));

        sext_ln122_7_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln122_3_fu_934_p4),33));

        sext_ln122_9_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln122_4_fu_957_p4),33));

    shl_ln109_1_fu_248_p3 <= (data_2_val & ap_const_lv3_0);
    shl_ln109_2_fu_256_p3 <= (data_3_val & ap_const_lv3_0);
    shl_ln109_3_fu_264_p3 <= (data_4_val & ap_const_lv3_0);
    shl_ln109_4_fu_272_p3 <= (data_5_val & ap_const_lv3_0);
    shl_ln109_5_fu_280_p3 <= (data_6_val & ap_const_lv3_0);
    shl_ln109_6_fu_196_p3 <= (data_7_val & ap_const_lv3_0);
    shl_ln109_7_fu_204_p3 <= (data_8_val & ap_const_lv3_0);
    shl_ln109_8_fu_212_p3 <= (data_9_val & ap_const_lv3_0);
    shl_ln1_fu_687_p3 <= (x_fu_677_p2 & ap_const_lv7_0);
    shl_ln_fu_240_p3 <= (data_1_val & ap_const_lv3_0);
    sub_ln114_1_fu_359_p2 <= std_logic_vector(unsigned(shl_ln_fu_240_p3) - unsigned(sext_ln111_fu_349_p1));
    sub_ln114_2_fu_365_p2 <= std_logic_vector(unsigned(shl_ln109_1_fu_248_p3) - unsigned(sext_ln111_fu_349_p1));
    sub_ln114_3_fu_371_p2 <= std_logic_vector(unsigned(shl_ln109_2_fu_256_p3) - unsigned(sext_ln111_fu_349_p1));
    sub_ln114_4_fu_377_p2 <= std_logic_vector(unsigned(shl_ln109_3_fu_264_p3) - unsigned(sext_ln111_fu_349_p1));
    sub_ln114_5_fu_383_p2 <= std_logic_vector(unsigned(shl_ln109_4_fu_272_p3) - unsigned(sext_ln111_fu_349_p1));
    sub_ln114_6_fu_389_p2 <= std_logic_vector(unsigned(shl_ln109_5_fu_280_p3) - unsigned(sext_ln111_fu_349_p1));
    sub_ln114_7_fu_395_p2 <= std_logic_vector(unsigned(shl_ln109_6_reg_1146) - unsigned(sext_ln111_fu_349_p1));
    sub_ln114_8_fu_400_p2 <= std_logic_vector(unsigned(shl_ln109_7_reg_1151) - unsigned(sext_ln111_fu_349_p1));
    sub_ln114_9_fu_405_p2 <= std_logic_vector(unsigned(shl_ln109_8_reg_1156) - unsigned(sext_ln111_fu_349_p1));
    sub_ln114_fu_353_p2 <= std_logic_vector(unsigned(sum_cache_fu_232_p3) - unsigned(sext_ln111_fu_349_p1));
    sub_ln63_fu_815_p2 <= std_logic_vector(unsigned(high_3_fu_809_p3) - unsigned(low_4_fu_803_p3));
    sub_ln64_1_fu_765_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln64_fu_761_p1));
    sub_ln64_fu_745_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(add_ln64_fu_731_p2));
    sum_cache_fu_232_p3 <= (data_0_val & ap_const_lv3_0);
    tmp_1_fu_821_p4 <= sub_ln63_fu_815_p2(31 downto 1);
    tmp_fu_737_p3 <= add_ln64_fu_731_p2(31 downto 31);
    trunc_ln122_1_fu_888_p4 <= mul_ln122_1_fu_882_p2(43 downto 13);
    trunc_ln122_2_fu_911_p4 <= mul_ln122_2_fu_905_p2(43 downto 13);
    trunc_ln122_3_fu_934_p4 <= mul_ln122_3_fu_928_p2(43 downto 13);
    trunc_ln122_4_fu_957_p4 <= mul_ln122_4_fu_951_p2(43 downto 13);
    trunc_ln122_5_fu_980_p4 <= mul_ln122_5_fu_974_p2(43 downto 13);
    trunc_ln122_6_fu_1003_p4 <= mul_ln122_6_fu_997_p2(43 downto 13);
    trunc_ln122_7_fu_1026_p4 <= mul_ln122_7_fu_1020_p2(43 downto 13);
    trunc_ln122_8_fu_1049_p4 <= mul_ln122_8_fu_1043_p2(43 downto 13);
    trunc_ln122_9_fu_1072_p4 <= mul_ln122_9_fu_1066_p2(43 downto 13);
    trunc_ln3_fu_865_p4 <= mul_ln122_fu_859_p2(43 downto 13);
    trunc_ln52_fu_683_p1 <= x_fu_677_p2(14 - 1 downto 0);
    var_fu_663_p4 <= mul_ln73_1_fu_657_p2(29 downto 13);
    x_fu_677_p2 <= std_logic_vector(signed(sext_ln101_fu_673_p1) + signed(ap_const_lv18_8));
    zext_ln122_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_deno_inver_1_phi_fu_185_p6),44));
    zext_ln64_1_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln64_2_fu_771_p4),32));
    zext_ln64_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln64_1_fu_751_p4),32));
    zext_ln65_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mid_fu_785_p3),64));
    zext_ln72_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(low_4_fu_803_p3),64));
end behav;
