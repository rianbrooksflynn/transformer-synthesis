// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject_myproject,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu13p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.279857,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=2335,HLS_SYN_LUT=4522,HLS_VERSION=2023_2}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer_normalization_input,
        layer_normalization_input_ap_vld,
        layer2_out_0,
        layer2_out_0_ap_vld,
        layer2_out_1,
        layer2_out_1_ap_vld,
        layer2_out_2,
        layer2_out_2_ap_vld,
        layer2_out_3,
        layer2_out_3_ap_vld,
        layer2_out_4,
        layer2_out_4_ap_vld,
        layer2_out_5,
        layer2_out_5_ap_vld,
        layer2_out_6,
        layer2_out_6_ap_vld,
        layer2_out_7,
        layer2_out_7_ap_vld,
        layer2_out_8,
        layer2_out_8_ap_vld,
        layer2_out_9,
        layer2_out_9_ap_vld,
        layer2_out_10,
        layer2_out_10_ap_vld,
        layer2_out_11,
        layer2_out_11_ap_vld,
        layer2_out_12,
        layer2_out_12_ap_vld,
        layer2_out_13,
        layer2_out_13_ap_vld,
        layer2_out_14,
        layer2_out_14_ap_vld,
        layer2_out_15,
        layer2_out_15_ap_vld,
        layer2_out_16,
        layer2_out_16_ap_vld,
        layer2_out_17,
        layer2_out_17_ap_vld,
        layer2_out_18,
        layer2_out_18_ap_vld,
        layer2_out_19,
        layer2_out_19_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [319:0] layer_normalization_input;
input   layer_normalization_input_ap_vld;
output  [32:0] layer2_out_0;
output   layer2_out_0_ap_vld;
output  [32:0] layer2_out_1;
output   layer2_out_1_ap_vld;
output  [32:0] layer2_out_2;
output   layer2_out_2_ap_vld;
output  [32:0] layer2_out_3;
output   layer2_out_3_ap_vld;
output  [32:0] layer2_out_4;
output   layer2_out_4_ap_vld;
output  [32:0] layer2_out_5;
output   layer2_out_5_ap_vld;
output  [32:0] layer2_out_6;
output   layer2_out_6_ap_vld;
output  [32:0] layer2_out_7;
output   layer2_out_7_ap_vld;
output  [32:0] layer2_out_8;
output   layer2_out_8_ap_vld;
output  [32:0] layer2_out_9;
output   layer2_out_9_ap_vld;
output  [32:0] layer2_out_10;
output   layer2_out_10_ap_vld;
output  [32:0] layer2_out_11;
output   layer2_out_11_ap_vld;
output  [32:0] layer2_out_12;
output   layer2_out_12_ap_vld;
output  [32:0] layer2_out_13;
output   layer2_out_13_ap_vld;
output  [32:0] layer2_out_14;
output   layer2_out_14_ap_vld;
output  [32:0] layer2_out_15;
output   layer2_out_15_ap_vld;
output  [32:0] layer2_out_16;
output   layer2_out_16_ap_vld;
output  [32:0] layer2_out_17;
output   layer2_out_17_ap_vld;
output  [32:0] layer2_out_18;
output   layer2_out_18_ap_vld;
output  [32:0] layer2_out_19;
output   layer2_out_19_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer2_out_0_ap_vld;
reg layer2_out_1_ap_vld;
reg layer2_out_2_ap_vld;
reg layer2_out_3_ap_vld;
reg layer2_out_4_ap_vld;
reg layer2_out_5_ap_vld;
reg layer2_out_6_ap_vld;
reg layer2_out_7_ap_vld;
reg layer2_out_8_ap_vld;
reg layer2_out_9_ap_vld;
reg layer2_out_10_ap_vld;
reg layer2_out_11_ap_vld;
reg layer2_out_12_ap_vld;
reg layer2_out_13_ap_vld;
reg layer2_out_14_ap_vld;
reg layer2_out_15_ap_vld;
reg layer2_out_16_ap_vld;
reg layer2_out_17_ap_vld;
reg layer2_out_18_ap_vld;
reg layer2_out_19_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [319:0] layer_normalization_input_preg;
reg   [319:0] layer_normalization_input_in_sig;
reg    layer_normalization_input_ap_vld_preg;
reg    layer_normalization_input_ap_vld_in_sig;
reg    layer_normalization_input_blk_n;
wire   [15:0] in_val_fu_346_p1;
reg   [15:0] in_val_reg_660;
reg   [15:0] in_val_19_reg_665;
reg   [15:0] in_val_1_reg_670;
reg   [15:0] in_val_2_reg_675;
reg   [15:0] in_val_3_reg_680;
reg   [15:0] in_val_4_reg_685;
reg   [15:0] in_val_5_reg_690;
reg   [15:0] in_val_6_reg_695;
reg   [15:0] in_val_7_reg_700;
reg   [15:0] in_val_8_reg_705;
reg   [15:0] in_val_9_reg_710;
reg   [15:0] in_val_10_reg_715;
reg   [15:0] in_val_11_reg_720;
reg   [15:0] in_val_12_reg_725;
reg   [15:0] in_val_13_reg_730;
reg   [15:0] in_val_14_reg_735;
reg   [15:0] in_val_15_reg_740;
reg   [15:0] in_val_16_reg_745;
reg   [15:0] in_val_17_reg_750;
reg   [15:0] in_val_18_reg_755;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_start;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_done;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_idle;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_ready;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_0;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_1;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_2;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_3;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_4;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_start;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_done;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_idle;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_ready;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_0;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_1;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_2;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_3;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_4;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_start;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_done;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_idle;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_ready;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_0;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_1;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_2;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_3;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_4;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_start;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_done;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_idle;
wire    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_ready;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_0;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_1;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_2;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_3;
wire   [32:0] grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_4;
reg    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_start_reg;
reg    ap_block_state1_ignore_call65;
wire    ap_CS_fsm_state2;
reg    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_start_reg;
reg    ap_block_state1_ignore_call71;
reg    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_start_reg;
reg    ap_block_state1_ignore_call77;
reg    grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_start_reg;
reg    ap_block_state1_ignore_call83;
reg    ap_block_state1;
reg    ap_block_state2_on_subcall_done;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 layer_normalization_input_preg = 320'd0;
#0 layer_normalization_input_ap_vld_preg = 1'b0;
#0 grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_start_reg = 1'b0;
#0 grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_start_reg = 1'b0;
#0 grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_start_reg = 1'b0;
#0 grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_start_reg = 1'b0;
end

myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_start),
    .ap_done(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_done),
    .ap_idle(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_idle),
    .ap_ready(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_ready),
    .data_0_val(in_val_reg_660),
    .data_1_val(in_val_19_reg_665),
    .data_2_val(in_val_1_reg_670),
    .data_3_val(in_val_2_reg_675),
    .data_4_val(in_val_3_reg_680),
    .ap_return_0(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_0),
    .ap_return_1(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_1),
    .ap_return_2(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_2),
    .ap_return_3(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_3),
    .ap_return_4(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_4)
);

myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_start),
    .ap_done(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_done),
    .ap_idle(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_idle),
    .ap_ready(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_ready),
    .data_0_val(in_val_4_reg_685),
    .data_1_val(in_val_5_reg_690),
    .data_2_val(in_val_6_reg_695),
    .data_3_val(in_val_7_reg_700),
    .data_4_val(in_val_8_reg_705),
    .ap_return_0(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_0),
    .ap_return_1(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_1),
    .ap_return_2(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_2),
    .ap_return_3(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_3),
    .ap_return_4(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_4)
);

myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_start),
    .ap_done(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_done),
    .ap_idle(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_idle),
    .ap_ready(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_ready),
    .data_0_val(in_val_9_reg_710),
    .data_1_val(in_val_10_reg_715),
    .data_2_val(in_val_11_reg_720),
    .data_3_val(in_val_12_reg_725),
    .data_4_val(in_val_13_reg_730),
    .ap_return_0(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_0),
    .ap_return_1(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_1),
    .ap_return_2(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_2),
    .ap_return_3(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_3),
    .ap_return_4(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_4)
);

myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_start),
    .ap_done(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_done),
    .ap_idle(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_idle),
    .ap_ready(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_ready),
    .data_0_val(in_val_14_reg_735),
    .data_1_val(in_val_15_reg_740),
    .data_2_val(in_val_16_reg_745),
    .data_3_val(in_val_17_reg_750),
    .data_4_val(in_val_18_reg_755),
    .ap_return_0(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_0),
    .ap_return_1(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_1),
    .ap_return_2(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_2),
    .ap_return_3(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_3),
    .ap_return_4(grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1_ignore_call65))) begin
            grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_start_reg <= 1'b1;
        end else if ((grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_ready == 1'b1)) begin
            grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1_ignore_call71))) begin
            grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_start_reg <= 1'b1;
        end else if ((grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_ready == 1'b1)) begin
            grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1_ignore_call77))) begin
            grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_start_reg <= 1'b1;
        end else if ((grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_ready == 1'b1)) begin
            grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1_ignore_call83))) begin
            grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_start_reg <= 1'b1;
        end else if ((grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_ready == 1'b1)) begin
            grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        layer_normalization_input_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            layer_normalization_input_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_normalization_input_ap_vld == 1'b1))) begin
            layer_normalization_input_ap_vld_preg <= layer_normalization_input_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        layer_normalization_input_preg <= 320'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_normalization_input_ap_vld == 1'b1))) begin
            layer_normalization_input_preg <= layer_normalization_input;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        in_val_10_reg_715 <= {{layer_normalization_input_in_sig[191:176]}};
        in_val_11_reg_720 <= {{layer_normalization_input_in_sig[207:192]}};
        in_val_12_reg_725 <= {{layer_normalization_input_in_sig[223:208]}};
        in_val_13_reg_730 <= {{layer_normalization_input_in_sig[239:224]}};
        in_val_14_reg_735 <= {{layer_normalization_input_in_sig[255:240]}};
        in_val_15_reg_740 <= {{layer_normalization_input_in_sig[271:256]}};
        in_val_16_reg_745 <= {{layer_normalization_input_in_sig[287:272]}};
        in_val_17_reg_750 <= {{layer_normalization_input_in_sig[303:288]}};
        in_val_18_reg_755 <= {{layer_normalization_input_in_sig[319:304]}};
        in_val_19_reg_665 <= {{layer_normalization_input_in_sig[31:16]}};
        in_val_1_reg_670 <= {{layer_normalization_input_in_sig[47:32]}};
        in_val_2_reg_675 <= {{layer_normalization_input_in_sig[63:48]}};
        in_val_3_reg_680 <= {{layer_normalization_input_in_sig[79:64]}};
        in_val_4_reg_685 <= {{layer_normalization_input_in_sig[95:80]}};
        in_val_5_reg_690 <= {{layer_normalization_input_in_sig[111:96]}};
        in_val_6_reg_695 <= {{layer_normalization_input_in_sig[127:112]}};
        in_val_7_reg_700 <= {{layer_normalization_input_in_sig[143:128]}};
        in_val_8_reg_705 <= {{layer_normalization_input_in_sig[159:144]}};
        in_val_9_reg_710 <= {{layer_normalization_input_in_sig[175:160]}};
        in_val_reg_660 <= in_val_fu_346_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_0_ap_vld = 1'b1;
    end else begin
        layer2_out_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_10_ap_vld = 1'b1;
    end else begin
        layer2_out_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_11_ap_vld = 1'b1;
    end else begin
        layer2_out_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_12_ap_vld = 1'b1;
    end else begin
        layer2_out_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_13_ap_vld = 1'b1;
    end else begin
        layer2_out_13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_14_ap_vld = 1'b1;
    end else begin
        layer2_out_14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_15_ap_vld = 1'b1;
    end else begin
        layer2_out_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_16_ap_vld = 1'b1;
    end else begin
        layer2_out_16_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_17_ap_vld = 1'b1;
    end else begin
        layer2_out_17_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_18_ap_vld = 1'b1;
    end else begin
        layer2_out_18_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_19_ap_vld = 1'b1;
    end else begin
        layer2_out_19_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_1_ap_vld = 1'b1;
    end else begin
        layer2_out_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_2_ap_vld = 1'b1;
    end else begin
        layer2_out_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_3_ap_vld = 1'b1;
    end else begin
        layer2_out_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_4_ap_vld = 1'b1;
    end else begin
        layer2_out_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_5_ap_vld = 1'b1;
    end else begin
        layer2_out_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_6_ap_vld = 1'b1;
    end else begin
        layer2_out_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_7_ap_vld = 1'b1;
    end else begin
        layer2_out_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_8_ap_vld = 1'b1;
    end else begin
        layer2_out_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        layer2_out_9_ap_vld = 1'b1;
    end else begin
        layer2_out_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((layer_normalization_input_ap_vld == 1'b1)) begin
        layer_normalization_input_ap_vld_in_sig = layer_normalization_input_ap_vld;
    end else begin
        layer_normalization_input_ap_vld_in_sig = layer_normalization_input_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer_normalization_input_blk_n = layer_normalization_input_ap_vld;
    end else begin
        layer_normalization_input_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((layer_normalization_input_ap_vld == 1'b1)) begin
        layer_normalization_input_in_sig = layer_normalization_input;
    end else begin
        layer_normalization_input_in_sig = layer_normalization_input_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (layer_normalization_input_ap_vld_in_sig == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call65 = ((ap_start == 1'b0) | (layer_normalization_input_ap_vld_in_sig == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call71 = ((ap_start == 1'b0) | (layer_normalization_input_ap_vld_in_sig == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call77 = ((ap_start == 1'b0) | (layer_normalization_input_ap_vld_in_sig == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call83 = ((ap_start == 1'b0) | (layer_normalization_input_ap_vld_in_sig == 1'b0));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_done == 1'b0) | (grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_done == 1'b0) | (grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_done == 1'b0) | (grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_done == 1'b0));
end

assign grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_start = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_start_reg;

assign grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_start = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_start_reg;

assign grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_start = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_start_reg;

assign grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_start = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_start_reg;

assign in_val_fu_346_p1 = layer_normalization_input_in_sig[15:0];

assign layer2_out_0 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_0;

assign layer2_out_1 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_1;

assign layer2_out_10 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_0;

assign layer2_out_11 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_1;

assign layer2_out_12 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_2;

assign layer2_out_13 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_3;

assign layer2_out_14 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_320_ap_return_4;

assign layer2_out_15 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_0;

assign layer2_out_16 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_1;

assign layer2_out_17 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_2;

assign layer2_out_18 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_3;

assign layer2_out_19 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_333_ap_return_4;

assign layer2_out_2 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_2;

assign layer2_out_3 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_3;

assign layer2_out_4 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_294_ap_return_4;

assign layer2_out_5 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_0;

assign layer2_out_6 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_1;

assign layer2_out_7 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_2;

assign layer2_out_8 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_3;

assign layer2_out_9 = grp_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_fu_307_ap_return_4;

endmodule //myproject
