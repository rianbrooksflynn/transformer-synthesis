// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_0_val,
        data_1_val,
        data_2_val,
        data_3_val,
        data_4_val,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_0_val;
input  [15:0] data_1_val;
input  [15:0] data_2_val;
input  [15:0] data_3_val;
input  [15:0] data_4_val;
output  [32:0] ap_return_0;
output  [32:0] ap_return_1;
output  [32:0] ap_return_2;
output  [32:0] ap_return_3;
output  [32:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[32:0] ap_return_0;
reg[32:0] ap_return_1;
reg[32:0] ap_return_2;
reg[32:0] ap_return_3;
reg[32:0] ap_return_4;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] index_table_address0;
reg    index_table_ce0;
wire   [20:0] index_table_q0;
wire   [9:0] invert_sqr_table_address0;
reg    invert_sqr_table_ce0;
wire   [24:0] invert_sqr_table_q0;
wire  signed [18:0] sub_ln117_fu_244_p2;
reg  signed [18:0] sub_ln117_reg_740;
wire  signed [18:0] sub_ln117_1_fu_250_p2;
reg  signed [18:0] sub_ln117_1_reg_746;
wire  signed [18:0] sub_ln117_2_fu_256_p2;
reg  signed [18:0] sub_ln117_2_reg_752;
wire  signed [18:0] sub_ln117_3_fu_262_p2;
reg  signed [18:0] sub_ln117_3_reg_758;
wire  signed [18:0] sub_ln117_4_fu_268_p2;
reg  signed [18:0] sub_ln117_4_reg_764;
wire   [18:0] add_ln119_fu_387_p2;
reg  signed [18:0] add_ln119_reg_770;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln52_fu_434_p2;
reg   [0:0] icmp_ln52_reg_775;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln55_fu_440_p2;
reg   [0:0] icmp_ln55_reg_779;
wire   [20:0] conv_i21_i_fu_446_p3;
reg   [20:0] conv_i21_i_reg_797;
wire   [31:0] mid_fu_524_p3;
reg   [31:0] mid_reg_808;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [24:0] ap_phi_mux_deno_inver_1_phi_fu_145_p6;
reg   [24:0] deno_inver_1_reg_140;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln65_fu_532_p1;
wire   [63:0] zext_ln72_fu_586_p1;
wire   [0:0] icmp_ln63_fu_570_p2;
reg   [31:0] low_fu_76;
wire   [31:0] low_4_fu_542_p3;
reg   [31:0] high_fu_80;
wire   [31:0] high_3_fu_548_p3;
wire   [18:0] shl_ln_fu_164_p3;
wire   [18:0] sum_cache_fu_156_p3;
wire   [18:0] shl_ln111_2_fu_180_p3;
wire   [18:0] shl_ln111_3_fu_188_p3;
wire   [18:0] add_ln111_2_fu_202_p2;
wire   [18:0] shl_ln111_1_fu_172_p3;
wire   [18:0] add_ln111_3_fu_208_p2;
wire   [18:0] add_ln111_1_fu_196_p2;
wire  signed [18:0] add_ln111_fu_214_p2;
wire   [11:0] mul_ln73_fu_224_p1;
wire   [30:0] mul_ln73_fu_224_p2;
wire   [17:0] mean_fu_230_p4;
wire  signed [18:0] sext_ln113_fu_240_p1;
wire  signed [18:0] mul_ln118_fu_277_p0;
wire  signed [31:0] sext_ln118_fu_274_p1;
wire  signed [18:0] mul_ln118_fu_277_p1;
wire   [31:0] mul_ln118_fu_277_p2;
wire  signed [18:0] mul_ln118_1_fu_296_p0;
wire  signed [31:0] sext_ln118_1_fu_293_p1;
wire  signed [18:0] mul_ln118_1_fu_296_p1;
wire   [31:0] mul_ln118_1_fu_296_p2;
wire  signed [18:0] mul_ln118_2_fu_315_p0;
wire  signed [31:0] sext_ln118_2_fu_312_p1;
wire  signed [18:0] mul_ln118_2_fu_315_p1;
wire   [31:0] mul_ln118_2_fu_315_p2;
wire  signed [18:0] mul_ln118_3_fu_334_p0;
wire  signed [31:0] sext_ln118_3_fu_331_p1;
wire  signed [18:0] mul_ln118_3_fu_334_p1;
wire   [31:0] mul_ln118_3_fu_334_p2;
wire  signed [18:0] mul_ln118_4_fu_353_p0;
wire  signed [31:0] sext_ln118_4_fu_350_p1;
wire  signed [18:0] mul_ln118_4_fu_353_p1;
wire   [31:0] mul_ln118_4_fu_353_p2;
wire   [18:0] diff_5_fu_283_p4;
wire   [18:0] diff_fu_302_p4;
wire   [18:0] diff_3_fu_340_p4;
wire   [18:0] diff_4_fu_359_p4;
wire   [18:0] add_ln119_2_fu_375_p2;
wire   [18:0] diff_2_fu_321_p4;
wire   [18:0] add_ln119_3_fu_381_p2;
wire   [18:0] add_ln119_1_fu_369_p2;
wire   [11:0] mul_ln73_1_fu_396_p1;
wire   [30:0] mul_ln73_1_fu_396_p2;
wire   [17:0] var_fu_402_p4;
wire  signed [18:0] sext_ln121_fu_412_p1;
wire   [18:0] x_fu_416_p2;
wire   [25:0] shl_ln1_fu_426_p3;
wire   [13:0] trunc_ln52_fu_422_p1;
wire   [31:0] add_ln64_fu_470_p2;
wire   [31:0] sub_ln64_fu_484_p2;
wire   [30:0] lshr_ln64_1_fu_490_p4;
wire   [31:0] zext_ln64_fu_500_p1;
wire   [30:0] lshr_ln64_2_fu_510_p4;
wire   [0:0] tmp_fu_476_p3;
wire   [31:0] sub_ln64_1_fu_504_p2;
wire   [31:0] zext_ln64_1_fu_520_p1;
wire   [0:0] icmp_ln65_fu_537_p2;
wire   [31:0] sub_ln63_fu_554_p2;
wire   [30:0] tmp_1_fu_560_p4;
wire   [24:0] mul_ln126_fu_598_p0;
wire   [43:0] zext_ln126_fu_591_p1;
wire   [43:0] mul_ln126_fu_598_p2;
wire   [30:0] trunc_ln3_fu_604_p4;
wire   [24:0] mul_ln126_1_fu_621_p0;
wire   [43:0] mul_ln126_1_fu_621_p2;
wire   [30:0] trunc_ln126_1_fu_627_p4;
wire   [24:0] mul_ln126_2_fu_644_p0;
wire   [43:0] mul_ln126_2_fu_644_p2;
wire   [30:0] trunc_ln126_2_fu_650_p4;
wire   [24:0] mul_ln126_3_fu_667_p0;
wire   [43:0] mul_ln126_3_fu_667_p2;
wire   [30:0] trunc_ln126_3_fu_673_p4;
wire   [24:0] mul_ln126_4_fu_690_p0;
wire   [43:0] mul_ln126_4_fu_690_p2;
wire   [30:0] trunc_ln126_4_fu_696_p4;
wire  signed [32:0] sext_ln126_1_fu_614_p1;
wire  signed [32:0] sext_ln126_3_fu_637_p1;
wire  signed [32:0] sext_ln126_5_fu_660_p1;
wire  signed [32:0] sext_ln126_7_fu_683_p1;
wire  signed [32:0] sext_ln126_9_fu_706_p1;
reg   [32:0] ap_return_0_preg;
reg   [32:0] ap_return_1_preg;
reg   [32:0] ap_return_2_preg;
reg   [32:0] ap_return_3_preg;
reg   [32:0] ap_return_4_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 low_fu_76 = 32'd0;
#0 high_fu_80 = 32'd0;
#0 ap_return_0_preg = 33'd0;
#0 ap_return_1_preg = 33'd0;
#0 ap_return_2_preg = 33'd0;
#0 ap_return_3_preg = 33'd0;
#0 ap_return_4_preg = 33'd0;
end

myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_index_table_Rbkb #(
    .DataWidth( 21 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
index_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(index_table_address0),
    .ce0(index_table_ce0),
    .q0(index_table_q0)
);

myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tacud #(
    .DataWidth( 25 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_sqr_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_sqr_table_address0),
    .ce0(invert_sqr_table_ce0),
    .q0(invert_sqr_table_q0)
);

myproject_mul_19s_12ns_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 31 ))
mul_19s_12ns_31_1_1_U1(
    .din0(add_ln111_fu_214_p2),
    .din1(mul_ln73_fu_224_p1),
    .dout(mul_ln73_fu_224_p2)
);

myproject_mul_19s_19s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
mul_19s_19s_32_1_1_U2(
    .din0(mul_ln118_fu_277_p0),
    .din1(mul_ln118_fu_277_p1),
    .dout(mul_ln118_fu_277_p2)
);

myproject_mul_19s_19s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
mul_19s_19s_32_1_1_U3(
    .din0(mul_ln118_1_fu_296_p0),
    .din1(mul_ln118_1_fu_296_p1),
    .dout(mul_ln118_1_fu_296_p2)
);

myproject_mul_19s_19s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
mul_19s_19s_32_1_1_U4(
    .din0(mul_ln118_2_fu_315_p0),
    .din1(mul_ln118_2_fu_315_p1),
    .dout(mul_ln118_2_fu_315_p2)
);

myproject_mul_19s_19s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
mul_19s_19s_32_1_1_U5(
    .din0(mul_ln118_3_fu_334_p0),
    .din1(mul_ln118_3_fu_334_p1),
    .dout(mul_ln118_3_fu_334_p2)
);

myproject_mul_19s_19s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
mul_19s_19s_32_1_1_U6(
    .din0(mul_ln118_4_fu_353_p0),
    .din1(mul_ln118_4_fu_353_p1),
    .dout(mul_ln118_4_fu_353_p2)
);

myproject_mul_19s_12ns_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 31 ))
mul_19s_12ns_31_1_1_U7(
    .din0(add_ln119_reg_770),
    .din1(mul_ln73_1_fu_396_p1),
    .dout(mul_ln73_1_fu_396_p2)
);

myproject_mul_25ns_19s_44_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 44 ))
mul_25ns_19s_44_1_1_U8(
    .din0(mul_ln126_fu_598_p0),
    .din1(sub_ln117_reg_740),
    .dout(mul_ln126_fu_598_p2)
);

myproject_mul_25ns_19s_44_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 44 ))
mul_25ns_19s_44_1_1_U9(
    .din0(mul_ln126_1_fu_621_p0),
    .din1(sub_ln117_1_reg_746),
    .dout(mul_ln126_1_fu_621_p2)
);

myproject_mul_25ns_19s_44_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 44 ))
mul_25ns_19s_44_1_1_U10(
    .din0(mul_ln126_2_fu_644_p0),
    .din1(sub_ln117_2_reg_752),
    .dout(mul_ln126_2_fu_644_p2)
);

myproject_mul_25ns_19s_44_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 44 ))
mul_25ns_19s_44_1_1_U11(
    .din0(mul_ln126_3_fu_667_p0),
    .din1(sub_ln117_3_reg_758),
    .dout(mul_ln126_3_fu_667_p2)
);

myproject_mul_25ns_19s_44_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 44 ))
mul_25ns_19s_44_1_1_U12(
    .din0(mul_ln126_4_fu_690_p0),
    .din1(sub_ln117_4_reg_764),
    .dout(mul_ln126_4_fu_690_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 33'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_0_preg <= sext_ln126_1_fu_614_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 33'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_1_preg <= sext_ln126_3_fu_637_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 33'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_2_preg <= sext_ln126_5_fu_660_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 33'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_3_preg <= sext_ln126_7_fu_683_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 33'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_4_preg <= sext_ln126_9_fu_706_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_440_p2 == 1'd1) & (icmp_ln52_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        deno_inver_1_reg_140 <= 25'd1048557;
    end else if (((icmp_ln52_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        deno_inver_1_reg_140 <= 25'd33158886;
    end else if (((icmp_ln55_reg_779 == 1'd0) & (icmp_ln52_reg_775 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        deno_inver_1_reg_140 <= invert_sqr_table_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_440_p2 == 1'd0) & (icmp_ln52_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        high_fu_80 <= 32'd1023;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        high_fu_80 <= high_3_fu_548_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_440_p2 == 1'd0) & (icmp_ln52_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        low_fu_76 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        low_fu_76 <= low_4_fu_542_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln119_reg_770 <= add_ln119_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_i21_i_reg_797[20 : 7] <= conv_i21_i_fu_446_p3[20 : 7];
        icmp_ln52_reg_775 <= icmp_ln52_fu_434_p2;
        icmp_ln55_reg_779 <= icmp_ln55_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mid_reg_808 <= mid_fu_524_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sub_ln117_1_reg_746 <= sub_ln117_1_fu_250_p2;
        sub_ln117_2_reg_752 <= sub_ln117_2_fu_256_p2;
        sub_ln117_3_reg_758 <= sub_ln117_3_fu_262_p2;
        sub_ln117_4_reg_764 <= sub_ln117_4_fu_268_p2;
        sub_ln117_reg_740 <= sub_ln117_fu_244_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_779 == 1'd0) & (icmp_ln52_reg_775 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_phi_mux_deno_inver_1_phi_fu_145_p6 = invert_sqr_table_q0;
    end else begin
        ap_phi_mux_deno_inver_1_phi_fu_145_p6 = deno_inver_1_reg_140;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_0 = sext_ln126_1_fu_614_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_1 = sext_ln126_3_fu_637_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_2 = sext_ln126_5_fu_660_p1;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_3 = sext_ln126_7_fu_683_p1;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_4 = sext_ln126_9_fu_706_p1;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        index_table_ce0 = 1'b1;
    end else begin
        index_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        invert_sqr_table_ce0 = 1'b1;
    end else begin
        invert_sqr_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln55_fu_440_p2 == 1'd0) & (icmp_ln52_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln63_fu_570_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln111_1_fu_196_p2 = (shl_ln_fu_164_p3 + sum_cache_fu_156_p3);

assign add_ln111_2_fu_202_p2 = (shl_ln111_2_fu_180_p3 + shl_ln111_3_fu_188_p3);

assign add_ln111_3_fu_208_p2 = (add_ln111_2_fu_202_p2 + shl_ln111_1_fu_172_p3);

assign add_ln111_fu_214_p2 = (add_ln111_3_fu_208_p2 + add_ln111_1_fu_196_p2);

assign add_ln119_1_fu_369_p2 = (diff_5_fu_283_p4 + diff_fu_302_p4);

assign add_ln119_2_fu_375_p2 = (diff_3_fu_340_p4 + diff_4_fu_359_p4);

assign add_ln119_3_fu_381_p2 = (add_ln119_2_fu_375_p2 + diff_2_fu_321_p4);

assign add_ln119_fu_387_p2 = (add_ln119_3_fu_381_p2 + add_ln119_1_fu_369_p2);

assign add_ln64_fu_470_p2 = (low_fu_76 + high_fu_80);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign conv_i21_i_fu_446_p3 = {{trunc_ln52_fu_422_p1}, {7'd0}};

assign diff_2_fu_321_p4 = {{mul_ln118_2_fu_315_p2[31:13]}};

assign diff_3_fu_340_p4 = {{mul_ln118_3_fu_334_p2[31:13]}};

assign diff_4_fu_359_p4 = {{mul_ln118_4_fu_353_p2[31:13]}};

assign diff_5_fu_283_p4 = {{mul_ln118_fu_277_p2[31:13]}};

assign diff_fu_302_p4 = {{mul_ln118_1_fu_296_p2[31:13]}};

assign high_3_fu_548_p3 = ((icmp_ln65_fu_537_p2[0:0] == 1'b1) ? high_fu_80 : mid_reg_808);

assign icmp_ln52_fu_434_p2 = (($signed(shl_ln1_fu_426_p3) < $signed(26'd1049)) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_440_p2 = (($signed(shl_ln1_fu_426_p3) > $signed(26'd1048612)) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_570_p2 = (($signed(tmp_1_fu_560_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_537_p2 = ((conv_i21_i_reg_797 > index_table_q0) ? 1'b1 : 1'b0);

assign index_table_address0 = zext_ln65_fu_532_p1;

assign invert_sqr_table_address0 = zext_ln72_fu_586_p1;

assign low_4_fu_542_p3 = ((icmp_ln65_fu_537_p2[0:0] == 1'b1) ? mid_reg_808 : low_fu_76);

assign lshr_ln64_1_fu_490_p4 = {{sub_ln64_fu_484_p2[31:1]}};

assign lshr_ln64_2_fu_510_p4 = {{add_ln64_fu_470_p2[31:1]}};

assign mean_fu_230_p4 = {{mul_ln73_fu_224_p2[30:13]}};

assign mid_fu_524_p3 = ((tmp_fu_476_p3[0:0] == 1'b1) ? sub_ln64_1_fu_504_p2 : zext_ln64_1_fu_520_p1);

assign mul_ln118_1_fu_296_p0 = sext_ln118_1_fu_293_p1;

assign mul_ln118_1_fu_296_p1 = sext_ln118_1_fu_293_p1;

assign mul_ln118_2_fu_315_p0 = sext_ln118_2_fu_312_p1;

assign mul_ln118_2_fu_315_p1 = sext_ln118_2_fu_312_p1;

assign mul_ln118_3_fu_334_p0 = sext_ln118_3_fu_331_p1;

assign mul_ln118_3_fu_334_p1 = sext_ln118_3_fu_331_p1;

assign mul_ln118_4_fu_353_p0 = sext_ln118_4_fu_350_p1;

assign mul_ln118_4_fu_353_p1 = sext_ln118_4_fu_350_p1;

assign mul_ln118_fu_277_p0 = sext_ln118_fu_274_p1;

assign mul_ln118_fu_277_p1 = sext_ln118_fu_274_p1;

assign mul_ln126_1_fu_621_p0 = zext_ln126_fu_591_p1;

assign mul_ln126_2_fu_644_p0 = zext_ln126_fu_591_p1;

assign mul_ln126_3_fu_667_p0 = zext_ln126_fu_591_p1;

assign mul_ln126_4_fu_690_p0 = zext_ln126_fu_591_p1;

assign mul_ln126_fu_598_p0 = zext_ln126_fu_591_p1;

assign mul_ln73_1_fu_396_p1 = 31'd1638;

assign mul_ln73_fu_224_p1 = 31'd1638;

assign sext_ln113_fu_240_p1 = $signed(mean_fu_230_p4);

assign sext_ln118_1_fu_293_p1 = sub_ln117_1_reg_746;

assign sext_ln118_2_fu_312_p1 = sub_ln117_2_reg_752;

assign sext_ln118_3_fu_331_p1 = sub_ln117_3_reg_758;

assign sext_ln118_4_fu_350_p1 = sub_ln117_4_reg_764;

assign sext_ln118_fu_274_p1 = sub_ln117_reg_740;

assign sext_ln121_fu_412_p1 = $signed(var_fu_402_p4);

assign sext_ln126_1_fu_614_p1 = $signed(trunc_ln3_fu_604_p4);

assign sext_ln126_3_fu_637_p1 = $signed(trunc_ln126_1_fu_627_p4);

assign sext_ln126_5_fu_660_p1 = $signed(trunc_ln126_2_fu_650_p4);

assign sext_ln126_7_fu_683_p1 = $signed(trunc_ln126_3_fu_673_p4);

assign sext_ln126_9_fu_706_p1 = $signed(trunc_ln126_4_fu_696_p4);

assign shl_ln111_1_fu_172_p3 = {{data_2_val}, {3'd0}};

assign shl_ln111_2_fu_180_p3 = {{data_3_val}, {3'd0}};

assign shl_ln111_3_fu_188_p3 = {{data_4_val}, {3'd0}};

assign shl_ln1_fu_426_p3 = {{x_fu_416_p2}, {7'd0}};

assign shl_ln_fu_164_p3 = {{data_1_val}, {3'd0}};

assign sub_ln117_1_fu_250_p2 = ($signed(shl_ln_fu_164_p3) - $signed(sext_ln113_fu_240_p1));

assign sub_ln117_2_fu_256_p2 = ($signed(shl_ln111_1_fu_172_p3) - $signed(sext_ln113_fu_240_p1));

assign sub_ln117_3_fu_262_p2 = ($signed(shl_ln111_2_fu_180_p3) - $signed(sext_ln113_fu_240_p1));

assign sub_ln117_4_fu_268_p2 = ($signed(shl_ln111_3_fu_188_p3) - $signed(sext_ln113_fu_240_p1));

assign sub_ln117_fu_244_p2 = ($signed(sum_cache_fu_156_p3) - $signed(sext_ln113_fu_240_p1));

assign sub_ln63_fu_554_p2 = (high_3_fu_548_p3 - low_4_fu_542_p3);

assign sub_ln64_1_fu_504_p2 = (32'd0 - zext_ln64_fu_500_p1);

assign sub_ln64_fu_484_p2 = (32'd0 - add_ln64_fu_470_p2);

assign sum_cache_fu_156_p3 = {{data_0_val}, {3'd0}};

assign tmp_1_fu_560_p4 = {{sub_ln63_fu_554_p2[31:1]}};

assign tmp_fu_476_p3 = add_ln64_fu_470_p2[32'd31];

assign trunc_ln126_1_fu_627_p4 = {{mul_ln126_1_fu_621_p2[43:13]}};

assign trunc_ln126_2_fu_650_p4 = {{mul_ln126_2_fu_644_p2[43:13]}};

assign trunc_ln126_3_fu_673_p4 = {{mul_ln126_3_fu_667_p2[43:13]}};

assign trunc_ln126_4_fu_696_p4 = {{mul_ln126_4_fu_690_p2[43:13]}};

assign trunc_ln3_fu_604_p4 = {{mul_ln126_fu_598_p2[43:13]}};

assign trunc_ln52_fu_422_p1 = x_fu_416_p2[13:0];

assign var_fu_402_p4 = {{mul_ln73_1_fu_396_p2[30:13]}};

assign x_fu_416_p2 = ($signed(sext_ln121_fu_412_p1) + $signed(19'd8));

assign zext_ln126_fu_591_p1 = ap_phi_mux_deno_inver_1_phi_fu_145_p6;

assign zext_ln64_1_fu_520_p1 = lshr_ln64_2_fu_510_p4;

assign zext_ln64_fu_500_p1 = lshr_ln64_1_fu_490_p4;

assign zext_ln65_fu_532_p1 = mid_fu_524_p3;

assign zext_ln72_fu_586_p1 = low_4_fu_542_p3;

always @ (posedge ap_clk) begin
    conv_i21_i_reg_797[6:0] <= 7'b0000000;
end

endmodule //myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s
