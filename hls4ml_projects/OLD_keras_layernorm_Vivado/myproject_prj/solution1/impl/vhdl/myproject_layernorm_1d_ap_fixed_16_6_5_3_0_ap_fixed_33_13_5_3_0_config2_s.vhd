-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (32 downto 0) );
end;


architecture behav of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv31_666 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000011001100110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal invert_sqr_table_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal invert_sqr_table_ce0 : STD_LOGIC;
    signal invert_sqr_table_q0 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln132_fu_211_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_reg_637 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sub_ln132_reg_637_pp0_iter1_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_reg_637_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_reg_637_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_1_fu_217_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_1_reg_643 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_1_reg_643_pp0_iter1_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_1_reg_643_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_1_reg_643_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_2_fu_223_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_2_reg_649 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_2_reg_649_pp0_iter1_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_2_reg_649_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_2_reg_649_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_3_fu_229_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_3_reg_655 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_3_reg_655_pp0_iter1_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_3_reg_655_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_3_reg_655_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_4_fu_235_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_4_reg_661 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_4_reg_661_pp0_iter1_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_4_reg_661_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln132_4_reg_661_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln134_fu_354_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln134_reg_667 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln138_fu_457_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln138_reg_672 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln141_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln141_reg_677 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln142_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal shl_ln_fu_131_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sum_cache_fu_123_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln126_2_fu_147_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln126_3_fu_155_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln126_2_fu_169_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln126_1_fu_139_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln126_3_fu_175_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln126_1_fu_163_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln126_fu_181_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln73_fu_191_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln73_fu_191_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mean_fu_197_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln128_fu_207_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln133_fu_244_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln133_fu_241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln133_fu_244_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln133_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln133_1_fu_263_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln133_1_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln133_1_fu_263_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln133_1_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln133_2_fu_282_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln133_2_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln133_2_fu_282_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln133_2_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln133_3_fu_301_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln133_3_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln133_3_fu_301_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln133_3_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln133_4_fu_320_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln133_4_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln133_4_fu_320_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln133_4_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal diff_5_fu_250_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_fu_269_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_3_fu_307_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_4_fu_326_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln134_2_fu_342_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal diff_2_fu_288_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln134_3_fu_348_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln134_1_fu_336_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln73_1_fu_363_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln73_1_fu_363_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_369_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_391_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_401_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln138_fu_379_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln138_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln138_fu_415_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_383_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln138_fu_421_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal index_fu_429_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln138_1_fu_437_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_1_fu_449_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_461_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal index_2_fu_477_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln146_fu_495_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln146_fu_488_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln146_fu_495_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln3_fu_501_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln146_1_fu_518_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln146_1_fu_518_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln146_1_fu_524_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln146_2_fu_541_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln146_2_fu_541_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln146_2_fu_547_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln146_3_fu_564_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln146_3_fu_564_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln146_3_fu_570_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln146_4_fu_587_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln146_4_fu_587_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln146_4_fu_593_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln146_1_fu_511_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln146_3_fu_534_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln146_5_fu_557_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln146_7_fu_580_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln146_9_fu_603_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_19s_12ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component myproject_mul_19s_19s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_mul_26ns_19s_45_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    invert_sqr_table_U : component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb
    generic map (
        DataWidth => 26,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_sqr_table_address0,
        ce0 => invert_sqr_table_ce0,
        q0 => invert_sqr_table_q0);

    mul_19s_12ns_31_1_1_U1 : component myproject_mul_19s_12ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 12,
        dout_WIDTH => 31)
    port map (
        din0 => add_ln126_fu_181_p2,
        din1 => mul_ln73_fu_191_p1,
        dout => mul_ln73_fu_191_p2);

    mul_19s_19s_32_1_1_U2 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln133_fu_244_p0,
        din1 => mul_ln133_fu_244_p1,
        dout => mul_ln133_fu_244_p2);

    mul_19s_19s_32_1_1_U3 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln133_1_fu_263_p0,
        din1 => mul_ln133_1_fu_263_p1,
        dout => mul_ln133_1_fu_263_p2);

    mul_19s_19s_32_1_1_U4 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln133_2_fu_282_p0,
        din1 => mul_ln133_2_fu_282_p1,
        dout => mul_ln133_2_fu_282_p2);

    mul_19s_19s_32_1_1_U5 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln133_3_fu_301_p0,
        din1 => mul_ln133_3_fu_301_p1,
        dout => mul_ln133_3_fu_301_p2);

    mul_19s_19s_32_1_1_U6 : component myproject_mul_19s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln133_4_fu_320_p0,
        din1 => mul_ln133_4_fu_320_p1,
        dout => mul_ln133_4_fu_320_p2);

    mul_19s_12ns_31_1_1_U7 : component myproject_mul_19s_12ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 12,
        dout_WIDTH => 31)
    port map (
        din0 => add_ln134_reg_667,
        din1 => mul_ln73_1_fu_363_p1,
        dout => mul_ln73_1_fu_363_p2);

    mul_26ns_19s_45_1_1_U8 : component myproject_mul_26ns_19s_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 26,
        din1_WIDTH => 19,
        dout_WIDTH => 45)
    port map (
        din0 => mul_ln146_fu_495_p0,
        din1 => sub_ln132_reg_637_pp0_iter3_reg,
        dout => mul_ln146_fu_495_p2);

    mul_26ns_19s_45_1_1_U9 : component myproject_mul_26ns_19s_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 26,
        din1_WIDTH => 19,
        dout_WIDTH => 45)
    port map (
        din0 => mul_ln146_1_fu_518_p0,
        din1 => sub_ln132_1_reg_643_pp0_iter3_reg,
        dout => mul_ln146_1_fu_518_p2);

    mul_26ns_19s_45_1_1_U10 : component myproject_mul_26ns_19s_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 26,
        din1_WIDTH => 19,
        dout_WIDTH => 45)
    port map (
        din0 => mul_ln146_2_fu_541_p0,
        din1 => sub_ln132_2_reg_649_pp0_iter3_reg,
        dout => mul_ln146_2_fu_541_p2);

    mul_26ns_19s_45_1_1_U11 : component myproject_mul_26ns_19s_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 26,
        din1_WIDTH => 19,
        dout_WIDTH => 45)
    port map (
        din0 => mul_ln146_3_fu_564_p0,
        din1 => sub_ln132_3_reg_655_pp0_iter3_reg,
        dout => mul_ln146_3_fu_564_p2);

    mul_26ns_19s_45_1_1_U12 : component myproject_mul_26ns_19s_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 26,
        din1_WIDTH => 19,
        dout_WIDTH => 45)
    port map (
        din0 => mul_ln146_4_fu_587_p0,
        din1 => sub_ln132_4_reg_661_pp0_iter3_reg,
        dout => mul_ln146_4_fu_587_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln134_reg_667 <= add_ln134_fu_354_p2;
                sub_ln132_1_reg_643 <= sub_ln132_1_fu_217_p2;
                sub_ln132_1_reg_643_pp0_iter1_reg <= sub_ln132_1_reg_643;
                sub_ln132_2_reg_649 <= sub_ln132_2_fu_223_p2;
                sub_ln132_2_reg_649_pp0_iter1_reg <= sub_ln132_2_reg_649;
                sub_ln132_3_reg_655 <= sub_ln132_3_fu_229_p2;
                sub_ln132_3_reg_655_pp0_iter1_reg <= sub_ln132_3_reg_655;
                sub_ln132_4_reg_661 <= sub_ln132_4_fu_235_p2;
                sub_ln132_4_reg_661_pp0_iter1_reg <= sub_ln132_4_reg_661;
                sub_ln132_reg_637 <= sub_ln132_fu_211_p2;
                sub_ln132_reg_637_pp0_iter1_reg <= sub_ln132_reg_637;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                icmp_ln141_reg_677 <= icmp_ln141_fu_471_p2;
                sub_ln132_1_reg_643_pp0_iter2_reg <= sub_ln132_1_reg_643_pp0_iter1_reg;
                sub_ln132_1_reg_643_pp0_iter3_reg <= sub_ln132_1_reg_643_pp0_iter2_reg;
                sub_ln132_2_reg_649_pp0_iter2_reg <= sub_ln132_2_reg_649_pp0_iter1_reg;
                sub_ln132_2_reg_649_pp0_iter3_reg <= sub_ln132_2_reg_649_pp0_iter2_reg;
                sub_ln132_3_reg_655_pp0_iter2_reg <= sub_ln132_3_reg_655_pp0_iter1_reg;
                sub_ln132_3_reg_655_pp0_iter3_reg <= sub_ln132_3_reg_655_pp0_iter2_reg;
                sub_ln132_4_reg_661_pp0_iter2_reg <= sub_ln132_4_reg_661_pp0_iter1_reg;
                sub_ln132_4_reg_661_pp0_iter3_reg <= sub_ln132_4_reg_661_pp0_iter2_reg;
                sub_ln132_reg_637_pp0_iter2_reg <= sub_ln132_reg_637_pp0_iter1_reg;
                sub_ln132_reg_637_pp0_iter3_reg <= sub_ln132_reg_637_pp0_iter2_reg;
                trunc_ln138_reg_672 <= trunc_ln138_fu_457_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln126_1_fu_163_p2 <= std_logic_vector(unsigned(shl_ln_fu_131_p3) + unsigned(sum_cache_fu_123_p3));
    add_ln126_2_fu_169_p2 <= std_logic_vector(unsigned(shl_ln126_2_fu_147_p3) + unsigned(shl_ln126_3_fu_155_p3));
    add_ln126_3_fu_175_p2 <= std_logic_vector(unsigned(add_ln126_2_fu_169_p2) + unsigned(shl_ln126_1_fu_139_p3));
    add_ln126_fu_181_p2 <= std_logic_vector(unsigned(add_ln126_3_fu_175_p2) + unsigned(add_ln126_1_fu_163_p2));
    add_ln134_1_fu_336_p2 <= std_logic_vector(unsigned(diff_5_fu_250_p4) + unsigned(diff_fu_269_p4));
    add_ln134_2_fu_342_p2 <= std_logic_vector(unsigned(diff_3_fu_307_p4) + unsigned(diff_4_fu_326_p4));
    add_ln134_3_fu_348_p2 <= std_logic_vector(unsigned(add_ln134_2_fu_342_p2) + unsigned(diff_2_fu_288_p4));
    add_ln134_fu_354_p2 <= std_logic_vector(unsigned(add_ln134_3_fu_348_p2) + unsigned(add_ln134_1_fu_336_p2));
    add_ln138_fu_415_p2 <= std_logic_vector(signed(sext_ln138_fu_379_p1) + signed(ap_const_lv17_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= sext_ln146_1_fu_511_p1;
    ap_return_1 <= sext_ln146_3_fu_534_p1;
    ap_return_2 <= sext_ln146_5_fu_557_p1;
    ap_return_3 <= sext_ln146_7_fu_580_p1;
    ap_return_4 <= sext_ln146_9_fu_603_p1;
    diff_2_fu_288_p4 <= mul_ln133_2_fu_282_p2(31 downto 13);
    diff_3_fu_307_p4 <= mul_ln133_3_fu_301_p2(31 downto 13);
    diff_4_fu_326_p4 <= mul_ln133_4_fu_320_p2(31 downto 13);
    diff_5_fu_250_p4 <= mul_ln133_fu_244_p2(31 downto 13);
    diff_fu_269_p4 <= mul_ln133_1_fu_263_p2(31 downto 13);
    icmp_ln138_fu_409_p2 <= "1" when (tmp_s_fu_401_p3 = ap_const_lv13_0) else "0";
    icmp_ln141_fu_471_p2 <= "0" when (tmp_4_fu_461_p4 = ap_const_lv6_0) else "1";
    index_1_fu_449_p3 <= 
        ap_const_lv17_0 when (tmp_3_fu_441_p3(0) = '1') else 
        index_fu_429_p3;
    index_2_fu_477_p3 <= 
        ap_const_lv11_7FF when (icmp_ln141_reg_677(0) = '1') else 
        trunc_ln138_reg_672;
    index_fu_429_p3 <= 
        select_ln138_fu_421_p3 when (tmp_2_fu_383_p3(0) = '1') else 
        sext_ln138_fu_379_p1;
    invert_sqr_table_address0 <= zext_ln142_fu_483_p1(11 - 1 downto 0);

    invert_sqr_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            invert_sqr_table_ce0 <= ap_const_logic_1;
        else 
            invert_sqr_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mean_fu_197_p4 <= mul_ln73_fu_191_p2(30 downto 13);
    mul_ln133_1_fu_263_p0 <= sext_ln133_1_fu_260_p1(19 - 1 downto 0);
    mul_ln133_1_fu_263_p1 <= sext_ln133_1_fu_260_p1(19 - 1 downto 0);
    mul_ln133_2_fu_282_p0 <= sext_ln133_2_fu_279_p1(19 - 1 downto 0);
    mul_ln133_2_fu_282_p1 <= sext_ln133_2_fu_279_p1(19 - 1 downto 0);
    mul_ln133_3_fu_301_p0 <= sext_ln133_3_fu_298_p1(19 - 1 downto 0);
    mul_ln133_3_fu_301_p1 <= sext_ln133_3_fu_298_p1(19 - 1 downto 0);
    mul_ln133_4_fu_320_p0 <= sext_ln133_4_fu_317_p1(19 - 1 downto 0);
    mul_ln133_4_fu_320_p1 <= sext_ln133_4_fu_317_p1(19 - 1 downto 0);
    mul_ln133_fu_244_p0 <= sext_ln133_fu_241_p1(19 - 1 downto 0);
    mul_ln133_fu_244_p1 <= sext_ln133_fu_241_p1(19 - 1 downto 0);
    mul_ln146_1_fu_518_p0 <= zext_ln146_fu_488_p1(26 - 1 downto 0);
    mul_ln146_2_fu_541_p0 <= zext_ln146_fu_488_p1(26 - 1 downto 0);
    mul_ln146_3_fu_564_p0 <= zext_ln146_fu_488_p1(26 - 1 downto 0);
    mul_ln146_4_fu_587_p0 <= zext_ln146_fu_488_p1(26 - 1 downto 0);
    mul_ln146_fu_495_p0 <= zext_ln146_fu_488_p1(26 - 1 downto 0);
    mul_ln73_1_fu_363_p1 <= ap_const_lv31_666(12 - 1 downto 0);
    mul_ln73_fu_191_p1 <= ap_const_lv31_666(12 - 1 downto 0);
    select_ln138_fu_421_p3 <= 
        sext_ln138_fu_379_p1 when (icmp_ln138_fu_409_p2(0) = '1') else 
        add_ln138_fu_415_p2;
        sext_ln128_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mean_fu_197_p4),19));

        sext_ln133_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln132_1_reg_643),32));

        sext_ln133_2_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln132_2_reg_649),32));

        sext_ln133_3_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln132_3_reg_655),32));

        sext_ln133_4_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln132_4_reg_661),32));

        sext_ln133_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln132_reg_637),32));

        sext_ln138_1_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_fu_429_p3),18));

        sext_ln138_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_369_p4),17));

        sext_ln146_1_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_501_p4),33));

        sext_ln146_3_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln146_1_fu_524_p4),33));

        sext_ln146_5_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln146_2_fu_547_p4),33));

        sext_ln146_7_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln146_3_fu_570_p4),33));

        sext_ln146_9_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln146_4_fu_593_p4),33));

    shl_ln126_1_fu_139_p3 <= (data_2_val & ap_const_lv3_0);
    shl_ln126_2_fu_147_p3 <= (data_3_val & ap_const_lv3_0);
    shl_ln126_3_fu_155_p3 <= (data_4_val & ap_const_lv3_0);
    shl_ln_fu_131_p3 <= (data_1_val & ap_const_lv3_0);
    sub_ln132_1_fu_217_p2 <= std_logic_vector(unsigned(shl_ln_fu_131_p3) - unsigned(sext_ln128_fu_207_p1));
    sub_ln132_2_fu_223_p2 <= std_logic_vector(unsigned(shl_ln126_1_fu_139_p3) - unsigned(sext_ln128_fu_207_p1));
    sub_ln132_3_fu_229_p2 <= std_logic_vector(unsigned(shl_ln126_2_fu_147_p3) - unsigned(sext_ln128_fu_207_p1));
    sub_ln132_4_fu_235_p2 <= std_logic_vector(unsigned(shl_ln126_3_fu_155_p3) - unsigned(sext_ln128_fu_207_p1));
    sub_ln132_fu_211_p2 <= std_logic_vector(unsigned(sum_cache_fu_123_p3) - unsigned(sext_ln128_fu_207_p1));
    sum_cache_fu_123_p3 <= (data_0_val & ap_const_lv3_0);
    tmp_1_fu_369_p4 <= mul_ln73_1_fu_363_p2(30 downto 15);
    tmp_2_fu_383_p3 <= mul_ln73_1_fu_363_p2(30 downto 30);
    tmp_3_fu_441_p3 <= sext_ln138_1_fu_437_p1(17 downto 17);
    tmp_4_fu_461_p4 <= index_1_fu_449_p3(16 downto 11);
    tmp_fu_391_p4 <= mul_ln73_1_fu_363_p2(14 downto 13);
    tmp_s_fu_401_p3 <= (tmp_fu_391_p4 & ap_const_lv11_0);
    trunc_ln138_fu_457_p1 <= index_1_fu_449_p3(11 - 1 downto 0);
    trunc_ln146_1_fu_524_p4 <= mul_ln146_1_fu_518_p2(44 downto 13);
    trunc_ln146_2_fu_547_p4 <= mul_ln146_2_fu_541_p2(44 downto 13);
    trunc_ln146_3_fu_570_p4 <= mul_ln146_3_fu_564_p2(44 downto 13);
    trunc_ln146_4_fu_593_p4 <= mul_ln146_4_fu_587_p2(44 downto 13);
    trunc_ln3_fu_501_p4 <= mul_ln146_fu_495_p2(44 downto 13);
    zext_ln142_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_2_fu_477_p3),64));
    zext_ln146_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invert_sqr_table_q0),45));
end behav;
