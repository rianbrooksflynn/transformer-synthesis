// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_val,
        data_1_val,
        data_2_val,
        data_3_val,
        data_4_val,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] data_0_val;
input  [15:0] data_1_val;
input  [15:0] data_2_val;
input  [15:0] data_3_val;
input  [15:0] data_4_val;
output  [32:0] ap_return_0;
output  [32:0] ap_return_1;
output  [32:0] ap_return_2;
output  [32:0] ap_return_3;
output  [32:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [10:0] invert_sqr_table_address0;
reg    invert_sqr_table_ce0;
wire   [25:0] invert_sqr_table_q0;
wire  signed [18:0] sub_ln132_fu_211_p2;
reg  signed [18:0] sub_ln132_reg_637;
wire    ap_block_pp0_stage0_11001;
reg  signed [18:0] sub_ln132_reg_637_pp0_iter1_reg;
reg  signed [18:0] sub_ln132_reg_637_pp0_iter2_reg;
reg  signed [18:0] sub_ln132_reg_637_pp0_iter3_reg;
wire  signed [18:0] sub_ln132_1_fu_217_p2;
reg  signed [18:0] sub_ln132_1_reg_643;
reg  signed [18:0] sub_ln132_1_reg_643_pp0_iter1_reg;
reg  signed [18:0] sub_ln132_1_reg_643_pp0_iter2_reg;
reg  signed [18:0] sub_ln132_1_reg_643_pp0_iter3_reg;
wire  signed [18:0] sub_ln132_2_fu_223_p2;
reg  signed [18:0] sub_ln132_2_reg_649;
reg  signed [18:0] sub_ln132_2_reg_649_pp0_iter1_reg;
reg  signed [18:0] sub_ln132_2_reg_649_pp0_iter2_reg;
reg  signed [18:0] sub_ln132_2_reg_649_pp0_iter3_reg;
wire  signed [18:0] sub_ln132_3_fu_229_p2;
reg  signed [18:0] sub_ln132_3_reg_655;
reg  signed [18:0] sub_ln132_3_reg_655_pp0_iter1_reg;
reg  signed [18:0] sub_ln132_3_reg_655_pp0_iter2_reg;
reg  signed [18:0] sub_ln132_3_reg_655_pp0_iter3_reg;
wire  signed [18:0] sub_ln132_4_fu_235_p2;
reg  signed [18:0] sub_ln132_4_reg_661;
reg  signed [18:0] sub_ln132_4_reg_661_pp0_iter1_reg;
reg  signed [18:0] sub_ln132_4_reg_661_pp0_iter2_reg;
reg  signed [18:0] sub_ln132_4_reg_661_pp0_iter3_reg;
wire   [18:0] add_ln134_fu_354_p2;
reg  signed [18:0] add_ln134_reg_667;
wire   [10:0] trunc_ln138_fu_457_p1;
reg   [10:0] trunc_ln138_reg_672;
wire   [0:0] icmp_ln141_fu_471_p2;
reg   [0:0] icmp_ln141_reg_677;
wire   [63:0] zext_ln142_fu_483_p1;
wire    ap_block_pp0_stage0;
wire   [18:0] shl_ln_fu_131_p3;
wire   [18:0] sum_cache_fu_123_p3;
wire   [18:0] shl_ln126_2_fu_147_p3;
wire   [18:0] shl_ln126_3_fu_155_p3;
wire   [18:0] add_ln126_2_fu_169_p2;
wire   [18:0] shl_ln126_1_fu_139_p3;
wire   [18:0] add_ln126_3_fu_175_p2;
wire   [18:0] add_ln126_1_fu_163_p2;
wire  signed [18:0] add_ln126_fu_181_p2;
wire   [11:0] mul_ln73_fu_191_p1;
wire   [30:0] mul_ln73_fu_191_p2;
wire   [17:0] mean_fu_197_p4;
wire  signed [18:0] sext_ln128_fu_207_p1;
wire  signed [18:0] mul_ln133_fu_244_p0;
wire  signed [31:0] sext_ln133_fu_241_p1;
wire  signed [18:0] mul_ln133_fu_244_p1;
wire   [31:0] mul_ln133_fu_244_p2;
wire  signed [18:0] mul_ln133_1_fu_263_p0;
wire  signed [31:0] sext_ln133_1_fu_260_p1;
wire  signed [18:0] mul_ln133_1_fu_263_p1;
wire   [31:0] mul_ln133_1_fu_263_p2;
wire  signed [18:0] mul_ln133_2_fu_282_p0;
wire  signed [31:0] sext_ln133_2_fu_279_p1;
wire  signed [18:0] mul_ln133_2_fu_282_p1;
wire   [31:0] mul_ln133_2_fu_282_p2;
wire  signed [18:0] mul_ln133_3_fu_301_p0;
wire  signed [31:0] sext_ln133_3_fu_298_p1;
wire  signed [18:0] mul_ln133_3_fu_301_p1;
wire   [31:0] mul_ln133_3_fu_301_p2;
wire  signed [18:0] mul_ln133_4_fu_320_p0;
wire  signed [31:0] sext_ln133_4_fu_317_p1;
wire  signed [18:0] mul_ln133_4_fu_320_p1;
wire   [31:0] mul_ln133_4_fu_320_p2;
wire   [18:0] diff_5_fu_250_p4;
wire   [18:0] diff_fu_269_p4;
wire   [18:0] diff_3_fu_307_p4;
wire   [18:0] diff_4_fu_326_p4;
wire   [18:0] add_ln134_2_fu_342_p2;
wire   [18:0] diff_2_fu_288_p4;
wire   [18:0] add_ln134_3_fu_348_p2;
wire   [18:0] add_ln134_1_fu_336_p2;
wire   [11:0] mul_ln73_1_fu_363_p1;
wire   [30:0] mul_ln73_1_fu_363_p2;
wire   [15:0] tmp_1_fu_369_p4;
wire   [1:0] tmp_fu_391_p4;
wire   [12:0] tmp_s_fu_401_p3;
wire  signed [16:0] sext_ln138_fu_379_p1;
wire   [0:0] icmp_ln138_fu_409_p2;
wire   [16:0] add_ln138_fu_415_p2;
wire   [0:0] tmp_2_fu_383_p3;
wire   [16:0] select_ln138_fu_421_p3;
wire  signed [16:0] index_fu_429_p3;
wire  signed [17:0] sext_ln138_1_fu_437_p1;
wire   [0:0] tmp_3_fu_441_p3;
wire   [16:0] index_1_fu_449_p3;
wire   [5:0] tmp_4_fu_461_p4;
wire   [10:0] index_2_fu_477_p3;
wire   [25:0] mul_ln146_fu_495_p0;
wire   [44:0] zext_ln146_fu_488_p1;
wire   [44:0] mul_ln146_fu_495_p2;
wire   [31:0] trunc_ln3_fu_501_p4;
wire   [25:0] mul_ln146_1_fu_518_p0;
wire   [44:0] mul_ln146_1_fu_518_p2;
wire   [31:0] trunc_ln146_1_fu_524_p4;
wire   [25:0] mul_ln146_2_fu_541_p0;
wire   [44:0] mul_ln146_2_fu_541_p2;
wire   [31:0] trunc_ln146_2_fu_547_p4;
wire   [25:0] mul_ln146_3_fu_564_p0;
wire   [44:0] mul_ln146_3_fu_564_p2;
wire   [31:0] trunc_ln146_3_fu_570_p4;
wire   [25:0] mul_ln146_4_fu_587_p0;
wire   [44:0] mul_ln146_4_fu_587_p2;
wire   [31:0] trunc_ln146_4_fu_593_p4;
wire  signed [32:0] sext_ln146_1_fu_511_p1;
wire  signed [32:0] sext_ln146_3_fu_534_p1;
wire  signed [32:0] sext_ln146_5_fu_557_p1;
wire  signed [32:0] sext_ln146_7_fu_580_p1;
wire  signed [32:0] sext_ln146_9_fu_603_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s_invert_sqr_tabkb #(
    .DataWidth( 26 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
invert_sqr_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_sqr_table_address0),
    .ce0(invert_sqr_table_ce0),
    .q0(invert_sqr_table_q0)
);

myproject_mul_19s_12ns_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 31 ))
mul_19s_12ns_31_1_1_U1(
    .din0(add_ln126_fu_181_p2),
    .din1(mul_ln73_fu_191_p1),
    .dout(mul_ln73_fu_191_p2)
);

myproject_mul_19s_19s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
mul_19s_19s_32_1_1_U2(
    .din0(mul_ln133_fu_244_p0),
    .din1(mul_ln133_fu_244_p1),
    .dout(mul_ln133_fu_244_p2)
);

myproject_mul_19s_19s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
mul_19s_19s_32_1_1_U3(
    .din0(mul_ln133_1_fu_263_p0),
    .din1(mul_ln133_1_fu_263_p1),
    .dout(mul_ln133_1_fu_263_p2)
);

myproject_mul_19s_19s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
mul_19s_19s_32_1_1_U4(
    .din0(mul_ln133_2_fu_282_p0),
    .din1(mul_ln133_2_fu_282_p1),
    .dout(mul_ln133_2_fu_282_p2)
);

myproject_mul_19s_19s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
mul_19s_19s_32_1_1_U5(
    .din0(mul_ln133_3_fu_301_p0),
    .din1(mul_ln133_3_fu_301_p1),
    .dout(mul_ln133_3_fu_301_p2)
);

myproject_mul_19s_19s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
mul_19s_19s_32_1_1_U6(
    .din0(mul_ln133_4_fu_320_p0),
    .din1(mul_ln133_4_fu_320_p1),
    .dout(mul_ln133_4_fu_320_p2)
);

myproject_mul_19s_12ns_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 31 ))
mul_19s_12ns_31_1_1_U7(
    .din0(add_ln134_reg_667),
    .din1(mul_ln73_1_fu_363_p1),
    .dout(mul_ln73_1_fu_363_p2)
);

myproject_mul_26ns_19s_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 45 ))
mul_26ns_19s_45_1_1_U8(
    .din0(mul_ln146_fu_495_p0),
    .din1(sub_ln132_reg_637_pp0_iter3_reg),
    .dout(mul_ln146_fu_495_p2)
);

myproject_mul_26ns_19s_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 45 ))
mul_26ns_19s_45_1_1_U9(
    .din0(mul_ln146_1_fu_518_p0),
    .din1(sub_ln132_1_reg_643_pp0_iter3_reg),
    .dout(mul_ln146_1_fu_518_p2)
);

myproject_mul_26ns_19s_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 45 ))
mul_26ns_19s_45_1_1_U10(
    .din0(mul_ln146_2_fu_541_p0),
    .din1(sub_ln132_2_reg_649_pp0_iter3_reg),
    .dout(mul_ln146_2_fu_541_p2)
);

myproject_mul_26ns_19s_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 45 ))
mul_26ns_19s_45_1_1_U11(
    .din0(mul_ln146_3_fu_564_p0),
    .din1(sub_ln132_3_reg_655_pp0_iter3_reg),
    .dout(mul_ln146_3_fu_564_p2)
);

myproject_mul_26ns_19s_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 45 ))
mul_26ns_19s_45_1_1_U12(
    .din0(mul_ln146_4_fu_587_p0),
    .din1(sub_ln132_4_reg_661_pp0_iter3_reg),
    .dout(mul_ln146_4_fu_587_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln134_reg_667 <= add_ln134_fu_354_p2;
        sub_ln132_1_reg_643 <= sub_ln132_1_fu_217_p2;
        sub_ln132_1_reg_643_pp0_iter1_reg <= sub_ln132_1_reg_643;
        sub_ln132_2_reg_649 <= sub_ln132_2_fu_223_p2;
        sub_ln132_2_reg_649_pp0_iter1_reg <= sub_ln132_2_reg_649;
        sub_ln132_3_reg_655 <= sub_ln132_3_fu_229_p2;
        sub_ln132_3_reg_655_pp0_iter1_reg <= sub_ln132_3_reg_655;
        sub_ln132_4_reg_661 <= sub_ln132_4_fu_235_p2;
        sub_ln132_4_reg_661_pp0_iter1_reg <= sub_ln132_4_reg_661;
        sub_ln132_reg_637 <= sub_ln132_fu_211_p2;
        sub_ln132_reg_637_pp0_iter1_reg <= sub_ln132_reg_637;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        icmp_ln141_reg_677 <= icmp_ln141_fu_471_p2;
        sub_ln132_1_reg_643_pp0_iter2_reg <= sub_ln132_1_reg_643_pp0_iter1_reg;
        sub_ln132_1_reg_643_pp0_iter3_reg <= sub_ln132_1_reg_643_pp0_iter2_reg;
        sub_ln132_2_reg_649_pp0_iter2_reg <= sub_ln132_2_reg_649_pp0_iter1_reg;
        sub_ln132_2_reg_649_pp0_iter3_reg <= sub_ln132_2_reg_649_pp0_iter2_reg;
        sub_ln132_3_reg_655_pp0_iter2_reg <= sub_ln132_3_reg_655_pp0_iter1_reg;
        sub_ln132_3_reg_655_pp0_iter3_reg <= sub_ln132_3_reg_655_pp0_iter2_reg;
        sub_ln132_4_reg_661_pp0_iter2_reg <= sub_ln132_4_reg_661_pp0_iter1_reg;
        sub_ln132_4_reg_661_pp0_iter3_reg <= sub_ln132_4_reg_661_pp0_iter2_reg;
        sub_ln132_reg_637_pp0_iter2_reg <= sub_ln132_reg_637_pp0_iter1_reg;
        sub_ln132_reg_637_pp0_iter3_reg <= sub_ln132_reg_637_pp0_iter2_reg;
        trunc_ln138_reg_672 <= trunc_ln138_fu_457_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_ce))) begin
        invert_sqr_table_ce0 = 1'b1;
    end else begin
        invert_sqr_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln126_1_fu_163_p2 = (shl_ln_fu_131_p3 + sum_cache_fu_123_p3);

assign add_ln126_2_fu_169_p2 = (shl_ln126_2_fu_147_p3 + shl_ln126_3_fu_155_p3);

assign add_ln126_3_fu_175_p2 = (add_ln126_2_fu_169_p2 + shl_ln126_1_fu_139_p3);

assign add_ln126_fu_181_p2 = (add_ln126_3_fu_175_p2 + add_ln126_1_fu_163_p2);

assign add_ln134_1_fu_336_p2 = (diff_5_fu_250_p4 + diff_fu_269_p4);

assign add_ln134_2_fu_342_p2 = (diff_3_fu_307_p4 + diff_4_fu_326_p4);

assign add_ln134_3_fu_348_p2 = (add_ln134_2_fu_342_p2 + diff_2_fu_288_p4);

assign add_ln134_fu_354_p2 = (add_ln134_3_fu_348_p2 + add_ln134_1_fu_336_p2);

assign add_ln138_fu_415_p2 = ($signed(sext_ln138_fu_379_p1) + $signed(17'd1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = sext_ln146_1_fu_511_p1;

assign ap_return_1 = sext_ln146_3_fu_534_p1;

assign ap_return_2 = sext_ln146_5_fu_557_p1;

assign ap_return_3 = sext_ln146_7_fu_580_p1;

assign ap_return_4 = sext_ln146_9_fu_603_p1;

assign diff_2_fu_288_p4 = {{mul_ln133_2_fu_282_p2[31:13]}};

assign diff_3_fu_307_p4 = {{mul_ln133_3_fu_301_p2[31:13]}};

assign diff_4_fu_326_p4 = {{mul_ln133_4_fu_320_p2[31:13]}};

assign diff_5_fu_250_p4 = {{mul_ln133_fu_244_p2[31:13]}};

assign diff_fu_269_p4 = {{mul_ln133_1_fu_263_p2[31:13]}};

assign icmp_ln138_fu_409_p2 = ((tmp_s_fu_401_p3 == 13'd0) ? 1'b1 : 1'b0);

assign icmp_ln141_fu_471_p2 = ((tmp_4_fu_461_p4 != 6'd0) ? 1'b1 : 1'b0);

assign index_1_fu_449_p3 = ((tmp_3_fu_441_p3[0:0] == 1'b1) ? 17'd0 : index_fu_429_p3);

assign index_2_fu_477_p3 = ((icmp_ln141_reg_677[0:0] == 1'b1) ? 11'd2047 : trunc_ln138_reg_672);

assign index_fu_429_p3 = ((tmp_2_fu_383_p3[0:0] == 1'b1) ? select_ln138_fu_421_p3 : sext_ln138_fu_379_p1);

assign invert_sqr_table_address0 = zext_ln142_fu_483_p1;

assign mean_fu_197_p4 = {{mul_ln73_fu_191_p2[30:13]}};

assign mul_ln133_1_fu_263_p0 = sext_ln133_1_fu_260_p1;

assign mul_ln133_1_fu_263_p1 = sext_ln133_1_fu_260_p1;

assign mul_ln133_2_fu_282_p0 = sext_ln133_2_fu_279_p1;

assign mul_ln133_2_fu_282_p1 = sext_ln133_2_fu_279_p1;

assign mul_ln133_3_fu_301_p0 = sext_ln133_3_fu_298_p1;

assign mul_ln133_3_fu_301_p1 = sext_ln133_3_fu_298_p1;

assign mul_ln133_4_fu_320_p0 = sext_ln133_4_fu_317_p1;

assign mul_ln133_4_fu_320_p1 = sext_ln133_4_fu_317_p1;

assign mul_ln133_fu_244_p0 = sext_ln133_fu_241_p1;

assign mul_ln133_fu_244_p1 = sext_ln133_fu_241_p1;

assign mul_ln146_1_fu_518_p0 = zext_ln146_fu_488_p1;

assign mul_ln146_2_fu_541_p0 = zext_ln146_fu_488_p1;

assign mul_ln146_3_fu_564_p0 = zext_ln146_fu_488_p1;

assign mul_ln146_4_fu_587_p0 = zext_ln146_fu_488_p1;

assign mul_ln146_fu_495_p0 = zext_ln146_fu_488_p1;

assign mul_ln73_1_fu_363_p1 = 31'd1638;

assign mul_ln73_fu_191_p1 = 31'd1638;

assign select_ln138_fu_421_p3 = ((icmp_ln138_fu_409_p2[0:0] == 1'b1) ? sext_ln138_fu_379_p1 : add_ln138_fu_415_p2);

assign sext_ln128_fu_207_p1 = $signed(mean_fu_197_p4);

assign sext_ln133_1_fu_260_p1 = sub_ln132_1_reg_643;

assign sext_ln133_2_fu_279_p1 = sub_ln132_2_reg_649;

assign sext_ln133_3_fu_298_p1 = sub_ln132_3_reg_655;

assign sext_ln133_4_fu_317_p1 = sub_ln132_4_reg_661;

assign sext_ln133_fu_241_p1 = sub_ln132_reg_637;

assign sext_ln138_1_fu_437_p1 = index_fu_429_p3;

assign sext_ln138_fu_379_p1 = $signed(tmp_1_fu_369_p4);

assign sext_ln146_1_fu_511_p1 = $signed(trunc_ln3_fu_501_p4);

assign sext_ln146_3_fu_534_p1 = $signed(trunc_ln146_1_fu_524_p4);

assign sext_ln146_5_fu_557_p1 = $signed(trunc_ln146_2_fu_547_p4);

assign sext_ln146_7_fu_580_p1 = $signed(trunc_ln146_3_fu_570_p4);

assign sext_ln146_9_fu_603_p1 = $signed(trunc_ln146_4_fu_593_p4);

assign shl_ln126_1_fu_139_p3 = {{data_2_val}, {3'd0}};

assign shl_ln126_2_fu_147_p3 = {{data_3_val}, {3'd0}};

assign shl_ln126_3_fu_155_p3 = {{data_4_val}, {3'd0}};

assign shl_ln_fu_131_p3 = {{data_1_val}, {3'd0}};

assign sub_ln132_1_fu_217_p2 = ($signed(shl_ln_fu_131_p3) - $signed(sext_ln128_fu_207_p1));

assign sub_ln132_2_fu_223_p2 = ($signed(shl_ln126_1_fu_139_p3) - $signed(sext_ln128_fu_207_p1));

assign sub_ln132_3_fu_229_p2 = ($signed(shl_ln126_2_fu_147_p3) - $signed(sext_ln128_fu_207_p1));

assign sub_ln132_4_fu_235_p2 = ($signed(shl_ln126_3_fu_155_p3) - $signed(sext_ln128_fu_207_p1));

assign sub_ln132_fu_211_p2 = ($signed(sum_cache_fu_123_p3) - $signed(sext_ln128_fu_207_p1));

assign sum_cache_fu_123_p3 = {{data_0_val}, {3'd0}};

assign tmp_1_fu_369_p4 = {{mul_ln73_1_fu_363_p2[30:15]}};

assign tmp_2_fu_383_p3 = mul_ln73_1_fu_363_p2[32'd30];

assign tmp_3_fu_441_p3 = sext_ln138_1_fu_437_p1[32'd17];

assign tmp_4_fu_461_p4 = {{index_1_fu_449_p3[16:11]}};

assign tmp_fu_391_p4 = {{mul_ln73_1_fu_363_p2[14:13]}};

assign tmp_s_fu_401_p3 = {{tmp_fu_391_p4}, {11'd0}};

assign trunc_ln138_fu_457_p1 = index_1_fu_449_p3[10:0];

assign trunc_ln146_1_fu_524_p4 = {{mul_ln146_1_fu_518_p2[44:13]}};

assign trunc_ln146_2_fu_547_p4 = {{mul_ln146_2_fu_541_p2[44:13]}};

assign trunc_ln146_3_fu_570_p4 = {{mul_ln146_3_fu_564_p2[44:13]}};

assign trunc_ln146_4_fu_593_p4 = {{mul_ln146_4_fu_587_p2[44:13]}};

assign trunc_ln3_fu_501_p4 = {{mul_ln146_fu_495_p2[44:13]}};

assign zext_ln142_fu_483_p1 = index_2_fu_477_p3;

assign zext_ln146_fu_488_p1 = invert_sqr_table_q0;

endmodule //myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s
