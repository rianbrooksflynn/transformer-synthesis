-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_9_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv36_1999 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001100110011001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal invert_sqr_table_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal invert_sqr_table_ce0 : STD_LOGIC;
    signal invert_sqr_table_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_cache_fu_203_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sum_cache_reg_994 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal shl_ln_fu_211_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln_reg_999 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_1_fu_219_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_1_reg_1004 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_2_fu_227_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_2_reg_1009 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_3_fu_235_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_3_reg_1014 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_4_fu_243_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_4_reg_1019 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_5_fu_251_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_5_reg_1024 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_6_fu_259_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_6_reg_1029 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_7_fu_267_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_7_reg_1034 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_8_fu_275_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln128_8_reg_1039 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_fu_331_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_reg_1044 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_fu_360_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_reg_1049 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_reg_1049_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_reg_1049_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_reg_1049_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_1_fu_365_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_1_reg_1055 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_1_reg_1055_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_1_reg_1055_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_1_reg_1055_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_2_fu_370_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_2_reg_1061 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_2_reg_1061_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_2_reg_1061_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_2_reg_1061_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_3_fu_375_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_3_reg_1067 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_3_reg_1067_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_3_reg_1067_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_3_reg_1067_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_4_fu_380_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_4_reg_1073 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_4_reg_1073_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_4_reg_1073_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_4_reg_1073_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_5_fu_385_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_5_reg_1079 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_5_reg_1079_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_5_reg_1079_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_5_reg_1079_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_6_fu_390_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_6_reg_1085 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_6_reg_1085_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_6_reg_1085_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_6_reg_1085_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_7_fu_395_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_7_reg_1091 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_7_reg_1091_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_7_reg_1091_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_7_reg_1091_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_8_fu_400_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_8_reg_1097 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_8_reg_1097_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_8_reg_1097_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_8_reg_1097_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_9_fu_405_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_9_reg_1103 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_9_reg_1103_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_9_reg_1103_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln134_9_reg_1103_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_1_fu_560_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_1_reg_1109 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_3_fu_572_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_3_reg_1114 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_8_fu_596_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_8_reg_1119 : STD_LOGIC_VECTOR (21 downto 0);
    signal index_fu_681_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal index_reg_1124 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln144_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln135_fu_163_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_fu_410_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_fu_163_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_1_fu_167_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_1_fu_425_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_1_fu_167_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_2_fu_171_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_2_fu_440_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_2_fu_171_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_3_fu_175_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_3_fu_455_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_3_fu_175_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_4_fu_179_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_4_fu_470_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_4_fu_179_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_5_fu_183_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_5_fu_485_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_5_fu_183_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_6_fu_187_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_6_fu_500_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_6_fu_187_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_7_fu_191_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_7_fu_515_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_7_fu_191_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_8_fu_195_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_8_fu_530_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_8_fu_195_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_9_fu_199_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln135_9_fu_545_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_9_fu_199_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_2_fu_289_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_3_fu_295_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_1_fu_283_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_6_fu_313_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_7_fu_319_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_5_fu_307_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_8_fu_325_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln128_4_fu_301_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln73_fu_340_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln73_fu_340_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mean_fu_346_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln130_fu_356_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln135_fu_163_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_1_fu_167_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_2_fu_171_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_3_fu_175_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_4_fu_179_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_5_fu_183_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_6_fu_187_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_7_fu_191_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_8_fu_195_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln135_9_fu_199_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal diff_10_fu_415_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal diff_fu_430_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal diff_3_fu_460_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal diff_4_fu_475_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_2_fu_566_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal diff_2_fu_445_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal diff_5_fu_490_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal diff_6_fu_505_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal diff_8_fu_535_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal diff_9_fu_550_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_6_fu_584_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal diff_7_fu_520_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_7_fu_590_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_5_fu_578_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_4_fu_602_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln136_fu_606_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln73_1_fu_615_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln73_1_fu_615_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_1_fu_621_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_fu_643_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_653_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln140_fu_631_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln140_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln140_fu_667_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_2_fu_635_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln140_fu_673_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln140_1_fu_689_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_3_fu_692_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_1_fu_700_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_fu_711_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln143_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln140_fu_707_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal index_2_fu_727_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln149_fu_747_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln149_1_fu_743_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln149_fu_747_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln149_1_fu_766_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln149_1_fu_766_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln149_2_fu_785_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln149_2_fu_785_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln149_3_fu_804_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln149_3_fu_804_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln149_4_fu_823_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln149_4_fu_823_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln149_5_fu_842_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln149_5_fu_842_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln149_6_fu_861_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln149_6_fu_861_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln149_7_fu_880_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln149_7_fu_880_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln149_8_fu_899_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln149_8_fu_899_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln149_9_fu_918_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln149_9_fu_918_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_22s_22s_38_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component myproject_mul_22s_14ns_36_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_22s_11s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_invert_sqr_tabbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    invert_sqr_table_U : component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_invert_sqr_tabbkb
    generic map (
        DataWidth => 11,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_sqr_table_address0,
        ce0 => invert_sqr_table_ce0,
        q0 => invert_sqr_table_q0);

    mul_22s_22s_38_1_1_U202 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_fu_163_p0,
        din1 => mul_ln135_fu_163_p1,
        dout => mul_ln135_fu_163_p2);

    mul_22s_22s_38_1_1_U203 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_1_fu_167_p0,
        din1 => mul_ln135_1_fu_167_p1,
        dout => mul_ln135_1_fu_167_p2);

    mul_22s_22s_38_1_1_U204 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_2_fu_171_p0,
        din1 => mul_ln135_2_fu_171_p1,
        dout => mul_ln135_2_fu_171_p2);

    mul_22s_22s_38_1_1_U205 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_3_fu_175_p0,
        din1 => mul_ln135_3_fu_175_p1,
        dout => mul_ln135_3_fu_175_p2);

    mul_22s_22s_38_1_1_U206 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_4_fu_179_p0,
        din1 => mul_ln135_4_fu_179_p1,
        dout => mul_ln135_4_fu_179_p2);

    mul_22s_22s_38_1_1_U207 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_5_fu_183_p0,
        din1 => mul_ln135_5_fu_183_p1,
        dout => mul_ln135_5_fu_183_p2);

    mul_22s_22s_38_1_1_U208 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_6_fu_187_p0,
        din1 => mul_ln135_6_fu_187_p1,
        dout => mul_ln135_6_fu_187_p2);

    mul_22s_22s_38_1_1_U209 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_7_fu_191_p0,
        din1 => mul_ln135_7_fu_191_p1,
        dout => mul_ln135_7_fu_191_p2);

    mul_22s_22s_38_1_1_U210 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_8_fu_195_p0,
        din1 => mul_ln135_8_fu_195_p1,
        dout => mul_ln135_8_fu_195_p2);

    mul_22s_22s_38_1_1_U211 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln135_9_fu_199_p0,
        din1 => mul_ln135_9_fu_199_p1,
        dout => mul_ln135_9_fu_199_p2);

    mul_22s_14ns_36_1_1_U212 : component myproject_mul_22s_14ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 14,
        dout_WIDTH => 36)
    port map (
        din0 => add_ln128_reg_1044,
        din1 => mul_ln73_fu_340_p1,
        dout => mul_ln73_fu_340_p2);

    mul_22s_14ns_36_1_1_U213 : component myproject_mul_22s_14ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 14,
        dout_WIDTH => 36)
    port map (
        din0 => add_ln136_fu_606_p2,
        din1 => mul_ln73_1_fu_615_p1,
        dout => mul_ln73_1_fu_615_p2);

    mul_22s_11s_26_1_1_U214 : component myproject_mul_22s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => sub_ln134_reg_1049_pp0_iter4_reg,
        din1 => mul_ln149_fu_747_p1,
        dout => mul_ln149_fu_747_p2);

    mul_22s_11s_26_1_1_U215 : component myproject_mul_22s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => sub_ln134_1_reg_1055_pp0_iter4_reg,
        din1 => mul_ln149_1_fu_766_p1,
        dout => mul_ln149_1_fu_766_p2);

    mul_22s_11s_26_1_1_U216 : component myproject_mul_22s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => sub_ln134_2_reg_1061_pp0_iter4_reg,
        din1 => mul_ln149_2_fu_785_p1,
        dout => mul_ln149_2_fu_785_p2);

    mul_22s_11s_26_1_1_U217 : component myproject_mul_22s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => sub_ln134_3_reg_1067_pp0_iter4_reg,
        din1 => mul_ln149_3_fu_804_p1,
        dout => mul_ln149_3_fu_804_p2);

    mul_22s_11s_26_1_1_U218 : component myproject_mul_22s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => sub_ln134_4_reg_1073_pp0_iter4_reg,
        din1 => mul_ln149_4_fu_823_p1,
        dout => mul_ln149_4_fu_823_p2);

    mul_22s_11s_26_1_1_U219 : component myproject_mul_22s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => sub_ln134_5_reg_1079_pp0_iter4_reg,
        din1 => mul_ln149_5_fu_842_p1,
        dout => mul_ln149_5_fu_842_p2);

    mul_22s_11s_26_1_1_U220 : component myproject_mul_22s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => sub_ln134_6_reg_1085_pp0_iter4_reg,
        din1 => mul_ln149_6_fu_861_p1,
        dout => mul_ln149_6_fu_861_p2);

    mul_22s_11s_26_1_1_U221 : component myproject_mul_22s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => sub_ln134_7_reg_1091_pp0_iter4_reg,
        din1 => mul_ln149_7_fu_880_p1,
        dout => mul_ln149_7_fu_880_p2);

    mul_22s_11s_26_1_1_U222 : component myproject_mul_22s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => sub_ln134_8_reg_1097_pp0_iter4_reg,
        din1 => mul_ln149_8_fu_899_p1,
        dout => mul_ln149_8_fu_899_p2);

    mul_22s_11s_26_1_1_U223 : component myproject_mul_22s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => sub_ln134_9_reg_1103_pp0_iter4_reg,
        din1 => mul_ln149_9_fu_918_p1,
        dout => mul_ln149_9_fu_918_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln128_reg_1044(21 downto 6) <= add_ln128_fu_331_p2(21 downto 6);
                    shl_ln128_1_reg_1004(21 downto 6) <= shl_ln128_1_fu_219_p3(21 downto 6);
                    shl_ln128_2_reg_1009(21 downto 6) <= shl_ln128_2_fu_227_p3(21 downto 6);
                    shl_ln128_3_reg_1014(21 downto 6) <= shl_ln128_3_fu_235_p3(21 downto 6);
                    shl_ln128_4_reg_1019(21 downto 6) <= shl_ln128_4_fu_243_p3(21 downto 6);
                    shl_ln128_5_reg_1024(21 downto 6) <= shl_ln128_5_fu_251_p3(21 downto 6);
                    shl_ln128_6_reg_1029(21 downto 6) <= shl_ln128_6_fu_259_p3(21 downto 6);
                    shl_ln128_7_reg_1034(21 downto 6) <= shl_ln128_7_fu_267_p3(21 downto 6);
                    shl_ln128_8_reg_1039(21 downto 6) <= shl_ln128_8_fu_275_p3(21 downto 6);
                    shl_ln_reg_999(21 downto 6) <= shl_ln_fu_211_p3(21 downto 6);
                sub_ln134_1_reg_1055 <= sub_ln134_1_fu_365_p2;
                sub_ln134_2_reg_1061 <= sub_ln134_2_fu_370_p2;
                sub_ln134_3_reg_1067 <= sub_ln134_3_fu_375_p2;
                sub_ln134_4_reg_1073 <= sub_ln134_4_fu_380_p2;
                sub_ln134_5_reg_1079 <= sub_ln134_5_fu_385_p2;
                sub_ln134_6_reg_1085 <= sub_ln134_6_fu_390_p2;
                sub_ln134_7_reg_1091 <= sub_ln134_7_fu_395_p2;
                sub_ln134_8_reg_1097 <= sub_ln134_8_fu_400_p2;
                sub_ln134_9_reg_1103 <= sub_ln134_9_fu_405_p2;
                sub_ln134_reg_1049 <= sub_ln134_fu_360_p2;
                    sum_cache_reg_994(21 downto 6) <= sum_cache_fu_203_p3(21 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                add_ln136_1_reg_1109 <= add_ln136_1_fu_560_p2;
                add_ln136_3_reg_1114 <= add_ln136_3_fu_572_p2;
                add_ln136_8_reg_1119 <= add_ln136_8_fu_596_p2;
                index_reg_1124 <= index_fu_681_p3;
                sub_ln134_1_reg_1055_pp0_iter2_reg <= sub_ln134_1_reg_1055;
                sub_ln134_1_reg_1055_pp0_iter3_reg <= sub_ln134_1_reg_1055_pp0_iter2_reg;
                sub_ln134_1_reg_1055_pp0_iter4_reg <= sub_ln134_1_reg_1055_pp0_iter3_reg;
                sub_ln134_2_reg_1061_pp0_iter2_reg <= sub_ln134_2_reg_1061;
                sub_ln134_2_reg_1061_pp0_iter3_reg <= sub_ln134_2_reg_1061_pp0_iter2_reg;
                sub_ln134_2_reg_1061_pp0_iter4_reg <= sub_ln134_2_reg_1061_pp0_iter3_reg;
                sub_ln134_3_reg_1067_pp0_iter2_reg <= sub_ln134_3_reg_1067;
                sub_ln134_3_reg_1067_pp0_iter3_reg <= sub_ln134_3_reg_1067_pp0_iter2_reg;
                sub_ln134_3_reg_1067_pp0_iter4_reg <= sub_ln134_3_reg_1067_pp0_iter3_reg;
                sub_ln134_4_reg_1073_pp0_iter2_reg <= sub_ln134_4_reg_1073;
                sub_ln134_4_reg_1073_pp0_iter3_reg <= sub_ln134_4_reg_1073_pp0_iter2_reg;
                sub_ln134_4_reg_1073_pp0_iter4_reg <= sub_ln134_4_reg_1073_pp0_iter3_reg;
                sub_ln134_5_reg_1079_pp0_iter2_reg <= sub_ln134_5_reg_1079;
                sub_ln134_5_reg_1079_pp0_iter3_reg <= sub_ln134_5_reg_1079_pp0_iter2_reg;
                sub_ln134_5_reg_1079_pp0_iter4_reg <= sub_ln134_5_reg_1079_pp0_iter3_reg;
                sub_ln134_6_reg_1085_pp0_iter2_reg <= sub_ln134_6_reg_1085;
                sub_ln134_6_reg_1085_pp0_iter3_reg <= sub_ln134_6_reg_1085_pp0_iter2_reg;
                sub_ln134_6_reg_1085_pp0_iter4_reg <= sub_ln134_6_reg_1085_pp0_iter3_reg;
                sub_ln134_7_reg_1091_pp0_iter2_reg <= sub_ln134_7_reg_1091;
                sub_ln134_7_reg_1091_pp0_iter3_reg <= sub_ln134_7_reg_1091_pp0_iter2_reg;
                sub_ln134_7_reg_1091_pp0_iter4_reg <= sub_ln134_7_reg_1091_pp0_iter3_reg;
                sub_ln134_8_reg_1097_pp0_iter2_reg <= sub_ln134_8_reg_1097;
                sub_ln134_8_reg_1097_pp0_iter3_reg <= sub_ln134_8_reg_1097_pp0_iter2_reg;
                sub_ln134_8_reg_1097_pp0_iter4_reg <= sub_ln134_8_reg_1097_pp0_iter3_reg;
                sub_ln134_9_reg_1103_pp0_iter2_reg <= sub_ln134_9_reg_1103;
                sub_ln134_9_reg_1103_pp0_iter3_reg <= sub_ln134_9_reg_1103_pp0_iter2_reg;
                sub_ln134_9_reg_1103_pp0_iter4_reg <= sub_ln134_9_reg_1103_pp0_iter3_reg;
                sub_ln134_reg_1049_pp0_iter2_reg <= sub_ln134_reg_1049;
                sub_ln134_reg_1049_pp0_iter3_reg <= sub_ln134_reg_1049_pp0_iter2_reg;
                sub_ln134_reg_1049_pp0_iter4_reg <= sub_ln134_reg_1049_pp0_iter3_reg;
            end if;
        end if;
    end process;
    sum_cache_reg_994(5 downto 0) <= "000000";
    shl_ln_reg_999(5 downto 0) <= "000000";
    shl_ln128_1_reg_1004(5 downto 0) <= "000000";
    shl_ln128_2_reg_1009(5 downto 0) <= "000000";
    shl_ln128_3_reg_1014(5 downto 0) <= "000000";
    shl_ln128_4_reg_1019(5 downto 0) <= "000000";
    shl_ln128_5_reg_1024(5 downto 0) <= "000000";
    shl_ln128_6_reg_1029(5 downto 0) <= "000000";
    shl_ln128_7_reg_1034(5 downto 0) <= "000000";
    shl_ln128_8_reg_1039(5 downto 0) <= "000000";
    add_ln128_reg_1044(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln128_1_fu_283_p2 <= std_logic_vector(unsigned(shl_ln_fu_211_p3) + unsigned(sum_cache_fu_203_p3));
    add_ln128_2_fu_289_p2 <= std_logic_vector(unsigned(shl_ln128_2_fu_227_p3) + unsigned(shl_ln128_3_fu_235_p3));
    add_ln128_3_fu_295_p2 <= std_logic_vector(unsigned(add_ln128_2_fu_289_p2) + unsigned(shl_ln128_1_fu_219_p3));
    add_ln128_4_fu_301_p2 <= std_logic_vector(unsigned(add_ln128_3_fu_295_p2) + unsigned(add_ln128_1_fu_283_p2));
    add_ln128_5_fu_307_p2 <= std_logic_vector(unsigned(shl_ln128_4_fu_243_p3) + unsigned(shl_ln128_5_fu_251_p3));
    add_ln128_6_fu_313_p2 <= std_logic_vector(unsigned(shl_ln128_7_fu_267_p3) + unsigned(shl_ln128_8_fu_275_p3));
    add_ln128_7_fu_319_p2 <= std_logic_vector(unsigned(add_ln128_6_fu_313_p2) + unsigned(shl_ln128_6_fu_259_p3));
    add_ln128_8_fu_325_p2 <= std_logic_vector(unsigned(add_ln128_7_fu_319_p2) + unsigned(add_ln128_5_fu_307_p2));
    add_ln128_fu_331_p2 <= std_logic_vector(unsigned(add_ln128_8_fu_325_p2) + unsigned(add_ln128_4_fu_301_p2));
    add_ln136_1_fu_560_p2 <= std_logic_vector(unsigned(diff_10_fu_415_p4) + unsigned(diff_fu_430_p4));
    add_ln136_2_fu_566_p2 <= std_logic_vector(unsigned(diff_3_fu_460_p4) + unsigned(diff_4_fu_475_p4));
    add_ln136_3_fu_572_p2 <= std_logic_vector(unsigned(add_ln136_2_fu_566_p2) + unsigned(diff_2_fu_445_p4));
    add_ln136_4_fu_602_p2 <= std_logic_vector(unsigned(add_ln136_3_reg_1114) + unsigned(add_ln136_1_reg_1109));
    add_ln136_5_fu_578_p2 <= std_logic_vector(unsigned(diff_5_fu_490_p4) + unsigned(diff_6_fu_505_p4));
    add_ln136_6_fu_584_p2 <= std_logic_vector(unsigned(diff_8_fu_535_p4) + unsigned(diff_9_fu_550_p4));
    add_ln136_7_fu_590_p2 <= std_logic_vector(unsigned(add_ln136_6_fu_584_p2) + unsigned(diff_7_fu_520_p4));
    add_ln136_8_fu_596_p2 <= std_logic_vector(unsigned(add_ln136_7_fu_590_p2) + unsigned(add_ln136_5_fu_578_p2));
    add_ln136_fu_606_p2 <= std_logic_vector(unsigned(add_ln136_8_reg_1119) + unsigned(add_ln136_4_fu_602_p2));
    add_ln140_fu_667_p2 <= std_logic_vector(signed(sext_ln140_fu_631_p1) + signed(ap_const_lv19_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= mul_ln149_fu_747_p2(25 downto 10);
    ap_return_1 <= mul_ln149_1_fu_766_p2(25 downto 10);
    ap_return_2 <= mul_ln149_2_fu_785_p2(25 downto 10);
    ap_return_3 <= mul_ln149_3_fu_804_p2(25 downto 10);
    ap_return_4 <= mul_ln149_4_fu_823_p2(25 downto 10);
    ap_return_5 <= mul_ln149_5_fu_842_p2(25 downto 10);
    ap_return_6 <= mul_ln149_6_fu_861_p2(25 downto 10);
    ap_return_7 <= mul_ln149_7_fu_880_p2(25 downto 10);
    ap_return_8 <= mul_ln149_8_fu_899_p2(25 downto 10);
    ap_return_9 <= mul_ln149_9_fu_918_p2(25 downto 10);
    diff_10_fu_415_p4 <= mul_ln135_fu_163_p2(37 downto 16);
    diff_2_fu_445_p4 <= mul_ln135_2_fu_171_p2(37 downto 16);
    diff_3_fu_460_p4 <= mul_ln135_3_fu_175_p2(37 downto 16);
    diff_4_fu_475_p4 <= mul_ln135_4_fu_179_p2(37 downto 16);
    diff_5_fu_490_p4 <= mul_ln135_5_fu_183_p2(37 downto 16);
    diff_6_fu_505_p4 <= mul_ln135_6_fu_187_p2(37 downto 16);
    diff_7_fu_520_p4 <= mul_ln135_7_fu_191_p2(37 downto 16);
    diff_8_fu_535_p4 <= mul_ln135_8_fu_195_p2(37 downto 16);
    diff_9_fu_550_p4 <= mul_ln135_9_fu_199_p2(37 downto 16);
    diff_fu_430_p4 <= mul_ln135_1_fu_167_p2(37 downto 16);
    icmp_ln140_fu_661_p2 <= "1" when (tmp_s_fu_653_p3 = ap_const_lv16_0) else "0";
    icmp_ln143_fu_721_p2 <= "0" when (tmp_4_fu_711_p4 = ap_const_lv5_0) else "1";
    index_1_fu_700_p3 <= 
        ap_const_lv19_0 when (tmp_3_fu_692_p3(0) = '1') else 
        index_reg_1124;
    index_2_fu_727_p3 <= 
        ap_const_lv14_3FFF when (icmp_ln143_fu_721_p2(0) = '1') else 
        trunc_ln140_fu_707_p1;
    index_fu_681_p3 <= 
        select_ln140_fu_673_p3 when (tmp_2_fu_635_p3(0) = '1') else 
        sext_ln140_fu_631_p1;
    invert_sqr_table_address0 <= zext_ln144_fu_735_p1(14 - 1 downto 0);

    invert_sqr_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            invert_sqr_table_ce0 <= ap_const_logic_1;
        else 
            invert_sqr_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mean_fu_346_p4 <= mul_ln73_fu_340_p2(35 downto 16);
    mul_ln135_1_fu_167_p0 <= sext_ln135_1_fu_425_p1(22 - 1 downto 0);
    mul_ln135_1_fu_167_p1 <= sext_ln135_1_fu_425_p1(22 - 1 downto 0);
    mul_ln135_2_fu_171_p0 <= sext_ln135_2_fu_440_p1(22 - 1 downto 0);
    mul_ln135_2_fu_171_p1 <= sext_ln135_2_fu_440_p1(22 - 1 downto 0);
    mul_ln135_3_fu_175_p0 <= sext_ln135_3_fu_455_p1(22 - 1 downto 0);
    mul_ln135_3_fu_175_p1 <= sext_ln135_3_fu_455_p1(22 - 1 downto 0);
    mul_ln135_4_fu_179_p0 <= sext_ln135_4_fu_470_p1(22 - 1 downto 0);
    mul_ln135_4_fu_179_p1 <= sext_ln135_4_fu_470_p1(22 - 1 downto 0);
    mul_ln135_5_fu_183_p0 <= sext_ln135_5_fu_485_p1(22 - 1 downto 0);
    mul_ln135_5_fu_183_p1 <= sext_ln135_5_fu_485_p1(22 - 1 downto 0);
    mul_ln135_6_fu_187_p0 <= sext_ln135_6_fu_500_p1(22 - 1 downto 0);
    mul_ln135_6_fu_187_p1 <= sext_ln135_6_fu_500_p1(22 - 1 downto 0);
    mul_ln135_7_fu_191_p0 <= sext_ln135_7_fu_515_p1(22 - 1 downto 0);
    mul_ln135_7_fu_191_p1 <= sext_ln135_7_fu_515_p1(22 - 1 downto 0);
    mul_ln135_8_fu_195_p0 <= sext_ln135_8_fu_530_p1(22 - 1 downto 0);
    mul_ln135_8_fu_195_p1 <= sext_ln135_8_fu_530_p1(22 - 1 downto 0);
    mul_ln135_9_fu_199_p0 <= sext_ln135_9_fu_545_p1(22 - 1 downto 0);
    mul_ln135_9_fu_199_p1 <= sext_ln135_9_fu_545_p1(22 - 1 downto 0);
    mul_ln135_fu_163_p0 <= sext_ln135_fu_410_p1(22 - 1 downto 0);
    mul_ln135_fu_163_p1 <= sext_ln135_fu_410_p1(22 - 1 downto 0);
    mul_ln149_1_fu_766_p1 <= sext_ln149_1_fu_743_p1(11 - 1 downto 0);
    mul_ln149_2_fu_785_p1 <= sext_ln149_1_fu_743_p1(11 - 1 downto 0);
    mul_ln149_3_fu_804_p1 <= sext_ln149_1_fu_743_p1(11 - 1 downto 0);
    mul_ln149_4_fu_823_p1 <= sext_ln149_1_fu_743_p1(11 - 1 downto 0);
    mul_ln149_5_fu_842_p1 <= sext_ln149_1_fu_743_p1(11 - 1 downto 0);
    mul_ln149_6_fu_861_p1 <= sext_ln149_1_fu_743_p1(11 - 1 downto 0);
    mul_ln149_7_fu_880_p1 <= sext_ln149_1_fu_743_p1(11 - 1 downto 0);
    mul_ln149_8_fu_899_p1 <= sext_ln149_1_fu_743_p1(11 - 1 downto 0);
    mul_ln149_9_fu_918_p1 <= sext_ln149_1_fu_743_p1(11 - 1 downto 0);
    mul_ln149_fu_747_p1 <= sext_ln149_1_fu_743_p1(11 - 1 downto 0);
    mul_ln73_1_fu_615_p1 <= ap_const_lv36_1999(14 - 1 downto 0);
    mul_ln73_fu_340_p1 <= ap_const_lv36_1999(14 - 1 downto 0);
    select_ln140_fu_673_p3 <= 
        sext_ln140_fu_631_p1 when (icmp_ln140_fu_661_p2(0) = '1') else 
        add_ln140_fu_667_p2;
        sext_ln130_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mean_fu_346_p4),22));

        sext_ln135_1_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_1_reg_1055),38));

        sext_ln135_2_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_2_reg_1061),38));

        sext_ln135_3_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_3_reg_1067),38));

        sext_ln135_4_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_4_reg_1073),38));

        sext_ln135_5_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_5_reg_1079),38));

        sext_ln135_6_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_6_reg_1085),38));

        sext_ln135_7_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_7_reg_1091),38));

        sext_ln135_8_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_8_reg_1097),38));

        sext_ln135_9_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_9_reg_1103),38));

        sext_ln135_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln134_reg_1049),38));

        sext_ln140_1_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_reg_1124),21));

        sext_ln140_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_621_p4),19));

        sext_ln149_1_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_sqr_table_q0),26));

    shl_ln128_1_fu_219_p3 <= (data_2_val & ap_const_lv6_0);
    shl_ln128_2_fu_227_p3 <= (data_3_val & ap_const_lv6_0);
    shl_ln128_3_fu_235_p3 <= (data_4_val & ap_const_lv6_0);
    shl_ln128_4_fu_243_p3 <= (data_5_val & ap_const_lv6_0);
    shl_ln128_5_fu_251_p3 <= (data_6_val & ap_const_lv6_0);
    shl_ln128_6_fu_259_p3 <= (data_7_val & ap_const_lv6_0);
    shl_ln128_7_fu_267_p3 <= (data_8_val & ap_const_lv6_0);
    shl_ln128_8_fu_275_p3 <= (data_9_val & ap_const_lv6_0);
    shl_ln_fu_211_p3 <= (data_1_val & ap_const_lv6_0);
    sub_ln134_1_fu_365_p2 <= std_logic_vector(unsigned(shl_ln_reg_999) - unsigned(sext_ln130_fu_356_p1));
    sub_ln134_2_fu_370_p2 <= std_logic_vector(unsigned(shl_ln128_1_reg_1004) - unsigned(sext_ln130_fu_356_p1));
    sub_ln134_3_fu_375_p2 <= std_logic_vector(unsigned(shl_ln128_2_reg_1009) - unsigned(sext_ln130_fu_356_p1));
    sub_ln134_4_fu_380_p2 <= std_logic_vector(unsigned(shl_ln128_3_reg_1014) - unsigned(sext_ln130_fu_356_p1));
    sub_ln134_5_fu_385_p2 <= std_logic_vector(unsigned(shl_ln128_4_reg_1019) - unsigned(sext_ln130_fu_356_p1));
    sub_ln134_6_fu_390_p2 <= std_logic_vector(unsigned(shl_ln128_5_reg_1024) - unsigned(sext_ln130_fu_356_p1));
    sub_ln134_7_fu_395_p2 <= std_logic_vector(unsigned(shl_ln128_6_reg_1029) - unsigned(sext_ln130_fu_356_p1));
    sub_ln134_8_fu_400_p2 <= std_logic_vector(unsigned(shl_ln128_7_reg_1034) - unsigned(sext_ln130_fu_356_p1));
    sub_ln134_9_fu_405_p2 <= std_logic_vector(unsigned(shl_ln128_8_reg_1039) - unsigned(sext_ln130_fu_356_p1));
    sub_ln134_fu_360_p2 <= std_logic_vector(unsigned(sum_cache_reg_994) - unsigned(sext_ln130_fu_356_p1));
    sum_cache_fu_203_p3 <= (data_0_val & ap_const_lv6_0);
    tmp_1_fu_621_p4 <= mul_ln73_1_fu_615_p2(35 downto 18);
    tmp_2_fu_635_p3 <= mul_ln73_1_fu_615_p2(35 downto 35);
    tmp_3_fu_692_p3 <= sext_ln140_1_fu_689_p1(20 downto 20);
    tmp_4_fu_711_p4 <= index_1_fu_700_p3(18 downto 14);
    tmp_fu_643_p4 <= mul_ln73_1_fu_615_p2(17 downto 16);
    tmp_s_fu_653_p3 <= (tmp_fu_643_p4 & ap_const_lv14_0);
    trunc_ln140_fu_707_p1 <= index_1_fu_700_p3(14 - 1 downto 0);
    zext_ln144_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_2_fu_727_p3),64));
end behav;
