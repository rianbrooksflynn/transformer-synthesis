# This script segment is generated automatically by AutoPilot

# Memory (RAM/ROM)  definition:
set ID 22
set hasByteEnable 0
set MemName myproject_lookup_invert_sqr_config2_s_invert_sqr_table_V
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 21
set AddrRange 256
set AddrWd 8
set impl_style auto
set TrueReset 0
set IsROM 1
set ROMData { "011110000111010010011" "011010100101011010001" "010111001000100100101" "010011110000101010101" "010000011101100101000" "001101001111001101000" "001010000101011011110" "000111000000001010110" "000011111111010011101" "000001000010110000000" "111110001010011001110" "111011010110001010111" "111000100101111101011" "110101111001101011110" "110011010001010000000" "110000101100100101001" "101110001011100101011" "101011101110001011101" "101001010100010010110" "100110111101110101110" "100100101010101111101" "100010011010111011101" "100000001110010101001" "011110000100110111100" "011011111110011110010" "011001111011000100111" "010111111010100111011" "010101111101000001010" "010100000010001110101" "010010001010001011011" "010000010100110011110" "001110100010000011101" "001100110001110111100" "001011000100001011110" "001001011000111100101" "000111110000000110101" "000110001001100110011" "000100100101011000101" "000011000011011010001" "000001100011100111100" "000000000101111101110" "111110101010011001110" "111101010000111000101" "111011111001010111010" "111010100011110011000" "111001010000001001000" "110111111110010110100" "110110101110011000111" "110101100000001101011" "110100010011110001101" "110011001001000011001" "110001111111111111010" "110000111000100011111" "101111110010101110100" "101110101110011100110" "101101101011101100110" "101100101010011100000" "101011101010101000100" "101010101100010000001" "101001101111010000111" "101000110011101000110" "100111111001010101111" "100111000000010110010" "100110001000101000000" "100101010010001001011" "100100011100111000101" "100011101000110011111" "100010110101111001100" "100010000100001000000" "100001010011011101100" "100000100011111000100" "011111110101010111100" "011111000111111001000" "011110011011011011011" "011101101111111101011" "011101000101011101011" "011100011011111010001" "011011110011010010010" "011011001011100100011" "011010100100101111011" "011001111110110001101" "011001011001101010010" "011000110101010111111" "011000010001111001011" "010111101111001101100" "010111001101010011001" "010110101100001001010" "010110001011101110110" "010101101100000010101" "010101001101000011101" "010100101110110001000" "010100010001001001101" "010011110100001100100" "010011010111111000111" "010010111100001101100" "010010100001001001110" "010010000110101100110" "010001101100110101011" "010001010011100011001" "010000111010110100111" "010000100010101010000" "010000001011000001101" "001111110011111011000" "001111011101010101011" "001111000111010000000" "001110110001101010010" "001110011100100011010" "001110000111111010100" "001101110011101111001" "001101100000000000101" "001101001100101110011" "001100111001110111101" "001100100111011011110" "001100010101011010010" "001100000011110010101" "001011110010100100000" "001011100001101110000" "001011010001010000001" "001011000001001001110" "001010110001011010011" "001010100010000001100" "001010010010111110101" "001010000100010001010" "001001110101111000111" "001001100111110101000" "001001011010000101010" "001001001100101001001" "001000111111100000010" "001000110010101010000" "001000100110000110010" "001000011001110100011" "001000001101110100001" "001000000010000100111" "000111110110100110100" "000111101011011000100" "000111100000011010100" "000111010101101100010" "000111001011001101010" "000111000000111101010" "000110110110111011111" "000110101101001000110" "000110100011100011110" "000110011010001100011" "000110010001000010011" "000110001000000101100" "000101111111010101011" "000101110110110001110" "000101101110011010010" "000101100110001110111" "000101011110001111001" "000101010110011010110" "000101001110110001101" "000101000111010011011" "000100111111111111110" "000100111000110110101" "000100110001110111101" "000100101011000010110" "000100100100010111100" "000100011101110101111" "000100010111011101100" "000100010001001110010" "000100001011000111111" "000100000101001010011" "000011111111010101010" "000011111001101000100" "000011110100000011111" "000011101110100111001" "000011101001010010010" "000011100100000101000" "000011011110111111010" "000011011010000000101" "000011010101001001010" "000011010000011000110" "000011001011101111000" "000011000111001100000" "000011000010101111011" "000010111110011001010" "000010111010001001010" "000010110101111111010" "000010110001111011011" "000010101101111101001" "000010101010000100101" "000010100110010001101" "000010100010100100001" "000010011110111011111" "000010011011011000111" "000010010111111010111" "000010010100100001111" "000010010001001101101" "000010001101111110010" "000010001010110011011" "000010000111101101001" "000010000100101011010" "000010000001101101101" "000001111110110100011" "000001111011111111010" "000001111001001110001" "000001110110100000111" "000001110011110111101" "000001110001010010001" "000001101110110000010" "000001101100010010000" "000001101001110111011" "000001100111100000001" "000001100101001100010" "000001100010111011101" "000001100000101110011" "000001011110100100001" "000001011100011101001" "000001011010011001000" "000001011000010111111" "000001010110011001101" "000001010100011110001" "000001010010100101100" "000001010000101111100" "000001001110111100001" "000001001101001011011" "000001001011011101001" "000001001001110001011" "000001001000001000000" "000001000110100000111" "000001000100111100001" "000001000011011001110" "000001000001111001011" "000001000000011011010" "000000111110111111010" "000000111101100101010" "000000111100001101010" "000000111010110111010" "000000111001100011001" "000000111000010001000" "000000110111000000101" "000000110101110010000" "000000110100100101001" "000000110011011010000" "000000110010010000101" "000000110001001000110" "000000110000000010101" "000000101110111110000" "000000101101111010111" "000000101100111001010" "000000101011111001001" "000000101010111010011" "000000101001111101001" "000000101001000001001" "000000101000000110101" "000000100111001101010" "000000100110010101010" "000000100101011110100" "000000100100101001000" "000000100011110100101" "000000100011000001100" "000000100010001111011" "000000100001011110100" "000000100000101110101" "000000011111111111111" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.158
set ClkPeriod 5
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# clear list
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_begin
    cg_default_interface_gen_bundle_begin
    AESL_LIB_XILADAPTER::native_axis_begin
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 23 \
    name x \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_x \
    op interface \
    ports { x { I 21 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -1 \
    name ap_ctrl \
    type ap_ctrl \
    reset_level 1 \
    sync_rst true \
    corename ap_ctrl \
    op interface \
    ports { ap_start { I 1 bit } ap_ready { O 1 bit } ap_done { O 1 bit } ap_idle { O 1 bit } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -2 \
    name ap_return \
    type ap_return \
    reset_level 1 \
    sync_rst true \
    corename ap_return \
    op interface \
    ports { ap_return { O 21 vector } } \
} "
}


# Adapter definition:
set PortName ap_clk
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_clock] == "cg_default_interface_gen_clock"} {
eval "cg_default_interface_gen_clock { \
    id -3 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_clk \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_rst
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_reset] == "cg_default_interface_gen_reset"} {
eval "cg_default_interface_gen_reset { \
    id -4 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_rst \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-114\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_ce
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_ce] == "cg_default_interface_gen_ce"} {
eval "cg_default_interface_gen_ce { \
    id -5 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_ce \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}



# merge
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_end
    cg_default_interface_gen_bundle_end
    AESL_LIB_XILADAPTER::native_axis_end
}


