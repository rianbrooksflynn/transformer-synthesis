-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv37_3333 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000011001100110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal shl_ln_fu_85_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln_reg_467 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_1_fu_93_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_1_reg_472 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_2_fu_101_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_2_reg_477 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_3_fu_109_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_3_reg_482 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_4_fu_117_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_4_reg_487 : STD_LOGIC_VECTOR (21 downto 0);
    signal mean_V_reg_492 : STD_LOGIC_VECTOR (20 downto 0);
    signal data_diff_V_0_fu_165_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_0_reg_497 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_0_reg_497_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_0_reg_497_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_1_fu_190_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_1_reg_502 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_1_reg_502_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_1_reg_502_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_2_fu_215_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_2_reg_507 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_2_reg_507_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_2_reg_507_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_2_reg_512 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_3_fu_240_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_3_reg_517 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_3_reg_517_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_3_reg_517_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_4_fu_265_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_4_reg_522 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_4_reg_522_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_4_reg_522_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_4_fu_290_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_4_reg_527 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_5_fu_296_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_5_reg_532 : STD_LOGIC_VECTOR (21 downto 0);
    signal var_V_reg_537 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_lookup_invert_sqr_config2_s_fu_78_ap_start : STD_LOGIC;
    signal grp_lookup_invert_sqr_config2_s_fu_78_ap_done : STD_LOGIC;
    signal grp_lookup_invert_sqr_config2_s_fu_78_ap_idle : STD_LOGIC;
    signal grp_lookup_invert_sqr_config2_s_fu_78_ap_ready : STD_LOGIC;
    signal grp_lookup_invert_sqr_config2_s_fu_78_ap_ce : STD_LOGIC;
    signal grp_lookup_invert_sqr_config2_s_fu_78_ap_return : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_state1_pp0_stage0_iter0_ignore_call46 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call46 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call46 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call46 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call46 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp51 : BOOLEAN;
    signal grp_lookup_invert_sqr_config2_s_fu_78_ap_start_reg : STD_LOGIC := '0';
    signal add_ln703_1_fu_131_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_fu_125_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_2_fu_137_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_3_fu_143_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_fu_453_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln708_fu_162_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_fu_174_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_1_fu_170_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_fu_174_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_fu_174_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_1_fu_199_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_2_fu_195_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_1_fu_199_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_1_fu_199_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_2_fu_224_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_3_fu_220_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_2_fu_224_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_2_fu_224_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_3_fu_249_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_4_fu_245_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_3_fu_249_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_3_fu_249_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_4_fu_274_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_5_fu_270_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_4_fu_274_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_4_fu_274_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln_fu_180_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_1_fu_205_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_4_fu_280_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_3_fu_255_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_6_fu_302_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_7_fu_306_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_1_fu_460_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln708_5_fu_331_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1118_8_fu_327_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln708_5_fu_331_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln708_6_fu_350_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln708_6_fu_350_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln708_7_fu_369_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln708_7_fu_369_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln708_8_fu_388_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln708_8_fu_388_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln708_9_fu_407_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln708_9_fu_407_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_fu_453_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_1_fu_460_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_lookup_invert_sqr_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (20 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_mul_22s_22s_38_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component myproject_mul_21s_22s_36_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (20 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_mul_mul_22s_15ns_37_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;



begin
    grp_lookup_invert_sqr_config2_s_fu_78 : component myproject_lookup_invert_sqr_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lookup_invert_sqr_config2_s_fu_78_ap_start,
        ap_done => grp_lookup_invert_sqr_config2_s_fu_78_ap_done,
        ap_idle => grp_lookup_invert_sqr_config2_s_fu_78_ap_idle,
        ap_ready => grp_lookup_invert_sqr_config2_s_fu_78_ap_ready,
        ap_ce => grp_lookup_invert_sqr_config2_s_fu_78_ap_ce,
        x => var_V_reg_537,
        ap_return => grp_lookup_invert_sqr_config2_s_fu_78_ap_return);

    mul_22s_22s_38_1_1_U24 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_fu_174_p0,
        din1 => mul_ln708_fu_174_p1,
        dout => mul_ln708_fu_174_p2);

    mul_22s_22s_38_1_1_U25 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_1_fu_199_p0,
        din1 => mul_ln708_1_fu_199_p1,
        dout => mul_ln708_1_fu_199_p2);

    mul_22s_22s_38_1_1_U26 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_2_fu_224_p0,
        din1 => mul_ln708_2_fu_224_p1,
        dout => mul_ln708_2_fu_224_p2);

    mul_22s_22s_38_1_1_U27 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_3_fu_249_p0,
        din1 => mul_ln708_3_fu_249_p1,
        dout => mul_ln708_3_fu_249_p2);

    mul_22s_22s_38_1_1_U28 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_4_fu_274_p0,
        din1 => mul_ln708_4_fu_274_p1,
        dout => mul_ln708_4_fu_274_p2);

    mul_21s_22s_36_1_1_U29 : component myproject_mul_21s_22s_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 21,
        din1_WIDTH => 22,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln708_5_fu_331_p0,
        din1 => data_diff_V_0_reg_497_pp0_iter3_reg,
        dout => mul_ln708_5_fu_331_p2);

    mul_21s_22s_36_1_1_U30 : component myproject_mul_21s_22s_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 21,
        din1_WIDTH => 22,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln708_6_fu_350_p0,
        din1 => data_diff_V_1_reg_502_pp0_iter3_reg,
        dout => mul_ln708_6_fu_350_p2);

    mul_21s_22s_36_1_1_U31 : component myproject_mul_21s_22s_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 21,
        din1_WIDTH => 22,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln708_7_fu_369_p0,
        din1 => data_diff_V_2_reg_507_pp0_iter3_reg,
        dout => mul_ln708_7_fu_369_p2);

    mul_21s_22s_36_1_1_U32 : component myproject_mul_21s_22s_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 21,
        din1_WIDTH => 22,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln708_8_fu_388_p0,
        din1 => data_diff_V_3_reg_517_pp0_iter3_reg,
        dout => mul_ln708_8_fu_388_p2);

    mul_21s_22s_36_1_1_U33 : component myproject_mul_21s_22s_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 21,
        din1_WIDTH => 22,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln708_9_fu_407_p0,
        din1 => data_diff_V_4_reg_522_pp0_iter3_reg,
        dout => mul_ln708_9_fu_407_p2);

    mul_mul_22s_15ns_37_1_1_U34 : component myproject_mul_mul_22s_15ns_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 15,
        dout_WIDTH => 37)
    port map (
        din0 => add_ln703_3_fu_143_p2,
        din1 => r_V_fu_453_p1,
        dout => r_V_fu_453_p2);

    mul_mul_22s_15ns_37_1_1_U35 : component myproject_mul_mul_22s_15ns_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 15,
        dout_WIDTH => 37)
    port map (
        din0 => add_ln703_7_fu_306_p2,
        din1 => r_V_1_fu_460_p1,
        dout => r_V_1_fu_460_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    grp_lookup_invert_sqr_config2_s_fu_78_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lookup_invert_sqr_config2_s_fu_78_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
                    grp_lookup_invert_sqr_config2_s_fu_78_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lookup_invert_sqr_config2_s_fu_78_ap_ready = ap_const_logic_1)) then 
                    grp_lookup_invert_sqr_config2_s_fu_78_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln703_4_reg_527 <= add_ln703_4_fu_290_p2;
                add_ln703_5_reg_532 <= add_ln703_5_fu_296_p2;
                data_diff_V_0_reg_497 <= data_diff_V_0_fu_165_p2;
                data_diff_V_1_reg_502 <= data_diff_V_1_fu_190_p2;
                data_diff_V_2_reg_507 <= data_diff_V_2_fu_215_p2;
                data_diff_V_3_reg_517 <= data_diff_V_3_fu_240_p2;
                data_diff_V_4_reg_522 <= data_diff_V_4_fu_265_p2;
                mean_V_reg_492 <= r_V_fu_453_p2(36 downto 16);
                    shl_ln728_1_reg_472(21 downto 6) <= shl_ln728_1_fu_93_p3(21 downto 6);
                    shl_ln728_2_reg_477(21 downto 6) <= shl_ln728_2_fu_101_p3(21 downto 6);
                    shl_ln728_3_reg_482(21 downto 6) <= shl_ln728_3_fu_109_p3(21 downto 6);
                    shl_ln728_4_reg_487(21 downto 6) <= shl_ln728_4_fu_117_p3(21 downto 6);
                    shl_ln_reg_467(21 downto 6) <= shl_ln_fu_85_p3(21 downto 6);
                trunc_ln708_2_reg_512 <= mul_ln708_2_fu_224_p2(37 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                data_diff_V_0_reg_497_pp0_iter2_reg <= data_diff_V_0_reg_497;
                data_diff_V_0_reg_497_pp0_iter3_reg <= data_diff_V_0_reg_497_pp0_iter2_reg;
                data_diff_V_1_reg_502_pp0_iter2_reg <= data_diff_V_1_reg_502;
                data_diff_V_1_reg_502_pp0_iter3_reg <= data_diff_V_1_reg_502_pp0_iter2_reg;
                data_diff_V_2_reg_507_pp0_iter2_reg <= data_diff_V_2_reg_507;
                data_diff_V_2_reg_507_pp0_iter3_reg <= data_diff_V_2_reg_507_pp0_iter2_reg;
                data_diff_V_3_reg_517_pp0_iter2_reg <= data_diff_V_3_reg_517;
                data_diff_V_3_reg_517_pp0_iter3_reg <= data_diff_V_3_reg_517_pp0_iter2_reg;
                data_diff_V_4_reg_522_pp0_iter2_reg <= data_diff_V_4_reg_522;
                data_diff_V_4_reg_522_pp0_iter3_reg <= data_diff_V_4_reg_522_pp0_iter2_reg;
                var_V_reg_537 <= r_V_1_fu_460_p2(36 downto 16);
            end if;
        end if;
    end process;
    shl_ln_reg_467(5 downto 0) <= "000000";
    shl_ln728_1_reg_472(5 downto 0) <= "000000";
    shl_ln728_2_reg_477(5 downto 0) <= "000000";
    shl_ln728_3_reg_482(5 downto 0) <= "000000";
    shl_ln728_4_reg_487(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_1_fu_131_p2 <= std_logic_vector(unsigned(shl_ln728_4_fu_117_p3) + unsigned(shl_ln728_3_fu_109_p3));
    add_ln703_2_fu_137_p2 <= std_logic_vector(unsigned(shl_ln728_2_fu_101_p3) + unsigned(add_ln703_1_fu_131_p2));
    add_ln703_3_fu_143_p2 <= std_logic_vector(unsigned(add_ln703_fu_125_p2) + unsigned(add_ln703_2_fu_137_p2));
    add_ln703_4_fu_290_p2 <= std_logic_vector(unsigned(trunc_ln_fu_180_p4) + unsigned(trunc_ln708_1_fu_205_p4));
    add_ln703_5_fu_296_p2 <= std_logic_vector(unsigned(trunc_ln708_4_fu_280_p4) + unsigned(trunc_ln708_3_fu_255_p4));
    add_ln703_6_fu_302_p2 <= std_logic_vector(unsigned(trunc_ln708_2_reg_512) + unsigned(add_ln703_5_reg_532));
    add_ln703_7_fu_306_p2 <= std_logic_vector(unsigned(add_ln703_4_reg_527) + unsigned(add_ln703_6_fu_302_p2));
    add_ln703_fu_125_p2 <= std_logic_vector(unsigned(shl_ln_fu_85_p3) + unsigned(shl_ln728_1_fu_93_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp51_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp51 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call46_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call46 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call46 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= mul_ln708_5_fu_331_p2(35 downto 20);
    ap_return_1 <= mul_ln708_6_fu_350_p2(35 downto 20);
    ap_return_2 <= mul_ln708_7_fu_369_p2(35 downto 20);
    ap_return_3 <= mul_ln708_8_fu_388_p2(35 downto 20);
    ap_return_4 <= mul_ln708_9_fu_407_p2(35 downto 20);
    data_diff_V_0_fu_165_p2 <= std_logic_vector(unsigned(shl_ln_reg_467) - unsigned(sext_ln708_fu_162_p1));
    data_diff_V_1_fu_190_p2 <= std_logic_vector(unsigned(shl_ln728_1_reg_472) - unsigned(sext_ln708_fu_162_p1));
    data_diff_V_2_fu_215_p2 <= std_logic_vector(unsigned(shl_ln728_2_reg_477) - unsigned(sext_ln708_fu_162_p1));
    data_diff_V_3_fu_240_p2 <= std_logic_vector(unsigned(shl_ln728_3_reg_482) - unsigned(sext_ln708_fu_162_p1));
    data_diff_V_4_fu_265_p2 <= std_logic_vector(unsigned(shl_ln728_4_reg_487) - unsigned(sext_ln708_fu_162_p1));

    grp_lookup_invert_sqr_config2_s_fu_78_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001_ignoreCallOp51)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp51) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_lookup_invert_sqr_config2_s_fu_78_ap_ce <= ap_const_logic_1;
        else 
            grp_lookup_invert_sqr_config2_s_fu_78_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_lookup_invert_sqr_config2_s_fu_78_ap_start <= grp_lookup_invert_sqr_config2_s_fu_78_ap_start_reg;
    mul_ln708_1_fu_199_p0 <= sext_ln1118_2_fu_195_p1(22 - 1 downto 0);
    mul_ln708_1_fu_199_p1 <= sext_ln1118_2_fu_195_p1(22 - 1 downto 0);
    mul_ln708_2_fu_224_p0 <= sext_ln1118_3_fu_220_p1(22 - 1 downto 0);
    mul_ln708_2_fu_224_p1 <= sext_ln1118_3_fu_220_p1(22 - 1 downto 0);
    mul_ln708_3_fu_249_p0 <= sext_ln1118_4_fu_245_p1(22 - 1 downto 0);
    mul_ln708_3_fu_249_p1 <= sext_ln1118_4_fu_245_p1(22 - 1 downto 0);
    mul_ln708_4_fu_274_p0 <= sext_ln1118_5_fu_270_p1(22 - 1 downto 0);
    mul_ln708_4_fu_274_p1 <= sext_ln1118_5_fu_270_p1(22 - 1 downto 0);
    mul_ln708_5_fu_331_p0 <= sext_ln1118_8_fu_327_p1(21 - 1 downto 0);
    mul_ln708_6_fu_350_p0 <= sext_ln1118_8_fu_327_p1(21 - 1 downto 0);
    mul_ln708_7_fu_369_p0 <= sext_ln1118_8_fu_327_p1(21 - 1 downto 0);
    mul_ln708_8_fu_388_p0 <= sext_ln1118_8_fu_327_p1(21 - 1 downto 0);
    mul_ln708_9_fu_407_p0 <= sext_ln1118_8_fu_327_p1(21 - 1 downto 0);
    mul_ln708_fu_174_p0 <= sext_ln1118_1_fu_170_p1(22 - 1 downto 0);
    mul_ln708_fu_174_p1 <= sext_ln1118_1_fu_170_p1(22 - 1 downto 0);
    r_V_1_fu_460_p1 <= ap_const_lv37_3333(15 - 1 downto 0);
    r_V_fu_453_p1 <= ap_const_lv37_3333(15 - 1 downto 0);
        sext_ln1118_1_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_diff_V_0_fu_165_p2),38));

        sext_ln1118_2_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_diff_V_1_fu_190_p2),38));

        sext_ln1118_3_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_diff_V_2_fu_215_p2),38));

        sext_ln1118_4_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_diff_V_3_fu_240_p2),38));

        sext_ln1118_5_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_diff_V_4_fu_265_p2),38));

        sext_ln1118_8_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_lookup_invert_sqr_config2_s_fu_78_ap_return),36));

        sext_ln708_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mean_V_reg_492),22));

    shl_ln728_1_fu_93_p3 <= (p_read1 & ap_const_lv6_0);
    shl_ln728_2_fu_101_p3 <= (p_read2 & ap_const_lv6_0);
    shl_ln728_3_fu_109_p3 <= (p_read3 & ap_const_lv6_0);
    shl_ln728_4_fu_117_p3 <= (p_read4 & ap_const_lv6_0);
    shl_ln_fu_85_p3 <= (p_read & ap_const_lv6_0);
    trunc_ln708_1_fu_205_p4 <= mul_ln708_1_fu_199_p2(37 downto 16);
    trunc_ln708_3_fu_255_p4 <= mul_ln708_3_fu_249_p2(37 downto 16);
    trunc_ln708_4_fu_280_p4 <= mul_ln708_4_fu_274_p2(37 downto 16);
    trunc_ln_fu_180_p4 <= mul_ln708_fu_174_p2(37 downto 16);
end behav;
