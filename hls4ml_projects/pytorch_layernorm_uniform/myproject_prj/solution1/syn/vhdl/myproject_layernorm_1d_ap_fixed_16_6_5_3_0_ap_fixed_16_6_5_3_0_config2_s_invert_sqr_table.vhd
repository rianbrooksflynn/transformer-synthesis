-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_invert_sqr_table_rom is 
    generic(
             DWIDTH     : integer := 11; 
             AWIDTH     : integer := 14; 
             MEM_SIZE    : integer := 16384
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_invert_sqr_table_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01111000011", 1 => "11101101010", 2 => "10101110000", 
    3 => "10001111111", 4 => "01111101011", 5 => "01110000101", 
    6 => "01100111000", 7 => "01011111101", 8 => "01011001100", 
    9 => "01010100100", 10 => "01010000010", 11 => "01001100100", 
    12 => "01001001011", 13 => "01000110100", 14 => "01000100000", 
    15 => "01000001101", 16 => "00111111101", 17 => "00111101110", 
    18 => "00111100000", 19 => "00111010011", 20 => "00111001000", 
    21 => "00110111101", 22 => "00110110011", 23 => "00110101001", 
    24 => "00110100000", 25 => "00110011000", 26 => "00110010000", 
    27 => "00110001000", 28 => "00110000001", 29 => "00101111011", 
    30 => "00101110100", 31 => "00101101110", 32 => "00101101001", 
    33 => "00101100011", 34 => "00101011110", 35 => "00101011001", 
    36 => "00101010100", 37 => "00101001111", 38 => "00101001011", 
    39 => "00101000111", 40 => "00101000011", 41 => "00100111111", 
    42 => "00100111011", 43 => "00100110111", 44 => "00100110100", 
    45 => "00100110000", 46 => "00100101101", 47 => "00100101010", 
    48 => "00100100111", 49 => "00100100100", 50 => "00100100001", 
    51 => "00100011110", 52 => "00100011011", 53 => "00100011000", 
    54 => "00100010110", 55 => "00100010011", 56 => "00100010001", 
    57 => "00100001110", 58 => "00100001100", 59 => "00100001010", 
    60 => "00100001000", 61 => "00100000101", 62 => "00100000011", 
    63 => "00100000001", 64 => "00011111111", 65 => "00011111101", 
    66 => "00011111011", 67 => "00011111001", 68 => "00011111000", 
    69 => "00011110110", 70 => "00011110100", 71 => "00011110010", 
    72 => "00011110001", 73 => "00011101111", 74 => "00011101101", 
    75 => "00011101100", 76 => "00011101010", 77 => "00011101001", 
    78 => "00011100111", 79 => "00011100110", 80 => "00011100100", 
    81 => "00011100011", 82 => "00011100001", 83 => "00011100000", 
    84 => "00011011111", 85 => "00011011101", 86 => "00011011100", 
    87 => "00011011011", 88 => "00011011010", 89 => "00011011000", 
    90 => "00011010111", 91 => "00011010110", 92 => "00011010101", 
    93 => "00011010100", 94 => "00011010011", 95 => "00011010001", 
    96 => "00011010000", 97 => "00011001111", 98 => "00011001110", 
    99 => "00011001101", 100 => "00011001100", 101 => "00011001011", 
    102 => "00011001010", 103 => "00011001001", 104 => "00011001000", 
    105 => "00011000111", 106 => "00011000110", 107 => "00011000101", 
    108 to 109=> "00011000100", 110 => "00011000011", 111 => "00011000010", 
    112 => "00011000001", 113 => "00011000000", 114 => "00010111111", 
    115 to 116=> "00010111110", 117 => "00010111101", 118 => "00010111100", 
    119 => "00010111011", 120 to 121=> "00010111010", 122 => "00010111001", 
    123 => "00010111000", 124 to 125=> "00010110111", 126 => "00010110110", 
    127 => "00010110101", 128 to 129=> "00010110100", 130 => "00010110011", 
    131 to 132=> "00010110010", 133 => "00010110001", 134 to 135=> "00010110000", 
    136 => "00010101111", 137 to 138=> "00010101110", 139 => "00010101101", 
    140 to 141=> "00010101100", 142 to 143=> "00010101011", 144 => "00010101010", 
    145 to 146=> "00010101001", 147 to 148=> "00010101000", 149 to 150=> "00010100111", 
    151 to 152=> "00010100110", 153 => "00010100101", 154 to 155=> "00010100100", 
    156 to 157=> "00010100011", 158 to 159=> "00010100010", 160 to 161=> "00010100001", 
    162 to 163=> "00010100000", 164 to 165=> "00010011111", 166 to 167=> "00010011110", 
    168 to 169=> "00010011101", 170 to 172=> "00010011100", 173 to 174=> "00010011011", 
    175 to 176=> "00010011010", 177 to 179=> "00010011001", 180 to 181=> "00010011000", 
    182 to 183=> "00010010111", 184 to 186=> "00010010110", 187 to 188=> "00010010101", 
    189 to 191=> "00010010100", 192 to 193=> "00010010011", 194 to 196=> "00010010010", 
    197 to 199=> "00010010001", 200 to 202=> "00010010000", 203 to 204=> "00010001111", 
    205 to 207=> "00010001110", 208 to 210=> "00010001101", 211 to 213=> "00010001100", 
    214 to 216=> "00010001011", 217 to 220=> "00010001010", 221 to 223=> "00010001001", 
    224 to 226=> "00010001000", 227 to 229=> "00010000111", 230 to 233=> "00010000110", 
    234 to 236=> "00010000101", 237 to 240=> "00010000100", 241 to 244=> "00010000011", 
    245 to 248=> "00010000010", 249 to 251=> "00010000001", 252 to 255=> "00010000000", 
    256 to 259=> "00001111111", 260 to 264=> "00001111110", 265 to 268=> "00001111101", 
    269 to 272=> "00001111100", 273 to 277=> "00001111011", 278 to 281=> "00001111010", 
    282 to 286=> "00001111001", 287 to 291=> "00001111000", 292 to 296=> "00001110111", 
    297 to 301=> "00001110110", 302 to 306=> "00001110101", 307 to 311=> "00001110100", 
    312 to 316=> "00001110011", 317 to 322=> "00001110010", 323 to 328=> "00001110001", 
    329 to 334=> "00001110000", 335 to 340=> "00001101111", 341 to 346=> "00001101110", 
    347 to 352=> "00001101101", 353 to 359=> "00001101100", 360 to 366=> "00001101011", 
    367 to 373=> "00001101010", 374 to 380=> "00001101001", 381 to 387=> "00001101000", 
    388 to 395=> "00001100111", 396 to 402=> "00001100110", 403 to 411=> "00001100101", 
    412 to 419=> "00001100100", 420 to 427=> "00001100011", 428 to 436=> "00001100010", 
    437 to 445=> "00001100001", 446 to 454=> "00001100000", 455 to 464=> "00001011111", 
    465 to 474=> "00001011110", 475 to 484=> "00001011101", 485 to 495=> "00001011100", 
    496 to 506=> "00001011011", 507 to 517=> "00001011010", 518 to 529=> "00001011001", 
    530 to 541=> "00001011000", 542 to 553=> "00001010111", 554 to 566=> "00001010110", 
    567 to 580=> "00001010101", 581 to 594=> "00001010100", 595 to 608=> "00001010011", 
    609 to 623=> "00001010010", 624 to 639=> "00001010001", 640 to 655=> "00001010000", 
    656 to 671=> "00001001111", 672 to 689=> "00001001110", 690 to 707=> "00001001101", 
    708 to 725=> "00001001100", 726 to 745=> "00001001011", 746 to 765=> "00001001010", 
    766 to 786=> "00001001001", 787 to 808=> "00001001000", 809 to 831=> "00001000111", 
    832 to 855=> "00001000110", 856 to 880=> "00001000101", 881 to 906=> "00001000100", 
    907 to 934=> "00001000011", 935 to 962=> "00001000010", 963 to 992=> "00001000001", 
    993 to 1023=> "00001000000", 1024 to 1056=> "00000111111", 1057 to 1090=> "00000111110", 
    1091 to 1127=> "00000111101", 1128 to 1164=> "00000111100", 1165 to 1204=> "00000111011", 
    1205 to 1246=> "00000111010", 1247 to 1290=> "00000111001", 1291 to 1337=> "00000111000", 
    1338 to 1386=> "00000110111", 1387 to 1438=> "00000110110", 1439 to 1493=> "00000110101", 
    1494 to 1550=> "00000110100", 1551 to 1612=> "00000110011", 1613 to 1677=> "00000110010", 
    1678 to 1746=> "00000110001", 1747 to 1820=> "00000110000", 1821 to 1898=> "00000101111", 
    1899 to 1982=> "00000101110", 1983 to 2071=> "00000101101", 2072 to 2166=> "00000101100", 
    2167 to 2268=> "00000101011", 2269 to 2377=> "00000101010", 2378 to 2494=> "00000101001", 
    2495 to 2621=> "00000101000", 2622 to 2757=> "00000100111", 2758 to 2904=> "00000100110", 
    2905 to 3063=> "00000100101", 3064 to 3236=> "00000100100", 3237 to 3423=> "00000100011", 
    3424 to 3628=> "00000100010", 3629 to 3851=> "00000100001", 3852 to 4095=> "00000100000", 
    4096 to 4364=> "00000011111", 4365 to 4660=> "00000011110", 4661 to 4987=> "00000011101", 
    4988 to 5349=> "00000011100", 5350 to 5753=> "00000011011", 5754 to 6204=> "00000011010", 
    6205 to 6710=> "00000011001", 6711 to 7281=> "00000011000", 7282 to 7928=> "00000010111", 
    7929 to 8665=> "00000010110", 8666 to 9510=> "00000010101", 9511 to 10485=> "00000010100", 
    10486 to 11618=> "00000010011", 11619 to 12945=> "00000010010", 12946 to 14512=> "00000010001", 
    14513 to 16383=> "00000010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_invert_sqr_table is
    generic (
        DataWidth : INTEGER := 11;
        AddressRange : INTEGER := 16384;
        AddressWidth : INTEGER := 14);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_invert_sqr_table is
    component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_invert_sqr_table_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_invert_sqr_table_rom_U :  component myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_invert_sqr_table_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


