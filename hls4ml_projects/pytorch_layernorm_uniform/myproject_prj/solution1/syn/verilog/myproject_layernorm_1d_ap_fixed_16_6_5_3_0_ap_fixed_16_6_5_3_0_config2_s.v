// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] p_read2;
input  [15:0] p_read3;
input  [15:0] p_read4;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [13:0] invert_sqr_table_address0;
reg    invert_sqr_table_ce0;
wire   [10:0] invert_sqr_table_q0;
wire   [21:0] shl_ln_fu_121_p3;
reg   [21:0] shl_ln_reg_607;
wire   [21:0] shl_ln728_1_fu_129_p3;
reg   [21:0] shl_ln728_1_reg_612;
wire   [21:0] shl_ln728_2_fu_137_p3;
reg   [21:0] shl_ln728_2_reg_617;
wire   [21:0] shl_ln728_3_fu_145_p3;
reg   [21:0] shl_ln728_3_reg_622;
wire   [21:0] shl_ln728_4_fu_153_p3;
reg   [21:0] shl_ln728_4_reg_627;
reg   [20:0] mean_V_reg_632;
wire  signed [21:0] sub_ln703_fu_201_p2;
reg  signed [21:0] sub_ln703_reg_637;
reg  signed [21:0] sub_ln703_reg_637_pp0_iter2_reg;
reg  signed [21:0] sub_ln703_reg_637_pp0_iter3_reg;
reg   [21:0] trunc_ln_reg_642;
wire  signed [21:0] sub_ln703_1_fu_226_p2;
reg  signed [21:0] sub_ln703_1_reg_647;
reg  signed [21:0] sub_ln703_1_reg_647_pp0_iter2_reg;
reg  signed [21:0] sub_ln703_1_reg_647_pp0_iter3_reg;
reg   [21:0] trunc_ln708_1_reg_652;
wire  signed [21:0] sub_ln703_2_fu_251_p2;
reg  signed [21:0] sub_ln703_2_reg_657;
reg  signed [21:0] sub_ln703_2_reg_657_pp0_iter2_reg;
reg  signed [21:0] sub_ln703_2_reg_657_pp0_iter3_reg;
wire  signed [21:0] sub_ln703_3_fu_276_p2;
reg  signed [21:0] sub_ln703_3_reg_662;
reg  signed [21:0] sub_ln703_3_reg_662_pp0_iter2_reg;
reg  signed [21:0] sub_ln703_3_reg_662_pp0_iter3_reg;
wire  signed [21:0] sub_ln703_4_fu_301_p2;
reg  signed [21:0] sub_ln703_4_reg_667;
reg  signed [21:0] sub_ln703_4_reg_667_pp0_iter2_reg;
reg  signed [21:0] sub_ln703_4_reg_667_pp0_iter3_reg;
wire   [21:0] add_ln703_6_fu_332_p2;
reg   [21:0] add_ln703_6_reg_672;
wire  signed [36:0] r_V_1_fu_564_p2;
reg  signed [36:0] r_V_1_reg_677;
reg   [18:0] tmp_reg_682;
wire   [0:0] icmp_ln851_fu_377_p2;
reg   [0:0] icmp_ln851_reg_687;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln144_fu_458_p1;
wire   [21:0] add_ln703_1_fu_167_p2;
wire   [21:0] add_ln703_2_fu_173_p2;
wire   [21:0] add_ln703_fu_161_p2;
wire  signed [21:0] add_ln703_3_fu_179_p2;
wire  signed [36:0] r_V_fu_557_p2;
wire  signed [21:0] sext_ln708_fu_198_p1;
wire  signed [21:0] mul_ln708_fu_210_p0;
wire  signed [37:0] sext_ln1118_1_fu_206_p1;
wire  signed [21:0] mul_ln708_fu_210_p1;
wire   [37:0] mul_ln708_fu_210_p2;
wire  signed [21:0] mul_ln708_1_fu_235_p0;
wire  signed [37:0] sext_ln1118_2_fu_231_p1;
wire  signed [21:0] mul_ln708_1_fu_235_p1;
wire   [37:0] mul_ln708_1_fu_235_p2;
wire  signed [21:0] mul_ln708_2_fu_260_p0;
wire  signed [37:0] sext_ln1118_3_fu_256_p1;
wire  signed [21:0] mul_ln708_2_fu_260_p1;
wire   [37:0] mul_ln708_2_fu_260_p2;
wire  signed [21:0] mul_ln708_3_fu_285_p0;
wire  signed [37:0] sext_ln1118_4_fu_281_p1;
wire  signed [21:0] mul_ln708_3_fu_285_p1;
wire   [37:0] mul_ln708_3_fu_285_p2;
wire  signed [21:0] mul_ln708_4_fu_310_p0;
wire  signed [37:0] sext_ln1118_5_fu_306_p1;
wire  signed [21:0] mul_ln708_4_fu_310_p1;
wire   [37:0] mul_ln708_4_fu_310_p2;
wire   [21:0] trunc_ln708_3_fu_291_p4;
wire   [21:0] trunc_ln708_4_fu_316_p4;
wire   [21:0] add_ln703_5_fu_326_p2;
wire   [21:0] trunc_ln708_2_fu_266_p4;
wire   [21:0] add_ln703_4_fu_338_p2;
wire  signed [21:0] add_ln703_7_fu_342_p2;
wire   [1:0] tmp_1_fu_360_p4;
wire   [15:0] p_Result_2_fu_369_p3;
wire  signed [19:0] sext_ln850_fu_383_p1;
wire   [19:0] add_ln695_fu_393_p2;
wire   [0:0] tmp_2_fu_386_p3;
wire   [19:0] select_ln850_fu_399_p3;
wire   [19:0] index_fu_406_p3;
wire   [0:0] tmp_3_fu_414_p3;
wire   [19:0] index_1_fu_422_p3;
wire   [5:0] tmp_4_fu_434_p4;
wire   [0:0] icmp_ln143_fu_444_p2;
wire   [13:0] trunc_ln140_fu_430_p1;
wire   [13:0] index_2_fu_450_p3;
wire  signed [25:0] mul_ln708_5_fu_572_p2;
wire  signed [25:0] mul_ln708_6_fu_579_p2;
wire  signed [25:0] mul_ln708_7_fu_586_p2;
wire  signed [25:0] mul_ln708_8_fu_593_p2;
wire  signed [25:0] mul_ln708_9_fu_600_p2;
wire   [14:0] r_V_fu_557_p0;
wire   [14:0] r_V_1_fu_564_p0;
wire  signed [10:0] mul_ln708_5_fu_572_p1;
wire  signed [25:0] sext_ln1118_8_fu_466_p1;
wire  signed [10:0] mul_ln708_6_fu_579_p1;
wire  signed [10:0] mul_ln708_7_fu_586_p1;
wire  signed [10:0] mul_ln708_8_fu_593_p1;
wire  signed [10:0] mul_ln708_9_fu_600_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_invert_sqr_table #(
    .DataWidth( 11 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
invert_sqr_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_sqr_table_address0),
    .ce0(invert_sqr_table_ce0),
    .q0(invert_sqr_table_q0)
);

myproject_mul_22s_22s_38_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 38 ))
mul_22s_22s_38_1_1_U22(
    .din0(mul_ln708_fu_210_p0),
    .din1(mul_ln708_fu_210_p1),
    .dout(mul_ln708_fu_210_p2)
);

myproject_mul_22s_22s_38_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 38 ))
mul_22s_22s_38_1_1_U23(
    .din0(mul_ln708_1_fu_235_p0),
    .din1(mul_ln708_1_fu_235_p1),
    .dout(mul_ln708_1_fu_235_p2)
);

myproject_mul_22s_22s_38_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 38 ))
mul_22s_22s_38_1_1_U24(
    .din0(mul_ln708_2_fu_260_p0),
    .din1(mul_ln708_2_fu_260_p1),
    .dout(mul_ln708_2_fu_260_p2)
);

myproject_mul_22s_22s_38_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 38 ))
mul_22s_22s_38_1_1_U25(
    .din0(mul_ln708_3_fu_285_p0),
    .din1(mul_ln708_3_fu_285_p1),
    .dout(mul_ln708_3_fu_285_p2)
);

myproject_mul_22s_22s_38_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 38 ))
mul_22s_22s_38_1_1_U26(
    .din0(mul_ln708_4_fu_310_p0),
    .din1(mul_ln708_4_fu_310_p1),
    .dout(mul_ln708_4_fu_310_p2)
);

myproject_mul_mul_15ns_22s_37_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 37 ))
mul_mul_15ns_22s_37_1_1_U27(
    .din0(r_V_fu_557_p0),
    .din1(add_ln703_3_fu_179_p2),
    .dout(r_V_fu_557_p2)
);

myproject_mul_mul_15ns_22s_37_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 37 ))
mul_mul_15ns_22s_37_1_1_U28(
    .din0(r_V_1_fu_564_p0),
    .din1(add_ln703_7_fu_342_p2),
    .dout(r_V_1_fu_564_p2)
);

myproject_mul_mul_22s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_mul_22s_11s_26_1_1_U29(
    .din0(sub_ln703_reg_637_pp0_iter3_reg),
    .din1(mul_ln708_5_fu_572_p1),
    .dout(mul_ln708_5_fu_572_p2)
);

myproject_mul_mul_22s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_mul_22s_11s_26_1_1_U30(
    .din0(sub_ln703_1_reg_647_pp0_iter3_reg),
    .din1(mul_ln708_6_fu_579_p1),
    .dout(mul_ln708_6_fu_579_p2)
);

myproject_mul_mul_22s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_mul_22s_11s_26_1_1_U31(
    .din0(sub_ln703_2_reg_657_pp0_iter3_reg),
    .din1(mul_ln708_7_fu_586_p1),
    .dout(mul_ln708_7_fu_586_p2)
);

myproject_mul_mul_22s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_mul_22s_11s_26_1_1_U32(
    .din0(sub_ln703_3_reg_662_pp0_iter3_reg),
    .din1(mul_ln708_8_fu_593_p1),
    .dout(mul_ln708_8_fu_593_p2)
);

myproject_mul_mul_22s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_mul_22s_11s_26_1_1_U33(
    .din0(sub_ln703_4_reg_667_pp0_iter3_reg),
    .din1(mul_ln708_9_fu_600_p1),
    .dout(mul_ln708_9_fu_600_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln703_6_reg_672 <= add_ln703_6_fu_332_p2;
        mean_V_reg_632 <= {{r_V_fu_557_p2[36:16]}};
        shl_ln728_1_reg_612[21 : 6] <= shl_ln728_1_fu_129_p3[21 : 6];
        shl_ln728_2_reg_617[21 : 6] <= shl_ln728_2_fu_137_p3[21 : 6];
        shl_ln728_3_reg_622[21 : 6] <= shl_ln728_3_fu_145_p3[21 : 6];
        shl_ln728_4_reg_627[21 : 6] <= shl_ln728_4_fu_153_p3[21 : 6];
        shl_ln_reg_607[21 : 6] <= shl_ln_fu_121_p3[21 : 6];
        sub_ln703_1_reg_647 <= sub_ln703_1_fu_226_p2;
        sub_ln703_2_reg_657 <= sub_ln703_2_fu_251_p2;
        sub_ln703_3_reg_662 <= sub_ln703_3_fu_276_p2;
        sub_ln703_4_reg_667 <= sub_ln703_4_fu_301_p2;
        sub_ln703_reg_637 <= sub_ln703_fu_201_p2;
        trunc_ln708_1_reg_652 <= {{mul_ln708_1_fu_235_p2[37:16]}};
        trunc_ln_reg_642 <= {{mul_ln708_fu_210_p2[37:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        icmp_ln851_reg_687 <= icmp_ln851_fu_377_p2;
        r_V_1_reg_677 <= r_V_1_fu_564_p2;
        sub_ln703_1_reg_647_pp0_iter2_reg <= sub_ln703_1_reg_647;
        sub_ln703_1_reg_647_pp0_iter3_reg <= sub_ln703_1_reg_647_pp0_iter2_reg;
        sub_ln703_2_reg_657_pp0_iter2_reg <= sub_ln703_2_reg_657;
        sub_ln703_2_reg_657_pp0_iter3_reg <= sub_ln703_2_reg_657_pp0_iter2_reg;
        sub_ln703_3_reg_662_pp0_iter2_reg <= sub_ln703_3_reg_662;
        sub_ln703_3_reg_662_pp0_iter3_reg <= sub_ln703_3_reg_662_pp0_iter2_reg;
        sub_ln703_4_reg_667_pp0_iter2_reg <= sub_ln703_4_reg_667;
        sub_ln703_4_reg_667_pp0_iter3_reg <= sub_ln703_4_reg_667_pp0_iter2_reg;
        sub_ln703_reg_637_pp0_iter2_reg <= sub_ln703_reg_637;
        sub_ln703_reg_637_pp0_iter3_reg <= sub_ln703_reg_637_pp0_iter2_reg;
        tmp_reg_682 <= {{r_V_1_fu_564_p2[36:18]}};
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        invert_sqr_table_ce0 = 1'b1;
    end else begin
        invert_sqr_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln695_fu_393_p2 = ($signed(20'd1) + $signed(sext_ln850_fu_383_p1));

assign add_ln703_1_fu_167_p2 = (shl_ln728_3_fu_145_p3 + shl_ln728_4_fu_153_p3);

assign add_ln703_2_fu_173_p2 = (add_ln703_1_fu_167_p2 + shl_ln728_2_fu_137_p3);

assign add_ln703_3_fu_179_p2 = (add_ln703_2_fu_173_p2 + add_ln703_fu_161_p2);

assign add_ln703_4_fu_338_p2 = (trunc_ln708_1_reg_652 + trunc_ln_reg_642);

assign add_ln703_5_fu_326_p2 = (trunc_ln708_3_fu_291_p4 + trunc_ln708_4_fu_316_p4);

assign add_ln703_6_fu_332_p2 = (add_ln703_5_fu_326_p2 + trunc_ln708_2_fu_266_p4);

assign add_ln703_7_fu_342_p2 = (add_ln703_6_reg_672 + add_ln703_4_fu_338_p2);

assign add_ln703_fu_161_p2 = (shl_ln728_1_fu_129_p3 + shl_ln_fu_121_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{mul_ln708_5_fu_572_p2[25:10]}};

assign ap_return_1 = {{mul_ln708_6_fu_579_p2[25:10]}};

assign ap_return_2 = {{mul_ln708_7_fu_586_p2[25:10]}};

assign ap_return_3 = {{mul_ln708_8_fu_593_p2[25:10]}};

assign ap_return_4 = {{mul_ln708_9_fu_600_p2[25:10]}};

assign icmp_ln143_fu_444_p2 = ((tmp_4_fu_434_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_377_p2 = ((p_Result_2_fu_369_p3 != 16'd0) ? 1'b1 : 1'b0);

assign index_1_fu_422_p3 = ((tmp_3_fu_414_p3[0:0] === 1'b1) ? 20'd0 : index_fu_406_p3);

assign index_2_fu_450_p3 = ((icmp_ln143_fu_444_p2[0:0] === 1'b1) ? 14'd16383 : trunc_ln140_fu_430_p1);

assign index_fu_406_p3 = ((tmp_2_fu_386_p3[0:0] === 1'b1) ? select_ln850_fu_399_p3 : sext_ln850_fu_383_p1);

assign invert_sqr_table_address0 = zext_ln144_fu_458_p1;

assign mul_ln708_1_fu_235_p0 = sext_ln1118_2_fu_231_p1;

assign mul_ln708_1_fu_235_p1 = sext_ln1118_2_fu_231_p1;

assign mul_ln708_2_fu_260_p0 = sext_ln1118_3_fu_256_p1;

assign mul_ln708_2_fu_260_p1 = sext_ln1118_3_fu_256_p1;

assign mul_ln708_3_fu_285_p0 = sext_ln1118_4_fu_281_p1;

assign mul_ln708_3_fu_285_p1 = sext_ln1118_4_fu_281_p1;

assign mul_ln708_4_fu_310_p0 = sext_ln1118_5_fu_306_p1;

assign mul_ln708_4_fu_310_p1 = sext_ln1118_5_fu_306_p1;

assign mul_ln708_5_fu_572_p1 = sext_ln1118_8_fu_466_p1;

assign mul_ln708_6_fu_579_p1 = sext_ln1118_8_fu_466_p1;

assign mul_ln708_7_fu_586_p1 = sext_ln1118_8_fu_466_p1;

assign mul_ln708_8_fu_593_p1 = sext_ln1118_8_fu_466_p1;

assign mul_ln708_9_fu_600_p1 = sext_ln1118_8_fu_466_p1;

assign mul_ln708_fu_210_p0 = sext_ln1118_1_fu_206_p1;

assign mul_ln708_fu_210_p1 = sext_ln1118_1_fu_206_p1;

assign p_Result_2_fu_369_p3 = {{tmp_1_fu_360_p4}, {14'd0}};

assign r_V_1_fu_564_p0 = 37'd13107;

assign r_V_fu_557_p0 = 37'd13107;

assign select_ln850_fu_399_p3 = ((icmp_ln851_reg_687[0:0] === 1'b1) ? add_ln695_fu_393_p2 : sext_ln850_fu_383_p1);

assign sext_ln1118_1_fu_206_p1 = sub_ln703_fu_201_p2;

assign sext_ln1118_2_fu_231_p1 = sub_ln703_1_fu_226_p2;

assign sext_ln1118_3_fu_256_p1 = sub_ln703_2_fu_251_p2;

assign sext_ln1118_4_fu_281_p1 = sub_ln703_3_fu_276_p2;

assign sext_ln1118_5_fu_306_p1 = sub_ln703_4_fu_301_p2;

assign sext_ln1118_8_fu_466_p1 = $signed(invert_sqr_table_q0);

assign sext_ln708_fu_198_p1 = $signed(mean_V_reg_632);

assign sext_ln850_fu_383_p1 = $signed(tmp_reg_682);

assign shl_ln728_1_fu_129_p3 = {{p_read1}, {6'd0}};

assign shl_ln728_2_fu_137_p3 = {{p_read2}, {6'd0}};

assign shl_ln728_3_fu_145_p3 = {{p_read3}, {6'd0}};

assign shl_ln728_4_fu_153_p3 = {{p_read4}, {6'd0}};

assign shl_ln_fu_121_p3 = {{p_read}, {6'd0}};

assign sub_ln703_1_fu_226_p2 = ($signed(shl_ln728_1_reg_612) - $signed(sext_ln708_fu_198_p1));

assign sub_ln703_2_fu_251_p2 = ($signed(shl_ln728_2_reg_617) - $signed(sext_ln708_fu_198_p1));

assign sub_ln703_3_fu_276_p2 = ($signed(shl_ln728_3_reg_622) - $signed(sext_ln708_fu_198_p1));

assign sub_ln703_4_fu_301_p2 = ($signed(shl_ln728_4_reg_627) - $signed(sext_ln708_fu_198_p1));

assign sub_ln703_fu_201_p2 = ($signed(shl_ln_reg_607) - $signed(sext_ln708_fu_198_p1));

assign tmp_1_fu_360_p4 = {{r_V_1_fu_564_p2[17:16]}};

assign tmp_2_fu_386_p3 = r_V_1_reg_677[32'd36];

assign tmp_3_fu_414_p3 = index_fu_406_p3[32'd19];

assign tmp_4_fu_434_p4 = {{index_1_fu_422_p3[19:14]}};

assign trunc_ln140_fu_430_p1 = index_1_fu_422_p3[13:0];

assign trunc_ln708_2_fu_266_p4 = {{mul_ln708_2_fu_260_p2[37:16]}};

assign trunc_ln708_3_fu_291_p4 = {{mul_ln708_3_fu_285_p2[37:16]}};

assign trunc_ln708_4_fu_316_p4 = {{mul_ln708_4_fu_310_p2[37:16]}};

assign zext_ln144_fu_458_p1 = index_2_fu_450_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_607[5:0] <= 6'b000000;
    shl_ln728_1_reg_612[5:0] <= 6'b000000;
    shl_ln728_2_reg_617[5:0] <= 6'b000000;
    shl_ln728_3_reg_622[5:0] <= 6'b000000;
    shl_ln728_4_reg_627[5:0] <= 6'b000000;
end

endmodule //myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s
