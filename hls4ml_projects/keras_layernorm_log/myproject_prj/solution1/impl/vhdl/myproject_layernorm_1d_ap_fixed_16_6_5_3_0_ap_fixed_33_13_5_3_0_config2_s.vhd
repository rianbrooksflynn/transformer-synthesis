-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (32 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (32 downto 0) );
end;


architecture behav of myproject_layernorm_1d_ap_fixed_16_6_5_3_0_ap_fixed_33_13_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv22_41 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv37_3333 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000011001100110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal shl_ln_fu_87_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln_reg_499 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_1_fu_95_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_1_reg_504 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_2_fu_103_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_2_reg_509 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_3_fu_111_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_3_reg_514 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_4_fu_119_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln728_4_reg_519 : STD_LOGIC_VECTOR (21 downto 0);
    signal mean_V_reg_524 : STD_LOGIC_VECTOR (20 downto 0);
    signal data_diff_V_0_fu_167_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_0_reg_529 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_0_reg_529_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_0_reg_529_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_0_reg_529_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_1_fu_192_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_1_reg_534 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_1_reg_534_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_1_reg_534_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_1_reg_534_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_2_fu_217_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_2_reg_539 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_2_reg_539_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_2_reg_539_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_2_reg_539_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_2_reg_544 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_3_fu_242_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_3_reg_549 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_3_reg_549_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_3_reg_549_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_3_reg_549_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_4_fu_267_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_4_reg_554 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_4_reg_554_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_4_reg_554_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal data_diff_V_4_reg_554_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_4_fu_292_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_4_reg_559 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_5_fu_298_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_5_reg_564 : STD_LOGIC_VECTOR (21 downto 0);
    signal var_V_reg_569 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_lookup_invert_sqr_config2_s_fu_80_ap_start : STD_LOGIC;
    signal grp_lookup_invert_sqr_config2_s_fu_80_ap_done : STD_LOGIC;
    signal grp_lookup_invert_sqr_config2_s_fu_80_ap_idle : STD_LOGIC;
    signal grp_lookup_invert_sqr_config2_s_fu_80_ap_ready : STD_LOGIC;
    signal grp_lookup_invert_sqr_config2_s_fu_80_ap_ce : STD_LOGIC;
    signal grp_lookup_invert_sqr_config2_s_fu_80_x : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_lookup_invert_sqr_config2_s_fu_80_ap_return : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_state1_pp0_stage0_iter0_ignore_call48 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call48 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call48 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call48 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call48 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call48 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp54 : BOOLEAN;
    signal grp_lookup_invert_sqr_config2_s_fu_80_ap_start_reg : STD_LOGIC := '0';
    signal add_ln703_1_fu_133_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_fu_127_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_2_fu_139_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_3_fu_145_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_fu_485_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln708_5_fu_164_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_fu_176_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_1_fu_172_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_fu_176_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_fu_176_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_1_fu_201_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_2_fu_197_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_1_fu_201_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_1_fu_201_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_2_fu_226_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_3_fu_222_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_2_fu_226_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_2_fu_226_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_3_fu_251_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_4_fu_247_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_3_fu_251_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_3_fu_251_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_4_fu_276_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_5_fu_272_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln708_4_fu_276_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln708_4_fu_276_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln_fu_182_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_1_fu_207_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_4_fu_282_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_3_fu_257_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_6_fu_304_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_7_fu_308_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_1_fu_492_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln708_6_fu_326_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1118_fu_343_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln1116_fu_336_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln1118_fu_343_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln708_7_fu_349_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1118_1_fu_366_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1118_1_fu_366_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln708_8_fu_372_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1118_2_fu_389_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1118_2_fu_389_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln708_9_fu_395_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1118_3_fu_412_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1118_3_fu_412_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln708_s_fu_418_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1118_4_fu_435_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1118_4_fu_435_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln708_5_fu_441_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln708_fu_359_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln708_1_fu_382_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln708_2_fu_405_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln708_3_fu_428_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln708_4_fu_451_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_fu_485_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_1_fu_492_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_lookup_invert_sqr_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (21 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mul_22s_22s_38_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component myproject_mul_19ns_22s_41_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component myproject_mul_mul_22s_15ns_37_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;



begin
    grp_lookup_invert_sqr_config2_s_fu_80 : component myproject_lookup_invert_sqr_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lookup_invert_sqr_config2_s_fu_80_ap_start,
        ap_done => grp_lookup_invert_sqr_config2_s_fu_80_ap_done,
        ap_idle => grp_lookup_invert_sqr_config2_s_fu_80_ap_idle,
        ap_ready => grp_lookup_invert_sqr_config2_s_fu_80_ap_ready,
        ap_ce => grp_lookup_invert_sqr_config2_s_fu_80_ap_ce,
        x => grp_lookup_invert_sqr_config2_s_fu_80_x,
        ap_return => grp_lookup_invert_sqr_config2_s_fu_80_ap_return);

    mul_22s_22s_38_1_1_U3 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_fu_176_p0,
        din1 => mul_ln708_fu_176_p1,
        dout => mul_ln708_fu_176_p2);

    mul_22s_22s_38_1_1_U4 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_1_fu_201_p0,
        din1 => mul_ln708_1_fu_201_p1,
        dout => mul_ln708_1_fu_201_p2);

    mul_22s_22s_38_1_1_U5 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_2_fu_226_p0,
        din1 => mul_ln708_2_fu_226_p1,
        dout => mul_ln708_2_fu_226_p2);

    mul_22s_22s_38_1_1_U6 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_3_fu_251_p0,
        din1 => mul_ln708_3_fu_251_p1,
        dout => mul_ln708_3_fu_251_p2);

    mul_22s_22s_38_1_1_U7 : component myproject_mul_22s_22s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln708_4_fu_276_p0,
        din1 => mul_ln708_4_fu_276_p1,
        dout => mul_ln708_4_fu_276_p2);

    mul_19ns_22s_41_1_1_U8 : component myproject_mul_19ns_22s_41_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 22,
        dout_WIDTH => 41)
    port map (
        din0 => mul_ln1118_fu_343_p0,
        din1 => data_diff_V_0_reg_529_pp0_iter4_reg,
        dout => mul_ln1118_fu_343_p2);

    mul_19ns_22s_41_1_1_U9 : component myproject_mul_19ns_22s_41_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 22,
        dout_WIDTH => 41)
    port map (
        din0 => mul_ln1118_1_fu_366_p0,
        din1 => data_diff_V_1_reg_534_pp0_iter4_reg,
        dout => mul_ln1118_1_fu_366_p2);

    mul_19ns_22s_41_1_1_U10 : component myproject_mul_19ns_22s_41_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 22,
        dout_WIDTH => 41)
    port map (
        din0 => mul_ln1118_2_fu_389_p0,
        din1 => data_diff_V_2_reg_539_pp0_iter4_reg,
        dout => mul_ln1118_2_fu_389_p2);

    mul_19ns_22s_41_1_1_U11 : component myproject_mul_19ns_22s_41_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 22,
        dout_WIDTH => 41)
    port map (
        din0 => mul_ln1118_3_fu_412_p0,
        din1 => data_diff_V_3_reg_549_pp0_iter4_reg,
        dout => mul_ln1118_3_fu_412_p2);

    mul_19ns_22s_41_1_1_U12 : component myproject_mul_19ns_22s_41_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 22,
        dout_WIDTH => 41)
    port map (
        din0 => mul_ln1118_4_fu_435_p0,
        din1 => data_diff_V_4_reg_554_pp0_iter4_reg,
        dout => mul_ln1118_4_fu_435_p2);

    mul_mul_22s_15ns_37_1_1_U13 : component myproject_mul_mul_22s_15ns_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 15,
        dout_WIDTH => 37)
    port map (
        din0 => add_ln703_3_fu_145_p2,
        din1 => r_V_fu_485_p1,
        dout => r_V_fu_485_p2);

    mul_mul_22s_15ns_37_1_1_U14 : component myproject_mul_mul_22s_15ns_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 15,
        dout_WIDTH => 37)
    port map (
        din0 => add_ln703_7_fu_308_p2,
        din1 => r_V_1_fu_492_p1,
        dout => r_V_1_fu_492_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    grp_lookup_invert_sqr_config2_s_fu_80_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lookup_invert_sqr_config2_s_fu_80_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
                    grp_lookup_invert_sqr_config2_s_fu_80_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lookup_invert_sqr_config2_s_fu_80_ap_ready = ap_const_logic_1)) then 
                    grp_lookup_invert_sqr_config2_s_fu_80_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln703_4_reg_559 <= add_ln703_4_fu_292_p2;
                add_ln703_5_reg_564 <= add_ln703_5_fu_298_p2;
                data_diff_V_0_reg_529 <= data_diff_V_0_fu_167_p2;
                data_diff_V_1_reg_534 <= data_diff_V_1_fu_192_p2;
                data_diff_V_2_reg_539 <= data_diff_V_2_fu_217_p2;
                data_diff_V_3_reg_549 <= data_diff_V_3_fu_242_p2;
                data_diff_V_4_reg_554 <= data_diff_V_4_fu_267_p2;
                mean_V_reg_524 <= r_V_fu_485_p2(36 downto 16);
                    shl_ln728_1_reg_504(21 downto 6) <= shl_ln728_1_fu_95_p3(21 downto 6);
                    shl_ln728_2_reg_509(21 downto 6) <= shl_ln728_2_fu_103_p3(21 downto 6);
                    shl_ln728_3_reg_514(21 downto 6) <= shl_ln728_3_fu_111_p3(21 downto 6);
                    shl_ln728_4_reg_519(21 downto 6) <= shl_ln728_4_fu_119_p3(21 downto 6);
                    shl_ln_reg_499(21 downto 6) <= shl_ln_fu_87_p3(21 downto 6);
                trunc_ln708_2_reg_544 <= mul_ln708_2_fu_226_p2(37 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                data_diff_V_0_reg_529_pp0_iter2_reg <= data_diff_V_0_reg_529;
                data_diff_V_0_reg_529_pp0_iter3_reg <= data_diff_V_0_reg_529_pp0_iter2_reg;
                data_diff_V_0_reg_529_pp0_iter4_reg <= data_diff_V_0_reg_529_pp0_iter3_reg;
                data_diff_V_1_reg_534_pp0_iter2_reg <= data_diff_V_1_reg_534;
                data_diff_V_1_reg_534_pp0_iter3_reg <= data_diff_V_1_reg_534_pp0_iter2_reg;
                data_diff_V_1_reg_534_pp0_iter4_reg <= data_diff_V_1_reg_534_pp0_iter3_reg;
                data_diff_V_2_reg_539_pp0_iter2_reg <= data_diff_V_2_reg_539;
                data_diff_V_2_reg_539_pp0_iter3_reg <= data_diff_V_2_reg_539_pp0_iter2_reg;
                data_diff_V_2_reg_539_pp0_iter4_reg <= data_diff_V_2_reg_539_pp0_iter3_reg;
                data_diff_V_3_reg_549_pp0_iter2_reg <= data_diff_V_3_reg_549;
                data_diff_V_3_reg_549_pp0_iter3_reg <= data_diff_V_3_reg_549_pp0_iter2_reg;
                data_diff_V_3_reg_549_pp0_iter4_reg <= data_diff_V_3_reg_549_pp0_iter3_reg;
                data_diff_V_4_reg_554_pp0_iter2_reg <= data_diff_V_4_reg_554;
                data_diff_V_4_reg_554_pp0_iter3_reg <= data_diff_V_4_reg_554_pp0_iter2_reg;
                data_diff_V_4_reg_554_pp0_iter4_reg <= data_diff_V_4_reg_554_pp0_iter3_reg;
                var_V_reg_569 <= r_V_1_fu_492_p2(36 downto 16);
            end if;
        end if;
    end process;
    shl_ln_reg_499(5 downto 0) <= "000000";
    shl_ln728_1_reg_504(5 downto 0) <= "000000";
    shl_ln728_2_reg_509(5 downto 0) <= "000000";
    shl_ln728_3_reg_514(5 downto 0) <= "000000";
    shl_ln728_4_reg_519(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_1_fu_133_p2 <= std_logic_vector(unsigned(shl_ln728_4_fu_119_p3) + unsigned(shl_ln728_3_fu_111_p3));
    add_ln703_2_fu_139_p2 <= std_logic_vector(unsigned(shl_ln728_2_fu_103_p3) + unsigned(add_ln703_1_fu_133_p2));
    add_ln703_3_fu_145_p2 <= std_logic_vector(unsigned(add_ln703_fu_127_p2) + unsigned(add_ln703_2_fu_139_p2));
    add_ln703_4_fu_292_p2 <= std_logic_vector(unsigned(trunc_ln_fu_182_p4) + unsigned(trunc_ln708_1_fu_207_p4));
    add_ln703_5_fu_298_p2 <= std_logic_vector(unsigned(trunc_ln708_4_fu_282_p4) + unsigned(trunc_ln708_3_fu_257_p4));
    add_ln703_6_fu_304_p2 <= std_logic_vector(unsigned(trunc_ln708_2_reg_544) + unsigned(add_ln703_5_reg_564));
    add_ln703_7_fu_308_p2 <= std_logic_vector(unsigned(add_ln703_4_reg_559) + unsigned(add_ln703_6_fu_304_p2));
    add_ln703_fu_127_p2 <= std_logic_vector(unsigned(shl_ln_fu_87_p3) + unsigned(shl_ln728_1_fu_95_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp54_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp54 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call48_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call48 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= sext_ln708_fu_359_p1;
    ap_return_1 <= sext_ln708_1_fu_382_p1;
    ap_return_2 <= sext_ln708_2_fu_405_p1;
    ap_return_3 <= sext_ln708_3_fu_428_p1;
    ap_return_4 <= sext_ln708_4_fu_451_p1;
    data_diff_V_0_fu_167_p2 <= std_logic_vector(unsigned(shl_ln_reg_499) - unsigned(sext_ln708_5_fu_164_p1));
    data_diff_V_1_fu_192_p2 <= std_logic_vector(unsigned(shl_ln728_1_reg_504) - unsigned(sext_ln708_5_fu_164_p1));
    data_diff_V_2_fu_217_p2 <= std_logic_vector(unsigned(shl_ln728_2_reg_509) - unsigned(sext_ln708_5_fu_164_p1));
    data_diff_V_3_fu_242_p2 <= std_logic_vector(unsigned(shl_ln728_3_reg_514) - unsigned(sext_ln708_5_fu_164_p1));
    data_diff_V_4_fu_267_p2 <= std_logic_vector(unsigned(shl_ln728_4_reg_519) - unsigned(sext_ln708_5_fu_164_p1));

    grp_lookup_invert_sqr_config2_s_fu_80_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001_ignoreCallOp54)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp54) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_lookup_invert_sqr_config2_s_fu_80_ap_ce <= ap_const_logic_1;
        else 
            grp_lookup_invert_sqr_config2_s_fu_80_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_lookup_invert_sqr_config2_s_fu_80_ap_start <= grp_lookup_invert_sqr_config2_s_fu_80_ap_start_reg;
    grp_lookup_invert_sqr_config2_s_fu_80_x <= std_logic_vector(signed(sext_ln708_6_fu_326_p1) + signed(ap_const_lv22_41));
    mul_ln1118_1_fu_366_p0 <= zext_ln1116_fu_336_p1(19 - 1 downto 0);
    mul_ln1118_2_fu_389_p0 <= zext_ln1116_fu_336_p1(19 - 1 downto 0);
    mul_ln1118_3_fu_412_p0 <= zext_ln1116_fu_336_p1(19 - 1 downto 0);
    mul_ln1118_4_fu_435_p0 <= zext_ln1116_fu_336_p1(19 - 1 downto 0);
    mul_ln1118_fu_343_p0 <= zext_ln1116_fu_336_p1(19 - 1 downto 0);
    mul_ln708_1_fu_201_p0 <= sext_ln1118_2_fu_197_p1(22 - 1 downto 0);
    mul_ln708_1_fu_201_p1 <= sext_ln1118_2_fu_197_p1(22 - 1 downto 0);
    mul_ln708_2_fu_226_p0 <= sext_ln1118_3_fu_222_p1(22 - 1 downto 0);
    mul_ln708_2_fu_226_p1 <= sext_ln1118_3_fu_222_p1(22 - 1 downto 0);
    mul_ln708_3_fu_251_p0 <= sext_ln1118_4_fu_247_p1(22 - 1 downto 0);
    mul_ln708_3_fu_251_p1 <= sext_ln1118_4_fu_247_p1(22 - 1 downto 0);
    mul_ln708_4_fu_276_p0 <= sext_ln1118_5_fu_272_p1(22 - 1 downto 0);
    mul_ln708_4_fu_276_p1 <= sext_ln1118_5_fu_272_p1(22 - 1 downto 0);
    mul_ln708_fu_176_p0 <= sext_ln1118_1_fu_172_p1(22 - 1 downto 0);
    mul_ln708_fu_176_p1 <= sext_ln1118_1_fu_172_p1(22 - 1 downto 0);
    r_V_1_fu_492_p1 <= ap_const_lv37_3333(15 - 1 downto 0);
    r_V_fu_485_p1 <= ap_const_lv37_3333(15 - 1 downto 0);
        sext_ln1118_1_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_diff_V_0_fu_167_p2),38));

        sext_ln1118_2_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_diff_V_1_fu_192_p2),38));

        sext_ln1118_3_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_diff_V_2_fu_217_p2),38));

        sext_ln1118_4_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_diff_V_3_fu_242_p2),38));

        sext_ln1118_5_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_diff_V_4_fu_267_p2),38));

        sext_ln708_1_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_8_fu_372_p4),33));

        sext_ln708_2_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_9_fu_395_p4),33));

        sext_ln708_3_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_s_fu_418_p4),33));

        sext_ln708_4_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_5_fu_441_p4),33));

        sext_ln708_5_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mean_V_reg_524),22));

        sext_ln708_6_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(var_V_reg_569),22));

        sext_ln708_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_7_fu_349_p4),33));

    shl_ln728_1_fu_95_p3 <= (p_read1 & ap_const_lv6_0);
    shl_ln728_2_fu_103_p3 <= (p_read2 & ap_const_lv6_0);
    shl_ln728_3_fu_111_p3 <= (p_read3 & ap_const_lv6_0);
    shl_ln728_4_fu_119_p3 <= (p_read4 & ap_const_lv6_0);
    shl_ln_fu_87_p3 <= (p_read & ap_const_lv6_0);
    trunc_ln708_1_fu_207_p4 <= mul_ln708_1_fu_201_p2(37 downto 16);
    trunc_ln708_3_fu_257_p4 <= mul_ln708_3_fu_251_p2(37 downto 16);
    trunc_ln708_4_fu_282_p4 <= mul_ln708_4_fu_276_p2(37 downto 16);
    trunc_ln708_5_fu_441_p4 <= mul_ln1118_4_fu_435_p2(40 downto 10);
    trunc_ln708_7_fu_349_p4 <= mul_ln1118_fu_343_p2(40 downto 10);
    trunc_ln708_8_fu_372_p4 <= mul_ln1118_1_fu_366_p2(40 downto 10);
    trunc_ln708_9_fu_395_p4 <= mul_ln1118_2_fu_389_p2(40 downto 10);
    trunc_ln708_s_fu_418_p4 <= mul_ln1118_3_fu_412_p2(40 downto 10);
    trunc_ln_fu_182_p4 <= mul_ln708_fu_176_p2(37 downto 16);
    zext_ln1116_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_lookup_invert_sqr_config2_s_fu_80_ap_return),41));
end behav;
