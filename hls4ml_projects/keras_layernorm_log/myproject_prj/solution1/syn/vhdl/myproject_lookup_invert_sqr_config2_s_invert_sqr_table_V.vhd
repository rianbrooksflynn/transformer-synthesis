-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_lookup_invert_sqr_config2_s_invert_sqr_table_V_rom is 
    generic(
             DWIDTH     : integer := 19; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myproject_lookup_invert_sqr_config2_s_invert_sqr_table_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111110011111011011", 1 => "1111100110010100001", 
    2 => "1111011000111000100", 3 => "1111001011101000100", 
    4 => "1110111110100100000", 5 => "1110110001101010101", 
    6 => "1110100100111100011", 7 => "1110011000011001001", 
    8 => "1110001100000000101", 9 => "1101111111110010111", 
    10 => "1101110011101111101", 11 => "1101100111110110101", 
    12 => "1101011100001000000", 13 => "1101010000100011011", 
    14 => "1101000101001000111", 15 => "1100111001111000000", 
    16 => "1100101110110001000", 17 => "1100100011110011011", 
    18 => "1100011000111111011", 19 => "1100001110010100101", 
    20 => "1100000011110011000", 21 => "1011111001011010100", 
    22 => "1011101111001010111", 23 => "1011100101000100001", 
    24 => "1011011011000110000", 25 => "1011010001010000101", 
    26 => "1011000111100011101", 27 => "1010111101111110111", 
    28 => "1010110100100010100", 29 => "1010101011001110010", 
    30 => "1010100010000010000", 31 => "1010011000111101101", 
    32 => "1010010000000001001", 33 => "1010000111001100010", 
    34 => "1001111110011111000", 35 => "1001110101111001010", 
    36 => "1001101101011010111", 37 => "1001100101000011111", 
    38 => "1001011100110100000", 39 => "1001010100101011010", 
    40 => "1001001100101001100", 41 => "1001000100101110101", 
    42 => "1000111100111010101", 43 => "1000110101001101011", 
    44 => "1000101101100110110", 45 => "1000100110000110101", 
    46 => "1000011110101101000", 47 => "1000010111011001110", 
    48 => "1000010000001100110", 49 => "1000001001000110000", 
    50 => "1000000010000101010", 51 => "0111111011001010101", 
    52 => "0111110100010110000", 53 => "0111101101100111001", 
    54 => "0111100110111110001", 55 => "0111100000011010111", 
    56 => "0111011001111101010", 57 => "0111010011100101001", 
    58 => "0111001101010010101", 59 => "0111000111000101011", 
    60 => "0111000000111101100", 61 => "0110111010111011000", 
    62 => "0110110100111101101", 63 => "0110101111000101011", 
    64 => "0110101001010010010", 65 => "0110100011100100001", 
    66 => "0110011101111010111", 67 => "0110011000010110011", 
    68 => "0110010010110110111", 69 => "0110001101011100000", 
    70 => "0110001000000101110", 71 => "0110000010110100001", 
    72 => "0101111101100111001", 73 => "0101111000011110100", 
    74 => "0101110011011010011", 75 => "0101101110011010101", 
    76 => "0101101001011111001", 77 => "0101100100100111111", 
    78 => "0101011111110100111", 79 => "0101011011000101111", 
    80 => "0101010110011011000", 81 => "0101010001110100010", 
    82 => "0101001101010001011", 83 => "0101001000110010011", 
    84 => "0101000100010111011", 85 => "0101000000000000000", 
    86 => "0100111011101100100", 87 => "0100110111011100110", 
    88 => "0100110011010000100", 89 => "0100101111001000000", 
    90 => "0100101011000011000", 91 => "0100100111000001100", 
    92 => "0100100011000011100", 93 => "0100011111001000111", 
    94 => "0100011011010001101", 95 => "0100010111011101110", 
    96 => "0100010011101101001", 97 => "0100001111111111110", 
    98 => "0100001100010101100", 99 => "0100001000101110100", 
    100 => "0100000101001010101", 101 => "0100000001101001110", 
    102 => "0011111110001011111", 103 => "0011111010110001000", 
    104 => "0011110111011001001", 105 => "0011110100000100001", 
    106 => "0011110000110010000", 107 => "0011101101100010101", 
    108 => "0011101010010110001", 109 => "0011100111001100011", 
    110 => "0011100100000101010", 111 => "0011100001000000111", 
    112 => "0011011101111111001", 113 => "0011011011000000000", 
    114 => "0011011000000011100", 115 => "0011010101001001100", 
    116 => "0011010010010001111", 117 => "0011001111011100111", 
    118 => "0011001100101010010", 119 => "0011001001111010000", 
    120 => "0011000111001100010", 121 => "0011000100100000101", 
    122 => "0011000001110111100", 123 => "0010111111010000101", 
    124 => "0010111100101011111", 125 => "0010111010001001011", 
    126 => "0010110111101001001", 127 => "0010110101001011000", 
    128 => "0010110010101111000", 129 => "0010110000010101001", 
    130 => "0010101101111101011", 131 => "0010101011100111100", 
    132 => "0010101001010011110", 133 => "0010100111000010000", 
    134 => "0010100100110010010", 135 => "0010100010100100010", 
    136 => "0010100000011000011", 137 => "0010011110001110010", 
    138 => "0010011100000110000", 139 => "0010011001111111101", 
    140 => "0010010111111011000", 141 => "0010010101111000010", 
    142 => "0010010011110111001", 143 => "0010010001110111111", 
    144 => "0010001111111010010", 145 => "0010001101111110011", 
    146 => "0010001100000100001", 147 => "0010001010001011100", 
    148 => "0010001000010100100", 149 => "0010000110011111001", 
    150 => "0010000100101011011", 151 => "0010000010111001001", 
    152 => "0010000001001000011", 153 => "0001111111011001010", 
    154 => "0001111101101011100", 155 => "0001111011111111011", 
    156 => "0001111010010100101", 157 => "0001111000101011010", 
    158 => "0001110111000011011", 159 => "0001110101011100111", 
    160 => "0001110011110111110", 161 => "0001110010010100000", 
    162 => "0001110000110001100", 163 => "0001101111010000100", 
    164 => "0001101101110000101", 165 => "0001101100010010001", 
    166 => "0001101010110100111", 167 => "0001101001011000111", 
    168 => "0001100111111110001", 169 => "0001100110100100101", 
    170 => "0001100101001100011", 171 => "0001100011110101010", 
    172 => "0001100010011111010", 173 => "0001100001001010100", 
    174 => "0001011111110110110", 175 => "0001011110100100010", 
    176 => "0001011101010010111", 177 => "0001011100000010100", 
    178 => "0001011010110011010", 179 => "0001011001100101001", 
    180 => "0001011000011000000", 181 => "0001010111001011111", 
    182 => "0001010110000000110", 183 => "0001010100110110110", 
    184 => "0001010011101101101", 185 => "0001010010100101101", 
    186 => "0001010001011110100", 187 => "0001010000011000011", 
    188 => "0001001111010011001", 189 => "0001001110001110111", 
    190 => "0001001101001011100", 191 => "0001001100001001000", 
    192 => "0001001011000111100", 193 => "0001001010000110110", 
    194 => "0001001001000111000", 195 => "0001001000001000000", 
    196 => "0001000111001010000", 197 => "0001000110001100101", 
    198 => "0001000101010000010", 199 => "0001000100010100101", 
    200 => "0001000011011001110", 201 => "0001000010011111110", 
    202 => "0001000001100110100", 203 => "0001000000101110000", 
    204 => "0000111111110110010", 205 => "0000111110111111010", 
    206 => "0000111110001001001", 207 => "0000111101010011101", 
    208 => "0000111100011110110", 209 => "0000111011101010110", 
    210 => "0000111010110111011", 211 => "0000111010000100101", 
    212 => "0000111001010010101", 213 => "0000111000100001010", 
    214 => "0000110111110000101", 215 => "0000110111000000101", 
    216 => "0000110110010001010", 217 => "0000110101100010100", 
    218 => "0000110100110100100", 219 => "0000110100000111000", 
    220 => "0000110011011010001", 221 => "0000110010101101111", 
    222 => "0000110010000010001", 223 => "0000110001010111001", 
    224 => "0000110000101100101", 225 => "0000110000000010101", 
    226 => "0000101111011001010", 227 => "0000101110110000100", 
    228 => "0000101110001000010", 229 => "0000101101100000100", 
    230 => "0000101100111001011", 231 => "0000101100010010101", 
    232 => "0000101011101100100", 233 => "0000101011000110111", 
    234 => "0000101010100001110", 235 => "0000101001111101001", 
    236 => "0000101001011001000", 237 => "0000101000110101011", 
    238 => "0000101000010010010", 239 => "0000100111101111100", 
    240 => "0000100111001101011", 241 => "0000100110101011101", 
    242 => "0000100110001010010", 243 => "0000100101101001011", 
    244 => "0000100101001001000", 245 => "0000100100101001000", 
    246 => "0000100100001001100", 247 => "0000100011101010011", 
    248 => "0000100011001011101", 249 => "0000100010101101011", 
    250 => "0000100010001111100", 251 => "0000100001110010000", 
    252 => "0000100001010100111", 253 => "0000100000111000010", 
    254 => "0000100000011011111", 255 => "0000100000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myproject_lookup_invert_sqr_config2_s_invert_sqr_table_V is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myproject_lookup_invert_sqr_config2_s_invert_sqr_table_V is
    component myproject_lookup_invert_sqr_config2_s_invert_sqr_table_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myproject_lookup_invert_sqr_config2_s_invert_sqr_table_V_rom_U :  component myproject_lookup_invert_sqr_config2_s_invert_sqr_table_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


